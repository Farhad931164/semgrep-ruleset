{
  "rules": [
    {
      "fix-regex": {
        "regex": "(.*)\\)",
        "replacement": "\\1, autoescape=True)"
      },
      "id": "python.jinja2.security.audit.autoescape-disabled.autoescape-disabled",
      "languages": [
        "python"
      ],
      "message": "Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape by default. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions.",
      "metadata": {
        "category": "security",
        "cwe": "CWE-116: Improper Encoding or Escaping of Output",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "owasp": "A6: Security Misconfiguration",
        "references": [
          "https://jinja.palletsprojects.com/en/2.11.x/api/#basics"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "pKUOrp",
            "url": "https://semgrep.dev/playground/r/yeTDg8/python.jinja2.security.audit.autoescape-disabled.autoescape-disabled",
            "version_id": "yeTDg8"
          }
        },
        "shortlink": "https://sg.run/KlGX",
        "source": "https://semgrep.dev/r/python.jinja2.security.audit.autoescape-disabled.autoescape-disabled",
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b701_jinja2_autoescape_false.html",
        "technology": [
          "jinja2"
        ]
      },
      "patterns": [
        {
          "pattern-not": "jinja2.Environment(..., autoescape=True, ...)"
        },
        {
          "pattern-not": "jinja2.Environment(..., autoescape=jinja2.select_autoescape(...), ...)"
        },
        {
          "pattern": "jinja2.Environment(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "regex": "sha1",
        "replacement": "sha256"
      },
      "id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
      "languages": [
        "python"
      ],
      "message": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
      "metadata": {
        "asvs": {
          "control_id": "6.2.2 Insecure Custom Algorithm",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms",
          "section": "V6 Stored Cryptography Verification Requirements",
          "version": "4"
        },
        "bandit-code": "B303",
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html",
          "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability",
          "http://2012.sharcs.org/slides/stevens.pdf",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "x8UnBk",
            "url": "https://semgrep.dev/playground/r/e1TA7A/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
            "version_id": "e1TA7A"
          }
        },
        "shortlink": "https://sg.run/ydYx",
        "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern": "hashlib.sha1(...)",
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "count": 1,
        "regex": "unsafe_load",
        "replacement": "safe_load"
      },
      "id": "python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load",
      "languages": [
        "python"
      ],
      "message": "Detected a possible YAML deserialization vulnerability. `yaml.unsafe_load`, `yaml.Loader`, `yaml.CLoader`, and `yaml.UnsafeLoader` are all known to be unsafe methods of deserializing YAML. An attacker with control over the YAML input could create special YAML input that allows the attacker to run arbitrary Python code. This would allow the attacker to steal files, download and install malware, or otherwise take over the machine. Use `yaml.safe_load` or `yaml.SafeLoader` instead.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-502: Deserialization of Untrusted Data"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A08:2017 - Insecure Deserialization",
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation",
          "https://nvd.nist.gov/vuln/detail/CVE-2017-18342"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "ZqU5jZ",
            "url": "https://semgrep.dev/playground/r/kbTZ4W/python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load",
            "version_id": "kbTZ4W"
          }
        },
        "shortlink": "https://sg.run/we9Y",
        "source": "https://semgrep.dev/r/python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "pyyaml"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "import yaml\n...\n"
        },
        {
          "pattern-not-inside": "$YAML = ruamel.yaml.YAML(...)\n...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "yaml.unsafe_load(...)"
            },
            {
              "pattern": "yaml.load(..., Loader=yaml.Loader, ...)"
            },
            {
              "pattern": "yaml.load(..., Loader=yaml.UnsafeLoader, ...)"
            },
            {
              "pattern": "yaml.load(..., Loader=yaml.CLoader, ...)"
            },
            {
              "pattern": "yaml.load_all(..., Loader=yaml.Loader, ...)"
            },
            {
              "pattern": "yaml.load_all(..., Loader=yaml.UnsafeLoader, ...)"
            },
            {
              "pattern": "yaml.load_all(..., Loader=yaml.CLoader, ...)"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "contrib.dlint.dlint-equivalent.insecure-xmlsec-attribute-use",
      "languages": [
        "python"
      ],
      "message": "Weak or insecure 'xmlsec' module attribute usage",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-310: Cryptographic Issues"
        ],
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "owasp": [
          "A06:2017 - Security Misconfiguration",
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO136.md"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "8GUjO7",
            "url": "https://semgrep.dev/playground/r/X0T478/contrib.dlint.dlint-equivalent.insecure-xmlsec-attribute-use",
            "version_id": "X0T478"
          }
        },
        "shortlink": "https://sg.run/b7Rq",
        "source": "https://semgrep.dev/r/contrib.dlint.dlint-equivalent.insecure-xmlsec-attribute-use",
        "source_rule_url": "https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO136.md",
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "pattern": "xmlsec.constants.TransformDes3Cbc"
        },
        {
          "pattern": "xmlsec.constants.TransformKWDes3"
        },
        {
          "pattern": "xmlsec.constants.TransformDsaSha1"
        },
        {
          "pattern": "xmlsec.constants.TransformEcdsaSha1"
        },
        {
          "pattern": "xmlsec.constants.TransformRsaMd5"
        },
        {
          "pattern": "xmlsec.constants.TransformRsaRipemd160"
        },
        {
          "pattern": "xmlsec.constants.TransformRsaSha1"
        },
        {
          "pattern": "xmlsec.constants.TransformRsaPkcs1"
        },
        {
          "pattern": "xmlsec.constants.TransformMd5"
        },
        {
          "pattern": "xmlsec.constants.TransformRipemd160"
        },
        {
          "pattern": "xmlsec.constants.TransformSha1"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.deserialization.pickle.avoid-shelve",
      "languages": [
        "python"
      ],
      "message": "Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-502: Deserialization of Untrusted Data"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A08:2017 - Insecure Deserialization",
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/pickle.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "8GUje2",
            "url": "https://semgrep.dev/playground/r/yeTbGQ/python.lang.security.deserialization.pickle.avoid-shelve",
            "version_id": "yeTbGQ"
          }
        },
        "shortlink": "https://sg.run/dKkZ",
        "source": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern": "shelve.$FUNC(...)",
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.deserialization.pickle.avoid-pickle",
      "languages": [
        "python"
      ],
      "message": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-502: Deserialization of Untrusted Data"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A08:2017 - Insecure Deserialization",
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/pickle.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "EwU2BJ",
            "url": "https://semgrep.dev/playground/r/jQTeDJ/python.lang.security.deserialization.pickle.avoid-pickle",
            "version_id": "jQTeDJ"
          }
        },
        "shortlink": "https://sg.run/OPwB",
        "source": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "pickle.$FUNC(...)"
            },
            {
              "pattern": "_pickle.$FUNC(...)"
            }
          ]
        },
        {
          "pattern-not": "pickle.$FUNC(\"...\")"
        },
        {
          "pattern-not": "_pickle.$FUNC(\"...\")"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.audit.system-wildcard-detected.system-wildcard-detected",
      "languages": [
        "python"
      ],
      "message": "Detected use of the wildcard character in a system call that spawns a shell. This subjects the wildcard to normal shell expansion, which can have unintended consequences if there exist any non-standard file names. Consider a file named '-e sh script.sh' -- this will execute a script when 'rsync' is called. See https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt for more information.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-155: Improper Neutralization of Wildcards or Matching Symbols"
        ],
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": "A01:2017 - Injection",
        "references": [
          "https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "WAUorE",
            "url": "https://semgrep.dev/playground/r/1QTwXo/python.lang.security.audit.system-wildcard-detected.system-wildcard-detected",
            "version_id": "1QTwXo"
          }
        },
        "shortlink": "https://sg.run/5QXA",
        "source": "https://semgrep.dev/r/python.lang.security.audit.system-wildcard-detected.system-wildcard-detected",
        "source-url-open": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/injection_wildcard.py",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "os.system(\"...\")"
            },
            {
              "pattern-inside": "os.popen(\"...\")"
            },
            {
              "pattern-inside": "os.popen2(\"...\")"
            },
            {
              "pattern-inside": "os.popen3(\"...\")"
            },
            {
              "pattern-inside": "os.popen4(\"...\")"
            },
            {
              "pattern-inside": "subprocess.$W(..., shell=True, ...)"
            }
          ]
        },
        {
          "pattern-regex": "(tar|chmod|chown|rsync)(.*?)\\*"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-idea",
      "languages": [
        "python"
      ],
      "message": "Detected IDEA cipher algorithm which is considered insecure. The algorithm is considered weak and has been deprecated. Use AES instead.",
      "metadata": {
        "bandit-code": "B304",
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://tools.ietf.org/html/rfc5469"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "BYUNPg",
            "url": "https://semgrep.dev/playground/r/QkTQbz/python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-idea",
            "version_id": "QkTQbz"
          }
        },
        "shortlink": "https://sg.run/3xyK",
        "source": "https://semgrep.dev/r/python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-idea",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L98",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "cryptography"
        ]
      },
      "pattern": "cryptography.hazmat.primitives.ciphers.algorithms.IDEA(...)",
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.audit.dangerous-spawn-process.dangerous-spawn-process",
      "languages": [
        "python"
      ],
      "message": "Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "cwe": "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "owasp": "A1: Injection",
        "semgrep.dev": {
          "rule": {
            "rule_id": "EwU2kJ",
            "url": "https://semgrep.dev/playground/r/gETxvX/python.lang.security.audit.dangerous-spawn-process.dangerous-spawn-process",
            "version_id": "gETxvX"
          }
        },
        "shortlink": "https://sg.run/OPYB",
        "source": "https://semgrep.dev/r/python.lang.security.audit.dangerous-spawn-process.dangerous-spawn-process",
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "patterns": [
            {
              "pattern-not": "os.$METHOD($MODE, \"...\", ...)"
            },
            {
              "pattern": "os.$METHOD(...)"
            },
            {
              "metavariable-regex": {
                "metavariable": "$METHOD",
                "regex": "(spawnl|spawnle|spawnlp|spawnlpe|spawnv|spawnve|spawnvp|spawnvp|spawnvpe|posix_spawn|posix_spawnp|startfile)"
              }
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-not": "os.$METHOD($MODE, \"...\", [\"...\",\"...\",...], ...)"
            },
            {
              "pattern": "os.$METHOD($MODE, $BASH, [\"-c\",$CMD,...],...)"
            },
            {
              "metavariable-regex": {
                "metavariable": "$METHOD",
                "regex": "(spawnv|spawnve|spawnvp|spawnvp|spawnvpe|posix_spawn|posix_spawnp)"
              }
            },
            {
              "metavariable-regex": {
                "metavariable": "$BASH",
                "regex": "(.*)(sh|bash|ksh|csh|tcsh|zsh)"
              }
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-not": "os.$METHOD($MODE, \"...\", \"...\", \"...\", ...)"
            },
            {
              "pattern": "os.$METHOD($MODE, $BASH, \"-c\", $CMD,...)"
            },
            {
              "metavariable-regex": {
                "metavariable": "$METHOD",
                "regex": "(spawnl|spawnle|spawnlp|spawnlpe)"
              }
            },
            {
              "metavariable-regex": {
                "metavariable": "$BASH",
                "regex": "(.*)(sh|bash|ksh|csh|tcsh|zsh)"
              }
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.django.security.audit.query-set-extra.avoid-query-set-extra",
      "languages": [
        "python"
      ],
      "message": "QuerySet.extra' does not provide safeguards against SQL injection and requires very careful use. SQL injection can lead to critical data being stolen by attackers. Instead of using '.extra', use the Django ORM and parameterized queries such as `People.objects.get(name='Bob')`.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet.extra",
          "https://blog.r2c.dev/2020/preventing-sql-injection-a-django-authors-perspective/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "nJUzBP",
            "url": "https://semgrep.dev/playground/r/YDT8J8/python.django.security.audit.query-set-extra.avoid-query-set-extra",
            "version_id": "YDT8J8"
          }
        },
        "shortlink": "https://sg.run/kXZP",
        "source": "https://semgrep.dev/r/python.django.security.audit.query-set-extra.avoid-query-set-extra",
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b610_django_extra_used.html",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern": "$MODEL.extra(...)"
        },
        {
          "pattern-not-inside": "$MODEL.extra(select = {$KEY: \"...\"})"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-blowfish",
      "languages": [
        "python"
      ],
      "message": "Detected Blowfish cipher algorithm which is considered insecure. The algorithm has many known vulnerabilities. Use AES instead.",
      "metadata": {
        "bandit-code": "B304",
        "category": "security",
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "owasp": "A3: Sensitive Data Exposure",
        "references": [
          "https://sweet32.info/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "3qUBYk",
            "url": "https://semgrep.dev/playground/r/bZTLqA/python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-blowfish",
            "version_id": "bZTLqA"
          }
        },
        "shortlink": "https://sg.run/E5jw",
        "source": "https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-blowfish",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84",
        "technology": [
          "pycryptodome"
        ]
      },
      "pattern-either": [
        {
          "pattern": "Cryptodome.Cipher.Blowfish.new(...)"
        },
        {
          "pattern": "Crypto.Cipher.Blowfish.new(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.audit.paramiko-implicit-trust-host-key.paramiko-implicit-trust-host-key",
      "languages": [
        "python"
      ],
      "message": "Detected a paramiko host key policy that implicitly trusts a server's host key. Host keys should be verified to ensure the connection is not to a malicious server. Use RejectPolicy or a custom subclass instead.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-322: Key Exchange without Entity Authentication"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "http://docs.paramiko.org/en/stable/api/client.html#paramiko.client.AutoAddPolicy"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "AbUzbe",
            "url": "https://semgrep.dev/playground/r/DkTe8O/python.lang.security.audit.paramiko-implicit-trust-host-key.paramiko-implicit-trust-host-key",
            "version_id": "DkTe8O"
          }
        },
        "shortlink": "https://sg.run/4xpl",
        "source": "https://semgrep.dev/r/python.lang.security.audit.paramiko-implicit-trust-host-key.paramiko-implicit-trust-host-key",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/ssh_no_host_key_verification.py",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "paramiko"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "$CLIENT = paramiko.client.SSHClient(...)\n...\n$CLIENT.set_missing_host_key_policy(...)\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "paramiko.client.AutoAddPolicy"
            },
            {
              "pattern": "paramiko.client.WarningPolicy"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.boto3.security.hardcoded-token.hardcoded-token",
      "languages": [
        "python"
      ],
      "message": "A hard-coded credential was detected. It is not recommended  to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary.  It is recommended to use environment variables to  securely provide credentials or retrieve credentials from  a secure vault or HSM (Hardware Security Module).",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html",
          "https://bento.dev/checks/boto3/hardcoded-access-token/",
          "https://aws.amazon.com/blogs/security/what-to-do-if-you-inadvertently-expose-an-aws-access-key/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "5rUOwK",
            "url": "https://semgrep.dev/playground/r/LjTpwq/python.boto3.security.hardcoded-token.hardcoded-token",
            "version_id": "LjTpwq"
          }
        },
        "shortlink": "https://sg.run/LwQ6",
        "source": "https://semgrep.dev/r/python.boto3.security.hardcoded-token.hardcoded-token",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "boto3",
          "secrets"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "$W(...,$TOKEN=\"$VALUE\",...)"
                },
                {
                  "pattern": "$BOTO. ... .$W(...,$TOKEN=\"$VALUE\",...)"
                }
              ]
            },
            {
              "metavariable-regex": {
                "metavariable": "$TOKEN",
                "regex": "(aws_session_token|aws_access_key_id|aws_secret_access_key)"
              }
            },
            {
              "metavariable-pattern": {
                "language": "generic",
                "metavariable": "$VALUE",
                "patterns": [
                  {
                    "pattern-either": [
                      {
                        "pattern-regex": "^AKI"
                      },
                      {
                        "pattern-regex": "^[A-Za-z0-9/+=]+$"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "metavariable-analysis": {
                "analyzer": "entropy",
                "metavariable": "$VALUE"
              }
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "pattern": "\"...\"\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected",
      "languages": [
        "python"
      ],
      "message": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.",
      "metadata": {
        "asvs": {
          "control_id": "5.2.4 Dynamic Code Execution Features",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "bandit-code": "B310",
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-939: Improper Authorization in Handler for Custom URL Scheme"
        ],
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": "A01:2017 - Injection",
        "references": [
          "https://cwe.mitre.org/data/definitions/939.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "8GUj22",
            "url": "https://semgrep.dev/playground/r/X0T0J5/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected",
            "version_id": "X0T0J5"
          }
        },
        "shortlink": "https://sg.run/dKZZ",
        "source": "https://semgrep.dev/r/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/blacklists/calls.py#L163",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern-not": "urllib.$W(\"...\")"
        },
        {
          "pattern-not": "urllib.request.$W(\"...\")"
        },
        {
          "pattern-not": "$OPENER.$W(\"...\")"
        },
        {
          "pattern-either": [
            {
              "pattern": "urllib.urlopen(...)"
            },
            {
              "pattern": "urllib.request.urlopen(...)"
            },
            {
              "pattern": "urllib.urlretrieve(...)"
            },
            {
              "pattern": "urllib.request.urlretrieve(...)"
            },
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern-inside": "$OPENER = urllib.URLopener(...)\n...\n"
                    },
                    {
                      "pattern-inside": "$OPENER = urllib.request.URLopener(...)\n...\n"
                    },
                    {
                      "pattern-inside": "$OPENER = urllib.FancyURLopener(...)\n...\n"
                    },
                    {
                      "pattern-inside": "$OPENER = urllib.request.FancyURLopener(...)\n...\n"
                    }
                  ]
                },
                {
                  "pattern-either": [
                    {
                      "pattern": "$OPENER.open(...)"
                    },
                    {
                      "pattern": "$OPENER.retrieve(...)"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "contrib.dlint.dlint-equivalent.insecure-os-temp-use",
      "languages": [
        "python"
      ],
      "message": "The Python 'os' tempnam|tmpnam functions are vulnerable to symlink attacks",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-377: Insecure Temporary File"
        ],
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "owasp": [
          "A09:2017 - Using Components with Known Vulnerabilities",
          "A06:2021 - Vulnerable and Outdated Components"
        ],
        "references": [
          "https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO106.md"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "oqUejk",
            "url": "https://semgrep.dev/playground/r/WrT8Z5/contrib.dlint.dlint-equivalent.insecure-os-temp-use",
            "version_id": "WrT8Z5"
          }
        },
        "shortlink": "https://sg.run/J9Ed",
        "source": "https://semgrep.dev/r/contrib.dlint.dlint-equivalent.insecure-os-temp-use",
        "source_rule_url": "https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO106.md",
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "pattern": "os.tempnam(...)"
        },
        {
          "pattern": "os.tmpnam(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.audit.exec-detected.exec-detected",
      "languages": [
        "python"
      ],
      "message": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",
      "metadata": {
        "asvs": {
          "control_id": "5.2.4 Dyanmic Code Execution Features",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "QrUzKv",
            "url": "https://semgrep.dev/playground/r/e1TAdz/python.lang.security.audit.exec-detected.exec-detected",
            "version_id": "e1TAdz"
          }
        },
        "shortlink": "https://sg.run/ndRX",
        "source": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b102_exec_used.html",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern-not": "exec(\"...\")"
        },
        {
          "pattern": "exec(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.audit.dangerous-subprocess-use.dangerous-subprocess-use",
      "languages": [
        "python"
      ],
      "message": "This rule is deprecated. It will no longer produce findings.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "deprecated": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess",
          "https://docs.python.org/3/library/subprocess.html",
          "https://docs.python.org/3/library/shlex.html",
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "7KUQ7L",
            "url": "https://semgrep.dev/playground/r/rxT8YO/python.lang.security.audit.dangerous-subprocess-use.dangerous-subprocess-use",
            "version_id": "rxT8YO"
          }
        },
        "shortlink": "https://sg.run/eLnb",
        "source": "https://semgrep.dev/r/python.lang.security.audit.dangerous-subprocess-use.dangerous-subprocess-use",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern": "a()"
        },
        {
          "pattern": "b()"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-md2",
      "languages": [
        "python"
      ],
      "message": "Detected MD2 hash algorithm which is considered insecure. This algorithm has many known vulnerabilities and has been deprecated. Use SHA256 or SHA3 instead.",
      "metadata": {
        "category": "security",
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "owasp": "A3: Sensitive Data Exposure",
        "references": [
          "https://tools.ietf.org/html/rfc6149",
          "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2409",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "JDUP1y",
            "url": "https://semgrep.dev/playground/r/w8TkZz/python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-md2",
            "version_id": "w8TkZz"
          }
        },
        "shortlink": "https://sg.run/8nqy",
        "source": "https://semgrep.dev/r/python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-md2",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
        "technology": [
          "pycryptodome"
        ]
      },
      "pattern-either": [
        {
          "pattern": "Crypto.Hash.MD2.new(...)"
        },
        {
          "pattern": "Cryptodome.Hash.MD2.new (...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "contrib.dlint.dlint-equivalent.insecure-xml-use",
      "languages": [
        "python"
      ],
      "message": "Insecure XML parsing functionality, prefer 'defusedxml'",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-611: Improper Restriction of XML External Entity Reference"
        ],
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "owasp": [
          "A09:2017 - Using Components with Known Vulnerabilities",
          "A06:2021 - Vulnerable and Outdated Components"
        ],
        "references": [
          "https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO107.md"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "zdUkvA",
            "url": "https://semgrep.dev/playground/r/0bToER/contrib.dlint.dlint-equivalent.insecure-xml-use",
            "version_id": "0bToER"
          }
        },
        "shortlink": "https://sg.run/5QOW",
        "source": "https://semgrep.dev/r/contrib.dlint.dlint-equivalent.insecure-xml-use",
        "source_rule_url": "https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO107.md",
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "patterns": [
            {
              "pattern": "xml.$ANYTHING"
            },
            {
              "pattern-not": "xml.sax.saxutils"
            },
            {
              "pattern-not": "xml.etree.ElementTree.Element"
            },
            {
              "pattern-not": "xml.etree.ElementTree.SubElement"
            }
          ]
        },
        {
          "pattern": "xmlrpclib.$ANYTHING"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.use-defused-xml.use-defused-xml",
      "languages": [
        "python"
      ],
      "message": "The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and \"XML bombs\" can cause denial of service.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-611: Improper Restriction of XML External Entity Reference"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A04:2017 - XML External Entities (XXE)",
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://docs.python.org/3/library/xml.html",
          "https://github.com/tiran/defusedxml",
          "https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "d8UjRx",
            "url": "https://semgrep.dev/playground/r/nWTwqD/python.lang.security.use-defused-xml.use-defused-xml",
            "version_id": "nWTwqD"
          }
        },
        "shortlink": "https://sg.run/kX47",
        "source": "https://semgrep.dev/r/python.lang.security.use-defused-xml.use-defused-xml",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern": "import xml",
      "severity": "ERROR"
    },
    {
      "id": "python.lang.security.audit.paramiko.paramiko-exec-command.paramiko-exec-command",
      "languages": [
        "python"
      ],
      "message": "Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context()' instead.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "http://docs.paramiko.org/en/stable/api/client.html#paramiko.client.SSHClient.exec_command",
          "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/plugins/injection_paramiko.py"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "d8Uj9x",
            "url": "https://semgrep.dev/playground/r/BjTGYw/python.lang.security.audit.paramiko.paramiko-exec-command.paramiko-exec-command",
            "version_id": "BjTGYw"
          }
        },
        "shortlink": "https://sg.run/kXQ7",
        "source": "https://semgrep.dev/r/python.lang.security.audit.paramiko.paramiko-exec-command.paramiko-exec-command",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/plugins/injection_paramiko.py",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "paramiko"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "$CLIENT = paramiko.client.SSHClient(...)\n...\n"
        },
        {
          "pattern": "$CLIENT.exec_command(...)"
        },
        {
          "pattern-not": "$CLIENT.exec_command(\"...\", ...)"
        }
      ],
      "severity": "ERROR"
    },
    {
      "fix-regex": {
        "regex": "verify(\\s)*=(\\s)*False",
        "replacement": "verify=True"
      },
      "id": "python.requests.security.disabled-cert-validation.disabled-cert-validation",
      "languages": [
        "python"
      ],
      "message": "Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-295: Improper Certificate Validation"
        ],
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://stackoverflow.com/questions/41740361/is-it-safe-to-disable-ssl-certificate-verification-in-pythonss-requests-lib"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "qNUoYR",
            "url": "https://semgrep.dev/playground/r/rxTbO4/python.requests.security.disabled-cert-validation.disabled-cert-validation",
            "version_id": "rxTbO4"
          }
        },
        "shortlink": "https://sg.run/AlYp",
        "source": "https://semgrep.dev/r/python.requests.security.disabled-cert-validation.disabled-cert-validation",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "requests"
        ]
      },
      "pattern-either": [
        {
          "pattern": "requests.put(..., verify=False, ...)"
        },
        {
          "pattern": "requests.patch(..., verify=False, ...)"
        },
        {
          "pattern": "requests.delete(..., verify=False, ...)"
        },
        {
          "pattern": "requests.head(..., verify=False, ...)"
        },
        {
          "pattern": "requests.options(..., verify=False, ...)"
        },
        {
          "pattern": "requests.request(..., verify=False, ...)"
        },
        {
          "pattern": "requests.get(..., verify=False, ...)"
        },
        {
          "pattern": "requests.post(..., verify=False, ...)"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-des",
      "languages": [
        "python"
      ],
      "message": "Detected DES cipher algorithm which is considered insecure. The algorithm is considered weak and has been deprecated. Use AES instead.",
      "metadata": {
        "bandit-code": "B304",
        "category": "security",
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "owasp": "A3: Sensitive Data Exposure",
        "references": [
          "https://tools.ietf.org/html/rfc5469"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "4bUzy7",
            "url": "https://semgrep.dev/playground/r/NdTe83/python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-des",
            "version_id": "NdTe83"
          }
        },
        "shortlink": "https://sg.run/705Z",
        "source": "https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-des",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84",
        "technology": [
          "pycryptodome"
        ]
      },
      "pattern-either": [
        {
          "pattern": "Cryptodome.Cipher.DES.new(...)"
        },
        {
          "pattern": "Crypto.Cipher.DES.new(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "regex": "md5",
        "replacement": "sha256"
      },
      "id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5",
      "languages": [
        "python"
      ],
      "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
      "metadata": {
        "asvs": {
          "control_id": "6.2.2 Insecure Custom Algorithm",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms",
          "section": "V6 Stored Cryptography Verification Requirements",
          "version": "4"
        },
        "bandit-code": "B303",
        "category": "security",
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "owasp": "A3: Sensitive Data Exposure",
        "references": [
          "https://tools.ietf.org/html/rfc6151",
          "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "wdUJ2Y",
            "url": "https://semgrep.dev/playground/r/nWTPy6/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5",
            "version_id": "nWTPy6"
          }
        },
        "shortlink": "https://sg.run/9odY",
        "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
        "technology": [
          "python"
        ]
      },
      "pattern": "hashlib.md5(...)",
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.deserialization.pickle.avoid-cPickle",
      "languages": [
        "python"
      ],
      "message": "Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-502: Deserialization of Untrusted Data"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A08:2017 - Insecure Deserialization",
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/pickle.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "7KUQNL",
            "url": "https://semgrep.dev/playground/r/1QTW3k/python.lang.security.deserialization.pickle.avoid-cPickle",
            "version_id": "1QTW3k"
          }
        },
        "shortlink": "https://sg.run/eLxb",
        "source": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-cPickle",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern": "cPickle.$FUNC(...)"
        },
        {
          "pattern-not": "cPickle.$FUNC(\"...\")"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.audit.weak-ssl-version.weak-ssl-version",
      "languages": [
        "python"
      ],
      "message": "An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher.",
      "metadata": {
        "asvs": {
          "control_id": "9.1.3 Weak TLS",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v91-client-communications-security-requirements",
          "section": "V9 Communications Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-326: Inadequate Encryption Strength"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://tools.ietf.org/html/rfc7568",
          "https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html",
          "https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLSv1_2"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "KxUbNG",
            "url": "https://semgrep.dev/playground/r/pZTQ9w/python.lang.security.audit.weak-ssl-version.weak-ssl-version",
            "version_id": "pZTQ9w"
          }
        },
        "shortlink": "https://sg.run/RoZO",
        "source": "https://semgrep.dev/r/python.lang.security.audit.weak-ssl-version.weak-ssl-version",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/insecure_ssl_tls.py#L30",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "pattern": "ssl.PROTOCOL_SSLv2"
        },
        {
          "pattern": "ssl.PROTOCOL_SSLv3"
        },
        {
          "pattern": "ssl.PROTOCOL_TLSv1"
        },
        {
          "pattern": "ssl.PROTOCOL_TLSv1_1"
        },
        {
          "pattern": "pyOpenSSL.SSL.SSLv2_METHOD"
        },
        {
          "pattern": "pyOpenSSL.SSL.SSLv23_METHOD"
        },
        {
          "pattern": "pyOpenSSL.SSL.SSLv3_METHOD"
        },
        {
          "pattern": "pyOpenSSL.SSL.TLSv1_METHOD"
        },
        {
          "pattern": "pyOpenSSL.SSL.TLSv1_1_METHOD"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.audit.dangerous-system-call.dangerous-system-call",
      "languages": [
        "python"
      ],
      "message": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.",
      "metadata": {
        "asvs": {
          "control_id": "5.2.4 Dyanmic Code Execution Features",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "cwe": "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "owasp": "A1: Injection",
        "semgrep.dev": {
          "rule": {
            "rule_id": "L1UyY0",
            "url": "https://semgrep.dev/playground/r/RGTE5x/python.lang.security.audit.dangerous-system-call.dangerous-system-call",
            "version_id": "RGTE5x"
          }
        },
        "shortlink": "https://sg.run/vzKA",
        "source": "https://semgrep.dev/r/python.lang.security.audit.dangerous-system-call.dangerous-system-call",
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern-not": "os.$W(\"...\", ...)"
        },
        {
          "pattern-either": [
            {
              "pattern": "os.system(...)"
            },
            {
              "pattern": "getattr(os, \"system\")(...)"
            },
            {
              "pattern": "__import__(\"os\").system(...)"
            },
            {
              "pattern": "getattr(__import__(\"os\"), \"system\")(...)"
            },
            {
              "pattern": "$X = __import__(\"os\")\n...\n$X.system(...)\n"
            },
            {
              "pattern": "$X = __import__(\"os\")\n...\ngetattr($X, \"system\")(...)\n"
            },
            {
              "pattern": "$X = getattr(os, \"system\")\n...\n$X(...)\n"
            },
            {
              "pattern": "$X = __import__(\"os\")\n...\n$Y = getattr($X, \"system\")\n...\n$Y(...)\n"
            },
            {
              "pattern": "os.popen(...)"
            },
            {
              "pattern": "os.popen2(...)"
            },
            {
              "pattern": "os.popen3(...)"
            },
            {
              "pattern": "os.popen4(...)"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.lang.security.audit.conn_recv.multiprocessing-recv",
      "languages": [
        "python"
      ],
      "message": "The Connection.recv() method automatically unpickles the data it receives, which can be a security risk unless you can trust the process which sent the message. Therefore, unless the connection object was produced using Pipe() you should only use the recv() and send() methods after performing some sort of authentication. See more dettails: https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-502: Deserialization of Untrusted Data"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A08:2017 - Insecure Deserialization",
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "nJUzeK",
            "url": "https://semgrep.dev/playground/r/BjTGEn/python.lang.security.audit.conn_recv.multiprocessing-recv",
            "version_id": "BjTGEn"
          }
        },
        "shortlink": "https://sg.run/x1lz",
        "source": "https://semgrep.dev/r/python.lang.security.audit.conn_recv.multiprocessing-recv",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "pattern": "multiprocessing.connection.Connection.recv(...)"
        },
        {
          "pattern": "multiprocessing.connection.Client.recv(...)"
        },
        {
          "pattern": "$C = multiprocessing.connection.Client(...)\n...\n$C.recv(...)\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-xor",
      "languages": [
        "python"
      ],
      "message": "Detected XOR cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.",
      "metadata": {
        "bandit-code": "B304",
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "PeUk5W",
            "url": "https://semgrep.dev/playground/r/3ZTx98/python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-xor",
            "version_id": "3ZTx98"
          }
        },
        "shortlink": "https://sg.run/L0yr",
        "source": "https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-xor",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pycryptodome"
        ]
      },
      "pattern-either": [
        {
          "pattern": "Cryptodome.Cipher.XOR.new(...)"
        },
        {
          "pattern": "Crypto.Cipher.XOR.new(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "regex": "(shell\\s*=\\s*)True",
        "replacement": "\\1False"
      },
      "id": "python.lang.security.audit.subprocess-shell-true.subprocess-shell-true",
      "languages": [
        "python"
      ],
      "message": "Found 'subprocess' function '$FUNC' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess",
          "https://docs.python.org/3/library/subprocess.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "DbUpz2",
            "url": "https://semgrep.dev/playground/r/6xT0p5/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true",
            "version_id": "6xT0p5"
          }
        },
        "shortlink": "https://sg.run/J92w",
        "source": "https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true",
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b602_subprocess_popen_with_shell_equals_true.html",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern": "subprocess.$FUNC(..., shell=True, ...)"
        },
        {
          "pattern-not": "subprocess.$FUNC(\"...\", shell=True, ...)"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.lang.security.audit.ftplib.ftplib",
      "languages": [
        "python"
      ],
      "message": "FTP does not encrypt communications by default. This can lead to sensitive data being exposed. Ensure use of FTP here does not expose sensitive data.",
      "metadata": {
        "bandit-code": "B321",
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/telnetlib.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "4bUkv7",
            "url": "https://semgrep.dev/playground/r/d6TbRK/python.lang.security.audit.ftplib.ftplib",
            "version_id": "d6TbRK"
          }
        },
        "shortlink": "https://sg.run/7oyZ",
        "source": "https://semgrep.dev/r/python.lang.security.audit.ftplib.ftplib",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L265",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "ftplib"
        ]
      },
      "pattern": "ftplib.$ANYTHING(...)",
      "severity": "WARNING"
    },
    {
      "id": "python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-md5",
      "languages": [
        "python"
      ],
      "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
      "metadata": {
        "category": "security",
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "owasp": "A3: Sensitive Data Exposure",
        "references": [
          "https://tools.ietf.org/html/rfc6151",
          "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "GdU0LZ",
            "url": "https://semgrep.dev/playground/r/O9TveG/python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-md5",
            "version_id": "O9TveG"
          }
        },
        "shortlink": "https://sg.run/Q8g4",
        "source": "https://semgrep.dev/r/python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-md5",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
        "technology": [
          "pycryptodome"
        ]
      },
      "pattern-either": [
        {
          "pattern": "Crypto.Hash.MD5.new(...)"
        },
        {
          "pattern": "Cryptodome.Hash.MD5.new (...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "SHA256\n",
      "id": "python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
      "languages": [
        "python"
      ],
      "message": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
      "metadata": {
        "bandit-code": "B303",
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html",
          "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability",
          "http://2012.sharcs.org/slides/stevens.pdf",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "0oU5dN",
            "url": "https://semgrep.dev/playground/r/DkToXW/python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
            "version_id": "DkToXW"
          }
        },
        "shortlink": "https://sg.run/J9Qy",
        "source": "https://semgrep.dev/r/python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "cryptography"
        ]
      },
      "patterns": [
        {
          "pattern": "cryptography.hazmat.primitives.hashes.$SHA(...)"
        },
        {
          "metavariable-pattern": {
            "metavariable": "$SHA",
            "pattern": "SHA1\n"
          }
        },
        {
          "focus-metavariable": "$SHA"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.audit.httpsconnection-detected.httpsconnection-detected",
      "languages": [
        "python"
      ],
      "message": "The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default. See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-295: Improper Certificate Validation"
        ],
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "JDUy7y",
            "url": "https://semgrep.dev/playground/r/nWTwep/python.lang.security.audit.httpsconnection-detected.httpsconnection-detected",
            "version_id": "nWTwep"
          }
        },
        "shortlink": "https://sg.run/8yby",
        "source": "https://semgrep.dev/r/python.lang.security.audit.httpsconnection-detected.httpsconnection-detected",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "pattern": "httplib.HTTPSConnection(...)"
        },
        {
          "pattern": "http.client.HTTPSConnection(...)"
        },
        {
          "pattern": "six.moves.http_client.HTTPSConnection(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces",
      "languages": [
        "python"
      ],
      "message": "Running `socket.bind` to 0.0.0.0, ::, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"
        ],
        "cwe2021-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "OrU3og",
            "url": "https://semgrep.dev/playground/r/5PTY5G/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces",
            "version_id": "5PTY5G"
          }
        },
        "shortlink": "https://sg.run/rdln",
        "source": "https://semgrep.dev/r/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "pattern": "$S = socket.socket(...)\n...\n$S.bind((\"0.0.0.0\", ...))\n"
        },
        {
          "pattern": "$S = socket.socket(...)\n...\n$S.bind((\"::\", ...))\n"
        },
        {
          "pattern": "$S = socket.socket(...)\n...\n$S.bind((\"\", ...))\n"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "python.lang.security.audit.mako-templates-detected.mako-templates-detected",
      "languages": [
        "python"
      ],
      "message": "Mako templates do not provide a global HTML escaping mechanism. This means you must escape all sensitive data in your templates using '| u' for URL escaping or '| h' for HTML escaping. If you are using Mako to serve web content, consider using a system such as Jinja2 which enables global escaping.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.makotemplates.org/en/latest/syntax.html#expression-escaping",
          "https://jinja.palletsprojects.com/en/2.11.x/intro/#"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "GdU79Z",
            "url": "https://semgrep.dev/playground/r/l4TNPG/python.lang.security.audit.mako-templates-detected.mako-templates-detected",
            "version_id": "l4TNPG"
          }
        },
        "shortlink": "https://sg.run/Q5v4",
        "source": "https://semgrep.dev/r/python.lang.security.audit.mako-templates-detected.mako-templates-detected",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/mako_templates.py",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "mako"
        ]
      },
      "pattern": "mako.template.Template(...)",
      "severity": "INFO"
    },
    {
      "fix-regex": {
        "regex": "MD5",
        "replacement": "SHA256"
      },
      "id": "python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-md5",
      "languages": [
        "python"
      ],
      "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
      "metadata": {
        "bandit-code": "B303",
        "category": "security",
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "owasp": "A3: Sensitive Data Exposure",
        "references": [
          "https://tools.ietf.org/html/rfc6151",
          "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "WAUo19",
            "url": "https://semgrep.dev/playground/r/w8TnA7/python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-md5",
            "version_id": "w8TnA7"
          }
        },
        "shortlink": "https://sg.run/PJQz",
        "source": "https://semgrep.dev/r/python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-md5",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
        "technology": [
          "cryptography"
        ]
      },
      "pattern": "cryptography.hazmat.primitives.hashes.MD5(...)",
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "languages": [
        "python"
      ],
      "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "3qUP9k",
            "url": "https://semgrep.dev/playground/r/vdT3k4/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
            "version_id": "vdT3k4"
          }
        },
        "shortlink": "https://sg.run/EkWw",
        "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "pattern": "$DB.execute(\"...\" % ...)"
        },
        {
          "pattern": "$DB.execute(\"...\".format(...))"
        },
        {
          "pattern": "$DB.execute(f\"...\")"
        },
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$SQL = \"...\" % ...\n...\n"
                },
                {
                  "pattern-inside": "$SQL = \"...\".format(...)\n...\n"
                },
                {
                  "pattern-inside": "$SQL = f\"...{$X}...\"\n...\n"
                }
              ]
            },
            {
              "pattern": "$DB.execute($SQL)"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-md4",
      "languages": [
        "python"
      ],
      "message": "Detected MD4 hash algorithm which is considered insecure. This algorithm has many known vulnerabilities and has been deprecated. Use SHA256 or SHA3 instead.",
      "metadata": {
        "category": "security",
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "owasp": "A3: Sensitive Data Exposure",
        "references": [
          "https://tools.ietf.org/html/rfc6150",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "5rU4J4",
            "url": "https://semgrep.dev/playground/r/xyTdXn/python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-md4",
            "version_id": "xyTdXn"
          }
        },
        "shortlink": "https://sg.run/gJlJ",
        "source": "https://semgrep.dev/r/python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-md4",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
        "technology": [
          "pycryptodome"
        ]
      },
      "pattern-either": [
        {
          "pattern": "Crypto.Hash.MD4.new(...)"
        },
        {
          "pattern": "Cryptodome.Hash.MD4.new (...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-rc2",
      "languages": [
        "python"
      ],
      "message": "Detected RC2 cipher algorithm which is considered insecure. The algorithm has known vulnerabilities and is difficult to use securely. Use AES instead.",
      "metadata": {
        "bandit-code": "B304",
        "category": "security",
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "owasp": "A3: Sensitive Data Exposure",
        "references": [
          "https://security.stackexchange.com/questions/93924/is-rc2-cbc-at-all-secure",
          "https://sweet32.info/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "gxU199",
            "url": "https://semgrep.dev/playground/r/yeTDjL/python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-rc2",
            "version_id": "yeTDjL"
          }
        },
        "shortlink": "https://sg.run/ZvDD",
        "source": "https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-rc2",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84",
        "technology": [
          "pycryptodome"
        ]
      },
      "pattern-either": [
        {
          "pattern": "Cryptodome.Cipher.ARC2.new(...)"
        },
        {
          "pattern": "Crypto.Cipher.ARC2.new"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-blowfish",
      "languages": [
        "python"
      ],
      "message": "Detected Blowfish cipher algorithm which is considered insecure. The algorithm has many known vulnerabilities. Use AES instead.",
      "metadata": {
        "bandit-code": "B304",
        "category": "security",
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "owasp": "A3: Sensitive Data Exposure",
        "references": [
          "https://sweet32.info/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "AbUz4Z",
            "url": "https://semgrep.dev/playground/r/qkTp3w/python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-blowfish",
            "version_id": "qkTp3w"
          }
        },
        "shortlink": "https://sg.run/Q5QZ",
        "source": "https://semgrep.dev/r/python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-blowfish",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L96",
        "technology": [
          "cryptography"
        ]
      },
      "pattern": "cryptography.hazmat.primitives.ciphers.algorithms.Blowfish(...)",
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated",
      "languages": [
        "python"
      ],
      "message": "'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use that to wrap a socket.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-326: Inadequate Encryption Strength"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/ssl.html#ssl.wrap_socket",
          "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_socket"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "BYUN2e",
            "url": "https://semgrep.dev/playground/r/YDT8XN/python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated",
            "version_id": "YDT8XN"
          }
        },
        "shortlink": "https://sg.run/PJOY",
        "source": "https://semgrep.dev/r/python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern": "ssl.wrap_socket(...)",
      "severity": "WARNING"
    },
    {
      "id": "python.django.security.audit.raw-query.avoid-raw-sql",
      "languages": [
        "python"
      ],
      "message": "Detected the use of 'RawSQL' or 'raw' indicating the execution of a non-parameterized SQL query. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use Django ORM and parameterized queries before raw SQL. An example of using the Django ORM is: `People.objects.get(name='Bob')`",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.0/ref/models/expressions/#raw-sql-expressions",
          "https://blog.r2c.dev/2020/preventing-sql-injection-a-django-authors-perspective/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "EwU2JA",
            "url": "https://semgrep.dev/playground/r/rxTXz1/python.django.security.audit.raw-query.avoid-raw-sql",
            "version_id": "rxTXz1"
          }
        },
        "shortlink": "https://sg.run/weDA",
        "source": "https://semgrep.dev/r/python.django.security.audit.raw-query.avoid-raw-sql",
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b611_django_rawsql_used.html",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "$MODEL.objects.raw($QUERY, ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(...)"
            }
          ]
        },
        {
          "pattern-not": "$MODEL.objects.raw(\"...\")"
        },
        {
          "pattern-not": "django.db.models.expressions.RawSQL(\"...\")"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe",
      "languages": [
        "python"
      ],
      "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe",
          "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "eqU8Wr",
            "url": "https://semgrep.dev/playground/r/DkTeDR/python.django.security.audit.avoid-mark-safe.avoid-mark-safe",
            "version_id": "DkTeDR"
          }
        },
        "shortlink": "https://sg.run/yd0P",
        "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe",
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-not-inside": "django.utils.html.format_html(...)"
        },
        {
          "pattern-not": "django.utils.safestring.mark_safe(\"...\")"
        },
        {
          "pattern": "django.utils.safestring.mark_safe(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-rc4",
      "languages": [
        "python"
      ],
      "message": "Detected RC4 cipher algorithm which is considered insecure. The algorithm has many known vulnerabilities. Use AES instead.",
      "metadata": {
        "bandit-code": "B304",
        "category": "security",
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "owasp": "A3: Sensitive Data Exposure",
        "references": [
          "https://crypto.stackexchange.com/questions/853/google-is-using-rc4-but-isnt-rc4-considered-unsafe",
          "https://sweet32.info/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "ReUgzY",
            "url": "https://semgrep.dev/playground/r/K3Tw1q/python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-rc4",
            "version_id": "K3Tw1q"
          }
        },
        "shortlink": "https://sg.run/gL40",
        "source": "https://semgrep.dev/r/python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-rc4",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L94",
        "technology": [
          "cryptography"
        ]
      },
      "pattern": "cryptography.hazmat.primitives.ciphers.algorithms.ARC4(...)",
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.audit.telnetlib.telnetlib",
      "languages": [
        "python"
      ],
      "message": "Telnet does not encrypt communications. Use SSH instead.",
      "metadata": {
        "bandit-code": "B312",
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/telnetlib.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "0oU5Wl",
            "url": "https://semgrep.dev/playground/r/zyTePy/python.lang.security.audit.telnetlib.telnetlib",
            "version_id": "zyTePy"
          }
        },
        "shortlink": "https://sg.run/Gelp",
        "source": "https://semgrep.dev/r/python.lang.security.audit.telnetlib.telnetlib",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L208",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern": "telnetlib.$ANYTHING(...)",
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.deserialization.pickle.avoid-dill",
      "languages": [
        "python"
      ],
      "message": "Avoid using `dill`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-502: Deserialization of Untrusted Data"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A08:2017 - Insecure Deserialization",
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/pickle.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "L1Uy60",
            "url": "https://semgrep.dev/playground/r/9lTNqn/python.lang.security.deserialization.pickle.avoid-dill",
            "version_id": "9lTNqn"
          }
        },
        "shortlink": "https://sg.run/vzjA",
        "source": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-dill",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern": "dill.$FUNC(...)"
        },
        {
          "pattern-not": "dill.$FUNC(\"...\")"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-rc4",
      "languages": [
        "python"
      ],
      "message": "Detected RC4 cipher algorithm which is considered insecure. The algorithm has many known vulnerabilities. Use AES instead.",
      "metadata": {
        "bandit-code": "B304",
        "category": "security",
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "owasp": "A3: Sensitive Data Exposure",
        "references": [
          "https://crypto.stackexchange.com/questions/853/google-is-using-rc4-but-isnt-rc4-considered-unsafe",
          "https://sweet32.info/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "QrU6vv",
            "url": "https://semgrep.dev/playground/r/rxTj3P/python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-rc4",
            "version_id": "rxTj3P"
          }
        },
        "shortlink": "https://sg.run/nqXX",
        "source": "https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-rc4",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84",
        "technology": [
          "pycryptodome"
        ]
      },
      "pattern-either": [
        {
          "pattern": "Cryptodome.Cipher.ARC4.new(...)"
        },
        {
          "pattern": "Crypto.Cipher.ARC4.new(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.audit.eval-detected.eval-detected",
      "languages": [
        "python"
      ],
      "message": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",
      "metadata": {
        "asvs": {
          "control_id": "5.2.4 Dyanmic Code Execution Features",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "gxU149",
            "url": "https://semgrep.dev/playground/r/O9TZ0D/python.lang.security.audit.eval-detected.eval-detected",
            "version_id": "O9TZ0D"
          }
        },
        "shortlink": "https://sg.run/ZvrD",
        "source": "https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected",
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b307-eval",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern-not": "eval(\"...\")"
        },
        {
          "pattern": "eval(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.audit.hardcoded-password-default-argument.hardcoded-password-default-argument",
      "languages": [
        "python"
      ],
      "message": "Hardcoded password is used as a default argument to '$FUNC'. This could be dangerous if a real password is not supplied.",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "PeUZAW",
            "url": "https://semgrep.dev/playground/r/ZRTyEe/python.lang.security.audit.hardcoded-password-default-argument.hardcoded-password-default-argument",
            "version_id": "ZRTyEe"
          }
        },
        "shortlink": "https://sg.run/Lw9r",
        "source": "https://semgrep.dev/r/python.lang.security.audit.hardcoded-password-default-argument.hardcoded-password-default-argument",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern": "def $FUNC(..., password=\"...\", ...):\n  ...\n",
      "severity": "WARNING"
    },
    {
      "id": "python.cryptography.security.insecure-cipher-mode-ecb.insecure-cipher-mode-ecb",
      "languages": [
        "python"
      ],
      "message": "Detected ECB cipher mode which is considered insecure. The algorithm can potentially leak information about the plaintext. Use CBC mode instead.",
      "metadata": {
        "bandit-code": "B305",
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://crypto.stackexchange.com/questions/20941/why-shouldnt-i-use-ecb-encryption"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "DbUp5g",
            "url": "https://semgrep.dev/playground/r/3ZTxvB/python.cryptography.security.insecure-cipher-mode-ecb.insecure-cipher-mode-ecb",
            "version_id": "3ZTxvB"
          }
        },
        "shortlink": "https://sg.run/4xr5",
        "source": "https://semgrep.dev/r/python.cryptography.security.insecure-cipher-mode-ecb.insecure-cipher-mode-ecb",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L101",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "cryptography"
        ]
      },
      "pattern": "cryptography.hazmat.primitives.ciphers.modes.ECB(...)",
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.audit.marshal.marshal-usage",
      "languages": [
        "python"
      ],
      "message": "The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security",
      "metadata": {
        "category": "security",
        "confidence": "LOW",
        "cwe": [
          "CWE-502: Deserialization of Untrusted Data"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A08:2017 - Insecure Deserialization",
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/marshal.html?highlight=security"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "ReUg13",
            "url": "https://semgrep.dev/playground/r/YDT8P9/python.lang.security.audit.marshal.marshal-usage",
            "version_id": "YDT8P9"
          }
        },
        "shortlink": "https://sg.run/3xor",
        "source": "https://semgrep.dev/r/python.lang.security.audit.marshal.marshal-usage",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "pattern": "marshal.dump(...)"
        },
        {
          "pattern": "marshal.dumps(...)"
        },
        {
          "pattern": "marshal.load(...)"
        },
        {
          "pattern": "marshal.loads(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.deserialization.avoid-unsafe-ruamel.avoid-unsafe-ruamel",
      "languages": [
        "python"
      ],
      "message": "Avoid using unsafe `ruamel.yaml.YAML()`. `ruamel.yaml.YAML` can create arbitrary Python objects. A malicious actor could exploit this to run arbitrary code. Use `YAML(typ='rt')` or `YAML(typ='safe')` instead.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-502: Deserialization of Untrusted Data"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A08:2017 - Insecure Deserialization",
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://yaml.readthedocs.io/en/latest/basicuse.html?highlight=typ"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "nJUzqK",
            "url": "https://semgrep.dev/playground/r/w8T0QN/python.lang.security.deserialization.avoid-unsafe-ruamel.avoid-unsafe-ruamel",
            "version_id": "w8T0QN"
          }
        },
        "shortlink": "https://sg.run/x1rz",
        "source": "https://semgrep.dev/r/python.lang.security.deserialization.avoid-unsafe-ruamel.avoid-unsafe-ruamel",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "ruamel.yaml"
        ]
      },
      "pattern-either": [
        {
          "pattern": "ruamel.yaml.YAML(..., typ='unsafe', ...)"
        },
        {
          "pattern": "ruamel.yaml.YAML(..., typ='base', ...)"
        }
      ],
      "severity": "ERROR"
    },
    {
      "fix-regex": {
        "regex": "_create_unverified_context",
        "replacement": "create_default_context"
      },
      "id": "python.lang.security.unverified-ssl-context.unverified-ssl-context",
      "languages": [
        "python"
      ],
      "message": "Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context' instead.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-295: Improper Certificate Validation"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/ssl.html#ssl-security",
          "https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "v8UnkQ",
            "url": "https://semgrep.dev/playground/r/bZTJeE/python.lang.security.unverified-ssl-context.unverified-ssl-context",
            "version_id": "bZTJeE"
          }
        },
        "shortlink": "https://sg.run/N4lp",
        "source": "https://semgrep.dev/r/python.lang.security.unverified-ssl-context.unverified-ssl-context",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "ssl._create_unverified_context(...)"
            },
            {
              "pattern": "ssl._create_default_https_context = ssl._create_unverified_context"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.lang.security.insecure-hash-function.insecure-hash-function",
      "languages": [
        "python"
      ],
      "message": "Detected use of an insecure MD4 or MD5 hash function. These functions have known vulnerabilities and are considered deprecated. Consider using 'SHA256' or a similar function instead.",
      "metadata": {
        "asvs": {
          "control_id": "6.2.2 Insecure Custom Algorithm",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms",
          "section": "V6 Stored Cryptography Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://tools.ietf.org/html/rfc6151",
          "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "OrU30g",
            "url": "https://semgrep.dev/playground/r/vdT3WD/python.lang.security.insecure-hash-function.insecure-hash-function",
            "version_id": "vdT3WD"
          }
        },
        "shortlink": "https://sg.run/rdBn",
        "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-function.insecure-hash-function",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/hashlib_new_insecure_functions.py",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "pattern": "hashlib.new(\"=~/[M|m][D|d][4|5]/\", ...)"
        },
        {
          "pattern": "hashlib.new(..., name=\"=~/[M|m][D|d][4|5]/\", ...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.flask.security.audit.debug-enabled.debug-enabled",
      "languages": [
        "python"
      ],
      "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-489: Active Debug Code"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": "A06:2017 - Security Misconfiguration",
        "references": [
          "https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "gxU1bd",
            "url": "https://semgrep.dev/playground/r/qkTPK2/python.flask.security.audit.debug-enabled.debug-enabled",
            "version_id": "qkTPK2"
          }
        },
        "shortlink": "https://sg.run/dKrd",
        "source": "https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "flask"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "import flask\n...\n"
        },
        {
          "pattern": "$APP.run(..., debug=True, ...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1",
      "languages": [
        "python"
      ],
      "message": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html",
          "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability",
          "http://2012.sharcs.org/slides/stevens.pdf",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "ReUPO3",
            "url": "https://semgrep.dev/playground/r/5PTYnG/python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1",
            "version_id": "5PTYnG"
          }
        },
        "shortlink": "https://sg.run/3ALr",
        "source": "https://semgrep.dev/r/python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pycryptodome"
        ]
      },
      "pattern-either": [
        {
          "pattern": "Crypto.Hash.SHA.new(...)"
        },
        {
          "pattern": "Cryptodome.Hash.SHA.new (...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "contrib.dlint.dlint-equivalent.insecure-simplexmlrpcserver-use",
      "languages": [
        "python"
      ],
      "message": "The Python 'xmlrpc' module used with 'allow_dotted_names' is not secure against maliciously constructed input",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere"
        ],
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "owasp": [
          "A06:2017 - Security Misconfiguration",
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO124.md"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "x8UnyR",
            "url": "https://semgrep.dev/playground/r/0bToEd/contrib.dlint.dlint-equivalent.insecure-simplexmlrpcserver-use",
            "version_id": "0bToEd"
          }
        },
        "shortlink": "https://sg.run/oxp1",
        "source": "https://semgrep.dev/r/contrib.dlint.dlint-equivalent.insecure-simplexmlrpcserver-use",
        "source_rule_url": "https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO124.md",
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "pattern": "xmlrpc.server.register_instance(..., allow_dotted_names=True, ...)"
        },
        {
          "pattern": "SimpleXMLRPCServer.register_instance(..., allow_dotted_names=True, ...)"
        }
      ],
      "severity": "WARNING"
    }
  ]
}