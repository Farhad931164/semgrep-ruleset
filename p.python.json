{
  "rules": [
    {
      "fix-regex": {
        "count": 1,
        "regex": "unsafe_load",
        "replacement": "safe_load"
      },
      "id": "python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load",
      "languages": [
        "python"
      ],
      "message": "Detected a possible YAML deserialization vulnerability. `yaml.unsafe_load`, `yaml.Loader`, `yaml.CLoader`, and `yaml.UnsafeLoader` are all known to be unsafe methods of deserializing YAML. An attacker with control over the YAML input could create special YAML input that allows the attacker to run arbitrary Python code. This would allow the attacker to steal files, download and install malware, or otherwise take over the machine. Use `yaml.safe_load` or `yaml.SafeLoader` instead.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-502: Deserialization of Untrusted Data"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A08:2017 - Insecure Deserialization",
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation",
          "https://nvd.nist.gov/vuln/detail/CVE-2017-18342"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "ZqU5jZ",
            "url": "https://semgrep.dev/playground/r/kbTZ4W/python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load",
            "version_id": "kbTZ4W"
          }
        },
        "shortlink": "https://sg.run/we9Y",
        "source": "https://semgrep.dev/r/python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "pyyaml"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "import yaml\n...\n"
        },
        {
          "pattern-not-inside": "$YAML = ruamel.yaml.YAML(...)\n...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "yaml.unsafe_load(...)"
            },
            {
              "pattern": "yaml.load(..., Loader=yaml.Loader, ...)"
            },
            {
              "pattern": "yaml.load(..., Loader=yaml.UnsafeLoader, ...)"
            },
            {
              "pattern": "yaml.load(..., Loader=yaml.CLoader, ...)"
            },
            {
              "pattern": "yaml.load_all(..., Loader=yaml.Loader, ...)"
            },
            {
              "pattern": "yaml.load_all(..., Loader=yaml.UnsafeLoader, ...)"
            },
            {
              "pattern": "yaml.load_all(..., Loader=yaml.CLoader, ...)"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.lang.security.deserialization.pickle.avoid-shelve",
      "languages": [
        "python"
      ],
      "message": "Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-502: Deserialization of Untrusted Data"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A08:2017 - Insecure Deserialization",
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/pickle.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "8GUje2",
            "url": "https://semgrep.dev/playground/r/yeTbGQ/python.lang.security.deserialization.pickle.avoid-shelve",
            "version_id": "yeTbGQ"
          }
        },
        "shortlink": "https://sg.run/dKkZ",
        "source": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern": "shelve.$FUNC(...)",
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.audit.network.http-not-https-connection.http-not-https-connection",
      "languages": [
        "python"
      ],
      "message": "Detected HTTPConnectionPool. This will transmit data in cleartext. It is recommended to use HTTPSConnectionPool instead for to encrypt communications.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://urllib3.readthedocs.io/en/1.2.1/pools.html#urllib3.connectionpool.HTTPSConnectionPool"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "v8UnWQ",
            "url": "https://semgrep.dev/playground/r/RGTwvl/python.lang.security.audit.network.http-not-https-connection.http-not-https-connection",
            "version_id": "RGTwvl"
          }
        },
        "shortlink": "https://sg.run/N4Np",
        "source": "https://semgrep.dev/r/python.lang.security.audit.network.http-not-https-connection.http-not-https-connection",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "pattern": "urllib3.HTTPConnectionPool(...)"
        },
        {
          "pattern": "urllib3.connectionpool.HTTPConnectionPool(...)"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces",
      "languages": [
        "python"
      ],
      "message": "Running `socket.bind` to 0.0.0.0, ::, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"
        ],
        "cwe2021-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "OrU3og",
            "url": "https://semgrep.dev/playground/r/5PTY5G/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces",
            "version_id": "5PTY5G"
          }
        },
        "shortlink": "https://sg.run/rdln",
        "source": "https://semgrep.dev/r/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "pattern": "$S = socket.socket(...)\n...\n$S.bind((\"0.0.0.0\", ...))\n"
        },
        {
          "pattern": "$S = socket.socket(...)\n...\n$S.bind((\"::\", ...))\n"
        },
        {
          "pattern": "$S = socket.socket(...)\n...\n$S.bind((\"\", ...))\n"
        }
      ],
      "severity": "INFO"
    },
    {
      "id": "python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure",
      "languages": [
        "python"
      ],
      "message": "Detected a python logger call with a potential hardcoded secret $FORMAT_STRING being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-532: Insertion of Sensitive Information into Log File"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A09:2021 - Security Logging and Monitoring Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "x8UnJk",
            "url": "https://semgrep.dev/playground/r/w8TvNW/python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure",
            "version_id": "w8TvNW"
          }
        },
        "shortlink": "https://sg.run/ydNx",
        "source": "https://semgrep.dev/r/python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern": "$LOGGER_OBJ.$LOGGER_CALL($FORMAT_STRING,...)\n"
        },
        {
          "metavariable-regex": {
            "metavariable": "$LOGGER_OBJ",
            "regex": "(?i)(_logger|logger|self.logger|log)"
          }
        },
        {
          "metavariable-regex": {
            "metavariable": "$LOGGER_CALL",
            "regex": "(debug|info|warn|warning|error|exception|critical)"
          }
        },
        {
          "metavariable-regex": {
            "metavariable": "$FORMAT_STRING",
            "regex": "(?i).*(api.key|secret|credential|token|password).*\\%s.*"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.flask.security.injection.path-traversal-open.path-traversal-open",
      "languages": [
        "python"
      ],
      "message": "Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "DbUpOQ",
            "url": "https://semgrep.dev/playground/r/rxT8xO/python.flask.security.injection.path-traversal-open.path-traversal-open",
            "version_id": "rxT8xO"
          }
        },
        "shortlink": "https://sg.run/PJRW",
        "source": "https://semgrep.dev/r/python.flask.security.injection.path-traversal-open.path-traversal-open",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "flask"
        ]
      },
      "pattern-either": [
        {
          "patterns": [
            {
              "pattern": "open(...)"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n  open(..., <... $ROUTEVAR ...>, ...)\n"
                },
                {
                  "pattern-inside": "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n  with open(..., <... $ROUTEVAR ...>, ...) as $FD:\n    ...\n"
                },
                {
                  "pattern-inside": "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n  $INTERM = <... $ROUTEVAR ...>\n  ...\n  open(..., <... $INTERM ...>, ...)\n"
                }
              ]
            }
          ]
        },
        {
          "pattern": "open(..., <... flask.request.$W.get(...) ...>, ...)"
        },
        {
          "pattern": "open(..., <... flask.request.$W[...] ...>, ...)"
        },
        {
          "pattern": "open(..., <... flask.request.$W(...) ...>, ...)"
        },
        {
          "pattern": "open(..., <... flask.request.$W ...>, ...)"
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W.get(...) ...>\n...\nopen(<... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "open(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W[...] ...>\n...\nopen(<... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "open(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W(...) ...>\n...\nopen(<... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "open(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W ...>\n...\nopen(<... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "open(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W.get(...) ...>\n...\nwith open(<... $INTERM ...>, ...) as $F:\n  ...\n"
            },
            {
              "pattern": "open(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W[...] ...>\n...\nwith open(<... $INTERM ...>, ...) as $F:\n  ...\n"
            },
            {
              "pattern": "open(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W(...) ...>\n...\nwith open(<... $INTERM ...>, ...) as $F:\n  ...\n"
            },
            {
              "pattern": "open(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W ...>\n...\nwith open(<... $INTERM ...>, ...) as $F:\n  ...\n"
            },
            {
              "pattern": "open(...)"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "fix": "$...PARAMS, httponly=True\n",
      "id": "python.pyramid.audit.authtkt-cookie-httponly-unsafe-default.pyramid-authtkt-cookie-httponly-unsafe-default",
      "languages": [
        "python"
      ],
      "message": "Found a Pyramid Authentication Ticket cookie without the httponly option correctly set. Pyramid cookies should be handled securely by setting httponly=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"
        ],
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "bwUXKB",
            "url": "https://semgrep.dev/playground/r/rxTglX/python.pyramid.audit.authtkt-cookie-httponly-unsafe-default.pyramid-authtkt-cookie-httponly-unsafe-default",
            "version_id": "rxTglX"
          }
        },
        "shortlink": "https://sg.run/EprB",
        "source": "https://semgrep.dev/r/python.pyramid.audit.authtkt-cookie-httponly-unsafe-default.pyramid-authtkt-cookie-httponly-unsafe-default",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern": "pyramid.authentication.$FUNC($...PARAMS)"
        },
        {
          "metavariable-pattern": {
            "metavariable": "$FUNC",
            "pattern-either": [
              {
                "pattern": "AuthTktCookieHelper"
              },
              {
                "pattern": "AuthTktAuthenticationPolicy"
              }
            ]
          }
        },
        {
          "pattern-not": "pyramid.authentication.$FUNC(..., httponly=$HTTPONLY, ...)"
        },
        {
          "pattern-not": "pyramid.authentication.$FUNC(..., **$PARAMS, ...)"
        },
        {
          "focus-metavariable": "$...PARAMS"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.flask.security.injection.nan-injection.nan-injection",
      "languages": [
        "python"
      ],
      "message": "Found user input going directly into typecast for bool(), float(), or complex(). This allows  an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-704: Incorrect Type Conversion or Cast"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "references": [
          "https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868",
          "https://blog.bitdiscovery.com/2021/12/python-nan-injection/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "WAUdj7",
            "url": "https://semgrep.dev/playground/r/9lTnjK/python.flask.security.injection.nan-injection.nan-injection",
            "version_id": "9lTnjK"
          }
        },
        "shortlink": "https://sg.run/e598",
        "source": "https://semgrep.dev/r/python.flask.security.injection.nan-injection.nan-injection",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "flask"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "not_conflicting": true,
          "pattern": "$ANYTHING(...)"
        }
      ],
      "pattern-sinks": [
        {
          "pattern-either": [
            {
              "pattern": "float(...)"
            },
            {
              "pattern": "bool(...)"
            },
            {
              "pattern": "complex(...)"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "pattern-either": [
            {
              "pattern": "flask.request.$SOMETHING.get(...)"
            },
            {
              "pattern": "flask.request.$SOMETHING[...]"
            },
            {
              "patterns": [
                {
                  "pattern-inside": "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
                },
                {
                  "pattern": "$ROUTEVAR"
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.lang.security.dangerous-os-exec.dangerous-os-exec",
      "languages": [
        "python"
      ],
      "message": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "qNUR13",
            "url": "https://semgrep.dev/playground/r/jQT9Or/python.lang.security.dangerous-os-exec.dangerous-os-exec",
            "version_id": "jQT9Or"
          }
        },
        "shortlink": "https://sg.run/yL9x",
        "source": "https://semgrep.dev/r/python.lang.security.dangerous-os-exec.dangerous-os-exec",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-not": "os.$METHOD(\"...\", ...)"
                    },
                    {
                      "pattern": "os.$METHOD(...)"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(execl|execle|execlp|execlpe|execv|execve|execvp|execvpe)"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "os.$METHOD(\"...\", [$PATH,\"...\",\"...\",...],...)"
                    },
                    {
                      "pattern-inside": "os.$METHOD($BASH,[$PATH,\"-c\",$CMD,...],...)"
                    },
                    {
                      "pattern": "$CMD"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(execv|execve|execvp|execvpe)"
                      }
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$BASH",
                        "regex": "(.*)(sh|bash|ksh|csh|tcsh|zsh)"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "os.$METHOD(\"...\", $PATH, \"...\", \"...\",...)"
                    },
                    {
                      "pattern-inside": "os.$METHOD($BASH, $PATH, \"-c\", $CMD,...)"
                    },
                    {
                      "pattern": "$CMD"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(execl|execle|execlp|execlpe)"
                      }
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$BASH",
                        "regex": "(.*)(sh|bash|ksh|csh|tcsh|zsh)"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "flask.request.form.get(...)"
                        },
                        {
                          "pattern": "flask.request.form[...]"
                        },
                        {
                          "pattern": "flask.request.args.get(...)"
                        },
                        {
                          "pattern": "flask.request.args[...]"
                        },
                        {
                          "pattern": "flask.request.values.get(...)"
                        },
                        {
                          "pattern": "flask.request.values[...]"
                        },
                        {
                          "pattern": "flask.request.cookies.get(...)"
                        },
                        {
                          "pattern": "flask.request.cookies[...]"
                        },
                        {
                          "pattern": "flask.request.stream"
                        },
                        {
                          "pattern": "flask.request.headers.get(...)"
                        },
                        {
                          "pattern": "flask.request.headers[...]"
                        },
                        {
                          "pattern": "flask.request.data"
                        },
                        {
                          "pattern": "flask.request.full_path"
                        },
                        {
                          "pattern": "flask.request.url"
                        },
                        {
                          "pattern": "flask.request.json"
                        },
                        {
                          "pattern": "flask.request.get_json()"
                        },
                        {
                          "pattern": "flask.request.view_args.get(...)"
                        },
                        {
                          "pattern": "flask.request.view_args[...]"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
                            },
                            {
                              "pattern": "$ROUTEVAR"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "def $FUNC(request, ...):\n  ...\n"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "request.$PROPERTY.get(...)"
                        },
                        {
                          "pattern": "request.$PROPERTY[...]"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "@rest_framework.decorators.api_view(...)\ndef $FUNC($REQ, ...):\n  ...\n"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.views.APIView, ...):\n  ...\n"
                                },
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.generics.GenericAPIView, ...):\n  ...                              \n"
                                }
                              ]
                            },
                            {
                              "pattern-inside": "def $METHOD(self, $REQ, ...):\n  ...\n"
                            },
                            {
                              "metavariable-regex": {
                                "metavariable": "$METHOD",
                                "regex": "(get|post|put|patch|delete|head)"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "$REQ.POST.get(...)"
                        },
                        {
                          "pattern": "$REQ.POST[...]"
                        },
                        {
                          "pattern": "$REQ.FILES.get(...)"
                        },
                        {
                          "pattern": "$REQ.FILES[...]"
                        },
                        {
                          "pattern": "$REQ.DATA.get(...)"
                        },
                        {
                          "pattern": "$REQ.DATA[...]"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS.get(...)"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS[...]"
                        },
                        {
                          "pattern": "$REQ.data.get(...)"
                        },
                        {
                          "pattern": "$REQ.data[...]"
                        },
                        {
                          "pattern": "$REQ.query_params.get(...)"
                        },
                        {
                          "pattern": "$REQ.query_params[...]"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.stream"
                        },
                        {
                          "pattern": "$REQ.stream"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.StreamRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.DatagramRequestHandler, ...):\n  ...\n"
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "self.requestline"
                        },
                        {
                          "pattern": "self.path"
                        },
                        {
                          "pattern": "self.headers[...]"
                        },
                        {
                          "pattern": "self.headers.get(...)"
                        },
                        {
                          "pattern": "self.rfile"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "@pyramid.view.view_config( ... )\ndef $VIEW($REQ):\n  ...\n"
                    },
                    {
                      "pattern": "$REQ.$ANYTHING"
                    },
                    {
                      "pattern-not": "$REQ.dbsession"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.django.security.injection.command.subprocess-injection.subprocess-injection",
      "languages": [
        "python"
      ],
      "message": "Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "EwUepx",
            "url": "https://semgrep.dev/playground/r/gET5bA/python.django.security.injection.command.subprocess-injection.subprocess-injection",
            "version_id": "gET5bA"
          }
        },
        "shortlink": "https://sg.run/49BE",
        "source": "https://semgrep.dev/r/python.django.security.injection.command.subprocess-injection.subprocess-injection",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "flask"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sanitizers": [
        {
          "patterns": [
            {
              "pattern": "$DICT[$KEY]"
            },
            {
              "focus-metavariable": "$KEY"
            }
          ]
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern": "subprocess.$FUNC(...)"
                    },
                    {
                      "pattern-not": "subprocess.$FUNC(\"...\", ...)"
                    },
                    {
                      "pattern-not": "subprocess.$FUNC([\"...\", ...], ...)"
                    },
                    {
                      "pattern-not-inside": "$CMD = [\"...\", ...]\n...\nsubprocess.$FUNC($CMD, ...)\n"
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern": "subprocess.$FUNC([\"$SHELL\", \"-c\", ...], ...)"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$SHELL",
                        "regex": "^(sh|bash|ksh|csh|tcsh|zsh)$"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern": "subprocess.$FUNC([\"$INTERPRETER\", ...], ...)"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$INTERPRETER",
                        "regex": "^(python|python\\d)$"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-inside": "def $FUNC(..., $REQUEST, ...):\n  ...\n"
            },
            {
              "focus-metavariable": "$REQUEST"
            },
            {
              "metavariable-pattern": {
                "metavariable": "$REQUEST",
                "patterns": [
                  {
                    "pattern": "request"
                  },
                  {
                    "pattern-not-inside": "request.build_absolute_uri"
                  }
                ]
              }
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "fix": "True\n",
      "id": "python.pyramid.audit.authtkt-cookie-secure-unsafe-value.pyramid-authtkt-cookie-secure-unsafe-value",
      "languages": [
        "python"
      ],
      "message": "Found a Pyramid Authentication Ticket cookie without the secure option correctly set. Pyramid cookies should be handled securely by setting secure=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
        ],
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "x8UqAp",
            "url": "https://semgrep.dev/playground/r/qkT9YY/python.pyramid.audit.authtkt-cookie-secure-unsafe-value.pyramid-authtkt-cookie-secure-unsafe-value",
            "version_id": "qkT9YY"
          }
        },
        "shortlink": "https://sg.run/gjp5",
        "source": "https://semgrep.dev/r/python.pyramid.audit.authtkt-cookie-secure-unsafe-value.pyramid-authtkt-cookie-secure-unsafe-value",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-not": "pyramid.authentication.AuthTktCookieHelper(..., **$PARAMS)"
                },
                {
                  "pattern": "pyramid.authentication.AuthTktCookieHelper(..., secure=$SECURE, ...)"
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-not": "pyramid.authentication.AuthTktAuthenticationPolicy(..., **$PARAMS)"
                },
                {
                  "pattern": "pyramid.authentication.AuthTktAuthenticationPolicy(..., secure=$SECURE, ...)"
                }
              ]
            }
          ]
        },
        {
          "pattern": "$SECURE"
        },
        {
          "metavariable-pattern": {
            "metavariable": "$SECURE",
            "pattern": "False\n"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.django.security.injection.code.user-exec.user-exec",
      "languages": [
        "python"
      ],
      "message": "Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Code_Injection"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "0oU5AW",
            "url": "https://semgrep.dev/playground/r/LjTp1q/python.django.security.injection.code.user-exec.user-exec",
            "version_id": "LjTp1q"
          }
        },
        "shortlink": "https://sg.run/5Q3X",
        "source": "https://semgrep.dev/r/python.django.security.injection.code.user-exec.user-exec",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $F(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "exec(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\nexec(..., $V, ...)\n"
            },
            {
              "pattern": "exec(..., request.$W(...), ...)"
            },
            {
              "pattern": "$V = request.$W(...)\n...\nexec(..., $V, ...)\n"
            },
            {
              "pattern": "exec(..., request.$W[...], ...)"
            },
            {
              "pattern": "$V = request.$W[...]\n...\nexec(..., $V, ...)\n"
            },
            {
              "pattern": "loop = asyncio.get_running_loop()\n...\nawait loop.run_in_executor(None, exec, request.$W[...])\n"
            },
            {
              "pattern": "$V = request.$W[...]\n...\nloop = asyncio.get_running_loop()\n...\nawait loop.run_in_executor(None, exec, $V)\n"
            },
            {
              "pattern": "loop = asyncio.get_running_loop()\n...\nawait loop.run_in_executor(None, exec, request.$W.get(...))\n"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\nloop = asyncio.get_running_loop()\n...\nawait loop.run_in_executor(None, exec, $V)\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.dangerous-testcapi-run-in-subinterp.dangerous-testcapi-run-in-subinterp",
      "languages": [
        "python"
      ],
      "message": "Found user controlled content in `run_in_subinterp`. This is dangerous  because it allows a malicious actor to run arbitrary Python code.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "GdUkxR",
            "url": "https://semgrep.dev/playground/r/bZT405/python.lang.security.dangerous-testcapi-run-in-subinterp.dangerous-testcapi-run-in-subinterp",
            "version_id": "bZT405"
          }
        },
        "shortlink": "https://sg.run/wLpY",
        "source": "https://semgrep.dev/r/python.lang.security.dangerous-testcapi-run-in-subinterp.dangerous-testcapi-run-in-subinterp",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "_testcapi.run_in_subinterp($PAYLOAD, ...)\n"
                },
                {
                  "pattern-inside": "test.support.run_in_subinterp($PAYLOAD, ...)\n"
                }
              ]
            },
            {
              "pattern": "$PAYLOAD"
            },
            {
              "pattern-not": "_testcapi.run_in_subinterp(\"...\", ...)\n"
            },
            {
              "pattern-not": "test.support.run_in_subinterp(\"...\", ...)\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "flask.request.form.get(...)"
                        },
                        {
                          "pattern": "flask.request.form[...]"
                        },
                        {
                          "pattern": "flask.request.args.get(...)"
                        },
                        {
                          "pattern": "flask.request.args[...]"
                        },
                        {
                          "pattern": "flask.request.values.get(...)"
                        },
                        {
                          "pattern": "flask.request.values[...]"
                        },
                        {
                          "pattern": "flask.request.cookies.get(...)"
                        },
                        {
                          "pattern": "flask.request.cookies[...]"
                        },
                        {
                          "pattern": "flask.request.stream"
                        },
                        {
                          "pattern": "flask.request.headers.get(...)"
                        },
                        {
                          "pattern": "flask.request.headers[...]"
                        },
                        {
                          "pattern": "flask.request.data"
                        },
                        {
                          "pattern": "flask.request.full_path"
                        },
                        {
                          "pattern": "flask.request.url"
                        },
                        {
                          "pattern": "flask.request.json"
                        },
                        {
                          "pattern": "flask.request.get_json()"
                        },
                        {
                          "pattern": "flask.request.view_args.get(...)"
                        },
                        {
                          "pattern": "flask.request.view_args[...]"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
                            },
                            {
                              "pattern": "$ROUTEVAR"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "def $FUNC(request, ...):\n  ...\n"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "request.$PROPERTY.get(...)"
                        },
                        {
                          "pattern": "request.$PROPERTY[...]"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "@rest_framework.decorators.api_view(...)\ndef $FUNC($REQ, ...):\n  ...\n"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.views.APIView, ...):\n  ...\n"
                                },
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.generics.GenericAPIView, ...):\n  ...                              \n"
                                }
                              ]
                            },
                            {
                              "pattern-inside": "def $METHOD(self, $REQ, ...):\n  ...\n"
                            },
                            {
                              "metavariable-regex": {
                                "metavariable": "$METHOD",
                                "regex": "(get|post|put|patch|delete|head)"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "$REQ.POST.get(...)"
                        },
                        {
                          "pattern": "$REQ.POST[...]"
                        },
                        {
                          "pattern": "$REQ.FILES.get(...)"
                        },
                        {
                          "pattern": "$REQ.FILES[...]"
                        },
                        {
                          "pattern": "$REQ.DATA.get(...)"
                        },
                        {
                          "pattern": "$REQ.DATA[...]"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS.get(...)"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS[...]"
                        },
                        {
                          "pattern": "$REQ.data.get(...)"
                        },
                        {
                          "pattern": "$REQ.data[...]"
                        },
                        {
                          "pattern": "$REQ.query_params.get(...)"
                        },
                        {
                          "pattern": "$REQ.query_params[...]"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.stream"
                        },
                        {
                          "pattern": "$REQ.stream"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.StreamRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.DatagramRequestHandler, ...):\n  ...\n"
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "self.requestline"
                        },
                        {
                          "pattern": "self.path"
                        },
                        {
                          "pattern": "self.headers[...]"
                        },
                        {
                          "pattern": "self.headers.get(...)"
                        },
                        {
                          "pattern": "self.rfile"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "@pyramid.view.view_config( ... )\ndef $VIEW($REQ):\n  ...\n"
                    },
                    {
                      "pattern": "$REQ.$ANYTHING"
                    },
                    {
                      "pattern-not": "$REQ.dbsession"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.flask.security.injection.os-system-injection.os-system-injection",
      "languages": [
        "python"
      ],
      "message": "User data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "BYUN99",
            "url": "https://semgrep.dev/playground/r/yeTd6w/python.flask.security.injection.os-system-injection.os-system-injection",
            "version_id": "yeTd6w"
          }
        },
        "shortlink": "https://sg.run/4xzz",
        "source": "https://semgrep.dev/r/python.flask.security.injection.os-system-injection.os-system-injection",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "flask"
        ]
      },
      "pattern-either": [
        {
          "patterns": [
            {
              "pattern": "os.system(...)"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n  os.system(..., <... $ROUTEVAR ...>, ...)\n"
                },
                {
                  "pattern-inside": "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n  $INTERM = <... $ROUTEVAR ...>\n  ...\n  os.system(..., <... $INTERM ...>, ...)\n"
                }
              ]
            }
          ]
        },
        {
          "pattern": "os.system(..., <... flask.request.$W.get(...) ...>, ...)"
        },
        {
          "pattern": "os.system(..., <... flask.request.$W[...] ...>, ...)"
        },
        {
          "pattern": "os.system(..., <... flask.request.$W(...) ...>, ...)"
        },
        {
          "pattern": "os.system(..., <... flask.request.$W ...>, ...)"
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W.get(...) ...>\n...\nos.system(<... $INTERM ...>)\n"
            },
            {
              "pattern": "os.system(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W[...] ...>\n...\nos.system(<... $INTERM ...>)\n"
            },
            {
              "pattern": "os.system(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W(...) ...>\n...\nos.system(<... $INTERM ...>)\n"
            },
            {
              "pattern": "os.system(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W ...>\n...\nos.system(<... $INTERM ...>)\n"
            },
            {
              "pattern": "os.system(...)"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.django.security.injection.sql.sql-injection-extra.sql-injection-using-extra-where",
      "languages": [
        "python"
      ],
      "message": "User-controlled data from a request is passed to 'extra()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use parameterized queries or escape the user-controlled data by using `params` and not using quote placeholders in the SQL string.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.0/ref/models/expressions/#.objects.extra"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "zdUkx1",
            "url": "https://semgrep.dev/playground/r/K3TOp8/python.django.security.injection.sql.sql-injection-extra.sql-injection-using-extra-where",
            "version_id": "K3TOp8"
          }
        },
        "shortlink": "https://sg.run/0Ql5",
        "source": "https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-extra.sql-injection-using-extra-where",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., $S.format(..., request.$W.get(...), ...), ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., $S % request.$W.get(...), ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., f\"...{request.$W.get(...)}...\", ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., request.$W.get(...), ...], ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$MODEL.objects.extra(..., where=[..., $DATA, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$MODEL.objects.extra(..., where=[..., $STR.format(..., $DATA, ...), ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$MODEL.objects.extra(..., where=[..., $STR % $DATA, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$MODEL.objects.extra(..., where=[..., f\"...{$DATA}...\", ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$MODEL.objects.extra(..., where=[..., $STR + $DATA, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$A = $MODEL.objects.extra(..., where=[..., request.$W.get(...), ...], ...)"
            },
            {
              "pattern": "return $MODEL.objects.extra(..., where=[..., request.$W.get(...), ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., $S.format(..., request.$W(...), ...), ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., $S % request.$W(...), ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., f\"...{request.$W(...)}...\", ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., request.$W(...), ...], ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$MODEL.objects.extra(..., where=[..., $DATA, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$MODEL.objects.extra(..., where=[..., $STR.format(..., $DATA, ...), ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$MODEL.objects.extra(..., where=[..., $STR % $DATA, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$MODEL.objects.extra(..., where=[..., f\"...{$DATA}...\", ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$MODEL.objects.extra(..., where=[..., $STR + $DATA, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$A = $MODEL.objects.extra(..., where=[..., request.$W(...), ...], ...)"
            },
            {
              "pattern": "return $MODEL.objects.extra(..., where=[..., request.$W(...), ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., $S.format(..., request.$W[...], ...), ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., $S % request.$W[...], ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., f\"...{request.$W[...]}...\", ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., request.$W[...], ...], ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$MODEL.objects.extra(..., where=[..., $DATA, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$MODEL.objects.extra(..., where=[..., $STR.format(..., $DATA, ...), ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$MODEL.objects.extra(..., where=[..., $STR % $DATA, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$MODEL.objects.extra(..., where=[..., f\"...{$DATA}...\", ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$MODEL.objects.extra(..., where=[..., $STR + $DATA, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$A = $MODEL.objects.extra(..., where=[..., request.$W[...], ...], ...)"
            },
            {
              "pattern": "return $MODEL.objects.extra(..., where=[..., request.$W[...], ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., $S.format(..., request.$W, ...), ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., $S % request.$W, ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., f\"...{request.$W}...\", ...], ...)"
            },
            {
              "pattern": "$MODEL.objects.extra(..., where=[..., request.$W, ...], ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$MODEL.objects.extra(..., where=[..., $DATA, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$MODEL.objects.extra(..., where=[..., $STR.format(..., $DATA, ...), ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$MODEL.objects.extra(..., where=[..., $STR % $DATA, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$MODEL.objects.extra(..., where=[..., f\"...{$DATA}...\", ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$MODEL.objects.extra(..., where=[..., $STR + $DATA, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$A = $MODEL.objects.extra(..., where=[..., request.$W, ...], ...)"
            },
            {
              "pattern": "return $MODEL.objects.extra(..., where=[..., request.$W, ...], ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$MODEL.objects.extra(..., where=[..., $STR % (..., $DATA, ...), ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$MODEL.objects.extra(..., where=[..., $STR % (..., $DATA, ...), ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$MODEL.objects.extra(..., where=[..., $STR % (..., $DATA, ...), ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$MODEL.objects.extra(..., where=[..., $STR % (..., $DATA, ...), ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "'Lax'\n",
      "id": "python.pyramid.audit.set-cookie-samesite-unsafe-value.pyramid-set-cookie-samesite-unsafe-value",
      "languages": [
        "python"
      ],
      "message": "Found a Pyramid cookie without the samesite option correctly set. Pyramid cookies should be handled securely by setting samesite='Lax' in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-1275: Sensitive Cookie with Improper SameSite Attribute"
        ],
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "EwUgpY",
            "url": "https://semgrep.dev/playground/r/2KTAlP/python.pyramid.audit.set-cookie-samesite-unsafe-value.pyramid-set-cookie-samesite-unsafe-value",
            "version_id": "2KTAlP"
          }
        },
        "shortlink": "https://sg.run/GXR6",
        "source": "https://semgrep.dev/r/python.pyramid.audit.set-cookie-samesite-unsafe-value.pyramid-set-cookie-samesite-unsafe-value",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "@pyramid.view.view_config(...)\ndef $VIEW($REQUEST):\n    ...\n    $RESPONSE = $REQUEST.response\n    ...\n"
            },
            {
              "pattern-inside": "def $VIEW(...):\n    ...\n    $RESPONSE = pyramid.httpexceptions.HTTPFound(...)\n    ...\n"
            }
          ]
        },
        {
          "pattern-not": "$RESPONSE.set_cookie(..., **$PARAMS)"
        },
        {
          "pattern": "$RESPONSE.set_cookie(..., samesite=$SAMESITE, ...)"
        },
        {
          "pattern": "$SAMESITE"
        },
        {
          "metavariable-regex": {
            "metavariable": "$SAMESITE",
            "regex": "(?!'Lax')"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "True\n",
      "id": "python.distributed.security.require-encryption",
      "languages": [
        "python"
      ],
      "message": "Initializing a security context for Dask (`distributed`) without \"require_encryption\" keyword argument may silently fail to provide security.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://distributed.dask.org/en/latest/tls.html?highlight=require_encryption#parameters"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "YGURy0",
            "url": "https://semgrep.dev/playground/r/A8T1k6/python.distributed.security.require-encryption",
            "version_id": "A8T1k6"
          }
        },
        "shortlink": "https://sg.run/AvQ2",
        "source": "https://semgrep.dev/r/python.distributed.security.require-encryption",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "distributed"
        ]
      },
      "patterns": [
        {
          "pattern": "distributed.security.Security(..., require_encryption=$VAL, ...)\n"
        },
        {
          "metavariable-pattern": {
            "metavariable": "$VAL",
            "pattern": "False\n"
          }
        },
        {
          "focus-metavariable": "$VAL"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
      "languages": [
        "python"
      ],
      "message": "sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as or_, and_, etc.) to construct SQL.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "r6U2wE",
            "url": "https://semgrep.dev/playground/r/kbTrKW/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
            "version_id": "kbTrKW"
          }
        },
        "shortlink": "https://sg.run/yP1O",
        "source": "https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "sqlalchemy"
        ]
      },
      "patterns": [
        {
          "pattern": "sqlalchemy.text(...)"
        },
        {
          "pattern-not-inside": "sqlalchemy.text(\"...\")"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.lang.security.audit.dangerous-spawn-process-tainted-env-args.dangerous-spawn-process-tainted-env-args",
      "languages": [
        "python"
      ],
      "message": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "JDUz34",
            "url": "https://semgrep.dev/playground/r/X0TJPb/python.lang.security.audit.dangerous-spawn-process-tainted-env-args.dangerous-spawn-process-tainted-env-args",
            "version_id": "X0TJPb"
          }
        },
        "shortlink": "https://sg.run/Y3Ke",
        "source": "https://semgrep.dev/r/python.lang.security.audit.dangerous-spawn-process-tainted-env-args.dangerous-spawn-process-tainted-env-args",
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-not": "os.$METHOD($MODE, \"...\", ...)"
                    },
                    {
                      "pattern-inside": "os.$METHOD($MODE, $CMD, ...)"
                    },
                    {
                      "pattern": "$CMD"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(spawnl|spawnle|spawnlp|spawnlpe|spawnv|spawnve|spawnvp|spawnvp|spawnvpe|posix_spawn|posix_spawnp|startfile)"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "os.$METHOD($MODE, \"...\", [\"...\",\"...\",...], ...)"
                    },
                    {
                      "pattern-inside": "os.$METHOD($MODE, $BASH, [\"-c\",$CMD,...],...)"
                    },
                    {
                      "pattern": "$CMD"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(spawnv|spawnve|spawnvp|spawnvp|spawnvpe|posix_spawn|posix_spawnp)"
                      }
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$BASH",
                        "regex": "(.*)(sh|bash|ksh|csh|tcsh|zsh)"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "os.$METHOD($MODE, \"...\", \"...\", \"...\", ...)"
                    },
                    {
                      "pattern-inside": "os.$METHOD($MODE, $BASH, \"-c\", $CMD,...)"
                    },
                    {
                      "pattern": "$CMD"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(spawnl|spawnle|spawnlp|spawnlpe)"
                      }
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$BASH",
                        "regex": "(.*)(sh|bash|ksh|csh|tcsh|zsh)"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "os.environ"
                        },
                        {
                          "pattern": "os.environ.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.environb"
                        },
                        {
                          "pattern": "os.environb.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.getenv('$ANYTHING', ...)"
                        },
                        {
                          "pattern": "os.getenvb('$ANYTHING', ...)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern": "sys.argv"
                                },
                                {
                                  "pattern": "sys.orig_argv"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = argparse.ArgumentParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = optparse.OptionParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.getopt(...)\n...\n"
                                },
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.gnu_getopt(...)\n...\n"
                                }
                              ]
                            },
                            {
                              "pattern-either": [
                                {
                                  "patterns": [
                                    {
                                      "pattern-inside": "for $O, $A in $OPTS:\n  ...\n"
                                    },
                                    {
                                      "pattern": "$A"
                                    }
                                  ]
                                },
                                {
                                  "pattern": "$ARGS"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.flask.security.injection.subprocess-injection.subprocess-injection",
      "languages": [
        "python"
      ],
      "message": "Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "8GU3qp",
            "url": "https://semgrep.dev/playground/r/kbTZ7j/python.flask.security.injection.subprocess-injection.subprocess-injection",
            "version_id": "kbTZ7j"
          }
        },
        "shortlink": "https://sg.run/5gW3",
        "source": "https://semgrep.dev/r/python.flask.security.injection.subprocess-injection.subprocess-injection",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "flask"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sanitizers": [
        {
          "patterns": [
            {
              "pattern": "$DICT[$KEY]"
            },
            {
              "focus-metavariable": "$KEY"
            }
          ]
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern": "subprocess.$FUNC(...)"
                    },
                    {
                      "pattern-not": "subprocess.$FUNC(\"...\", ...)"
                    },
                    {
                      "pattern-not": "subprocess.$FUNC([\"...\", ...], ...)"
                    },
                    {
                      "pattern-not-inside": "$CMD = [\"...\", ...]\n...\nsubprocess.$FUNC($CMD, ...)\n"
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern": "subprocess.$FUNC([\"$SHELL\", \"-c\", ...], ...)"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$SHELL",
                        "regex": "^(sh|bash|ksh|csh|tcsh|zsh)$"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern": "subprocess.$FUNC([\"$INTERPRETER\", ...], ...)"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$INTERPRETER",
                        "regex": "^(python|python\\d)$"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern": "flask.request.form.get(...)"
                    },
                    {
                      "pattern": "flask.request.form[...]"
                    },
                    {
                      "pattern": "flask.request.args.get(...)"
                    },
                    {
                      "pattern": "flask.request.args[...]"
                    },
                    {
                      "pattern": "flask.request.values.get(...)"
                    },
                    {
                      "pattern": "flask.request.values[...]"
                    },
                    {
                      "pattern": "flask.request.cookies.get(...)"
                    },
                    {
                      "pattern": "flask.request.cookies[...]"
                    },
                    {
                      "pattern": "flask.request.stream"
                    },
                    {
                      "pattern": "flask.request.headers.get(...)"
                    },
                    {
                      "pattern": "flask.request.headers[...]"
                    },
                    {
                      "pattern": "flask.request.data"
                    },
                    {
                      "pattern": "flask.request.full_path"
                    },
                    {
                      "pattern": "flask.request.url"
                    },
                    {
                      "pattern": "flask.request.json"
                    },
                    {
                      "pattern": "flask.request.get_json()"
                    },
                    {
                      "pattern": "flask.request.view_args.get(...)"
                    },
                    {
                      "pattern": "flask.request.view_args[...]"
                    }
                  ]
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern": "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
                },
                {
                  "focus-metavariable": "$ROUTEVAR"
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
      "languages": [
        "python"
      ],
      "message": "Running flask app with host 0.0.0.0 could expose the server publicly.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-668: Exposure of Resource to Wrong Sphere"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "L1Uy1n",
            "url": "https://semgrep.dev/playground/r/K3TOpE/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
            "version_id": "K3TOpE"
          }
        },
        "shortlink": "https://sg.run/eLby",
        "source": "https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "flask"
        ]
      },
      "pattern-either": [
        {
          "pattern": "app.run(..., host=\"0.0.0.0\", ...)"
        },
        {
          "pattern": "app.run(..., \"0.0.0.0\", ...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.django.security.nan-injection.nan-injection",
      "languages": [
        "python"
      ],
      "message": "Found user input going directly into typecast for bool(), float(), or complex(). This allows  an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-704: Incorrect Type Conversion or Cast"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "references": [
          "https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868",
          "https://blog.bitdiscovery.com/2021/12/python-nan-injection/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "DbUGvk",
            "url": "https://semgrep.dev/playground/r/BjTG9n/python.django.security.nan-injection.nan-injection",
            "version_id": "BjTG9n"
          }
        },
        "shortlink": "https://sg.run/Og7L",
        "source": "https://semgrep.dev/r/python.django.security.nan-injection.nan-injection",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "not_conflicting": true,
          "pattern": "$ANYTHING(...)"
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "float(...)"
                },
                {
                  "pattern": "bool(...)"
                },
                {
                  "pattern": "complex(...)"
                }
              ]
            },
            {
              "pattern-not-inside": "if $COND:\n  ...\n...\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-inside": "def $FUNC(request, ...):\n  ...\n"
            },
            {
              "pattern-either": [
                {
                  "pattern": "request.$PROPERTY.get(...)"
                },
                {
                  "pattern": "request.$PROPERTY[...]"
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "fix-regex": {
        "regex": "(.*)\\)",
        "replacement": "\\1, samesite='Lax')"
      },
      "id": "python.pyramid.audit.set-cookie-samesite-unsafe-default.pyramid-set-cookie-samesite-unsafe-default",
      "languages": [
        "python"
      ],
      "message": "Found a Pyramid cookie using an unsafe value for the samesite option. Pyramid cookies should be handled securely by setting samesite='Lax' in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-1275: Sensitive Cookie with Improper SameSite Attribute"
        ],
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "nJUp80",
            "url": "https://semgrep.dev/playground/r/pZTqPw/python.pyramid.audit.set-cookie-samesite-unsafe-default.pyramid-set-cookie-samesite-unsafe-default",
            "version_id": "pZTqPw"
          }
        },
        "shortlink": "https://sg.run/5AWj",
        "source": "https://semgrep.dev/r/python.pyramid.audit.set-cookie-samesite-unsafe-default.pyramid-set-cookie-samesite-unsafe-default",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "@pyramid.view.view_config(...)\ndef $VIEW($REQUEST):\n    ...\n    $RESPONSE = $REQUEST.response\n    ...\n"
            },
            {
              "pattern-inside": "def $VIEW(...):\n    ...\n    $RESPONSE = pyramid.httpexceptions.HTTPFound(...)\n    ...\n"
            }
          ]
        },
        {
          "pattern-not": "$RESPONSE.set_cookie(..., samesite=$SAMESITE, ...)"
        },
        {
          "pattern-not": "$RESPONSE.set_cookie(..., **$PARAMS)"
        },
        {
          "pattern": "$RESPONSE.set_cookie(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.django.security.injection.email.xss-send-mail-html-message.xss-send-mail-html-message",
      "languages": [
        "python"
      ],
      "message": "Found request data in 'send_mail(...)' that uses 'html_message'. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://www.damonkohler.com/2008/12/email-injection.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "lBU9Ll",
            "url": "https://semgrep.dev/playground/r/44TYX2/python.django.security.injection.email.xss-send-mail-html-message.xss-send-mail-html-message",
            "version_id": "44TYX2"
          }
        },
        "shortlink": "https://sg.run/Avx8",
        "source": "https://semgrep.dev/r/python.django.security.injection.email.xss-send-mail-html-message.xss-send-mail-html-message",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "django.core.mail.send_mail(..., html_message=request.$W.get(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.core.mail.send_mail(..., html_message=$DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.core.mail.send_mail(..., html_message=$STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.core.mail.send_mail(..., html_message=$STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.core.mail.send_mail(..., html_message=f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.core.mail.send_mail(..., html_message=$STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.core.mail.send_mail(..., html_message=request.$W.get(...), ...)"
            },
            {
              "pattern": "return django.core.mail.send_mail(..., html_message=request.$W.get(...), ...)"
            },
            {
              "pattern": "django.core.mail.send_mail(..., html_message=request.$W(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.core.mail.send_mail(..., html_message=$DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.core.mail.send_mail(..., html_message=$STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.core.mail.send_mail(..., html_message=$STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.core.mail.send_mail(..., html_message=f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.core.mail.send_mail(..., html_message=$STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.core.mail.send_mail(..., html_message=request.$W(...), ...)"
            },
            {
              "pattern": "return django.core.mail.send_mail(..., html_message=request.$W(...), ...)"
            },
            {
              "pattern": "django.core.mail.send_mail(..., html_message=request.$W[...], ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.core.mail.send_mail(..., html_message=$DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.core.mail.send_mail(..., html_message=$STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.core.mail.send_mail(..., html_message=$STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.core.mail.send_mail(..., html_message=f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.core.mail.send_mail(..., html_message=$STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.core.mail.send_mail(..., html_message=request.$W[...], ...)"
            },
            {
              "pattern": "return django.core.mail.send_mail(..., html_message=request.$W[...], ...)"
            },
            {
              "pattern": "django.core.mail.send_mail(..., html_message=request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.core.mail.send_mail(..., html_message=$DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.core.mail.send_mail(..., html_message=$STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.core.mail.send_mail(..., html_message=$STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.core.mail.send_mail(..., html_message=f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.core.mail.send_mail(..., html_message=$STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\ndjango.core.mail.send_mail(..., html_message=$INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.core.mail.send_mail(..., html_message=request.$W, ...)"
            },
            {
              "pattern": "return django.core.mail.send_mail(..., html_message=request.$W, ...)"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.flask.security.injection.tainted-url-host.tainted-url-host",
      "languages": [
        "python"
      ],
      "message": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "ReU3Wb",
            "url": "https://semgrep.dev/playground/r/xyT34W/python.flask.security.injection.tainted-url-host.tainted-url-host",
            "version_id": "xyT34W"
          }
        },
        "shortlink": "https://sg.run/RXpK",
        "source": "https://semgrep.dev/r/python.flask.security.injection.tainted-url-host.tainted-url-host",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "flask"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern": "\"$URLSTR\" % ..."
                    },
                    {
                      "metavariable-pattern": {
                        "language": "generic",
                        "metavariable": "$URLSTR",
                        "patterns": [
                          {
                            "pattern-either": [
                              {
                                "pattern": "$SCHEME://%s"
                              },
                              {
                                "pattern": "$SCHEME://%r"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern": "\"$URLSTR\".format(...)"
                    },
                    {
                      "metavariable-pattern": {
                        "language": "generic",
                        "metavariable": "$URLSTR",
                        "pattern": "$SCHEME:// { ... }"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern": "\"$URLSTR\" + ..."
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$URLSTR",
                        "regex": ".*://$"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern": "f\"$URLSTR{...}...\""
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$URLSTR",
                        "regex": ".*://$"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "$URL = \"$URLSTR\"\n...\n"
                    },
                    {
                      "pattern": "$URL += ..."
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$URLSTR",
                        "regex": ".*://$"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "flask.request.$ANYTHING"
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
                    },
                    {
                      "pattern": "$ROUTEVAR"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.audit.weak-ssl-version.weak-ssl-version",
      "languages": [
        "python"
      ],
      "message": "An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher.",
      "metadata": {
        "asvs": {
          "control_id": "9.1.3 Weak TLS",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v91-client-communications-security-requirements",
          "section": "V9 Communications Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-326: Inadequate Encryption Strength"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://tools.ietf.org/html/rfc7568",
          "https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html",
          "https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLSv1_2"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "KxUbNG",
            "url": "https://semgrep.dev/playground/r/pZTQ9w/python.lang.security.audit.weak-ssl-version.weak-ssl-version",
            "version_id": "pZTQ9w"
          }
        },
        "shortlink": "https://sg.run/RoZO",
        "source": "https://semgrep.dev/r/python.lang.security.audit.weak-ssl-version.weak-ssl-version",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/insecure_ssl_tls.py#L30",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "pattern": "ssl.PROTOCOL_SSLv2"
        },
        {
          "pattern": "ssl.PROTOCOL_SSLv3"
        },
        {
          "pattern": "ssl.PROTOCOL_TLSv1"
        },
        {
          "pattern": "ssl.PROTOCOL_TLSv1_1"
        },
        {
          "pattern": "pyOpenSSL.SSL.SSLv2_METHOD"
        },
        {
          "pattern": "pyOpenSSL.SSL.SSLv23_METHOD"
        },
        {
          "pattern": "pyOpenSSL.SSL.SSLv3_METHOD"
        },
        {
          "pattern": "pyOpenSSL.SSL.TLSv1_METHOD"
        },
        {
          "pattern": "pyOpenSSL.SSL.TLSv1_1_METHOD"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.django.security.injection.command.command-injection-os-system.command-injection-os-system",
      "languages": [
        "python"
      ],
      "message": "Request data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list. See https://owasp.org/www-community/attacks/Command_Injection for more information.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "KxUbp2",
            "url": "https://semgrep.dev/playground/r/8KTLd4/python.django.security.injection.command.command-injection-os-system.command-injection-os-system",
            "version_id": "8KTLd4"
          }
        },
        "shortlink": "https://sg.run/Gen2",
        "source": "https://semgrep.dev/r/python.django.security.injection.command.command-injection-os-system.command-injection-os-system",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "os.system(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "os.system(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "os.system(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "os.system(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nos.system(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nos.system(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nos.system(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nos.system(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nos.system(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = os.system(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$A = os.system(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "$A = os.system(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "$A = os.system(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "return os.system(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "return os.system(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "return os.system(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "return os.system(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "os.system(..., request.$W(...), ...)"
            },
            {
              "pattern": "os.system(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "os.system(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "os.system(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nos.system(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nos.system(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nos.system(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nos.system(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nos.system(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = os.system(..., request.$W(...), ...)"
            },
            {
              "pattern": "$A = os.system(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "$A = os.system(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "$A = os.system(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "return os.system(..., request.$W(...), ...)"
            },
            {
              "pattern": "return os.system(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "return os.system(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "return os.system(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "os.system(..., request.$W[...], ...)"
            },
            {
              "pattern": "os.system(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "os.system(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "os.system(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nos.system(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nos.system(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nos.system(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nos.system(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nos.system(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = os.system(..., request.$W[...], ...)"
            },
            {
              "pattern": "$A = os.system(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "$A = os.system(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "$A = os.system(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "return os.system(..., request.$W[...], ...)"
            },
            {
              "pattern": "return os.system(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "return os.system(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "return os.system(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "os.system(..., request.$W, ...)"
            },
            {
              "pattern": "os.system(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "os.system(..., $S % request.$W, ...)"
            },
            {
              "pattern": "os.system(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\nos.system(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nos.system(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nos.system(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nos.system(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nos.system(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\nos.system(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = os.system(..., request.$W, ...)"
            },
            {
              "pattern": "$A = os.system(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "$A = os.system(..., $S % request.$W, ...)"
            },
            {
              "pattern": "$A = os.system(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "return os.system(..., request.$W, ...)"
            },
            {
              "pattern": "return os.system(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "return os.system(..., $S % request.$W, ...)"
            },
            {
              "pattern": "return os.system(..., f\"...{request.$W}...\", ...)"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "fix-regex": {
        "regex": "format",
        "replacement": "bindparams"
      },
      "id": "python.pyramid.security.sqlalchemy-sql-injection.pyramid-sqlalchemy-sql-injection",
      "languages": [
        "python"
      ],
      "message": "Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.sqlalchemy.org/en/14/tutorial/data_select.html#tutorial-selecting-data"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "QrUZ7l",
            "url": "https://semgrep.dev/playground/r/yeTQk2/python.pyramid.security.sqlalchemy-sql-injection.pyramid-sqlalchemy-sql-injection",
            "version_id": "yeTQk2"
          }
        },
        "shortlink": "https://sg.run/W7eE",
        "source": "https://semgrep.dev/r/python.pyramid.security.sqlalchemy-sql-injection.pyramid-sqlalchemy-sql-injection",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-inside": "$QUERY = $REQ.dbsession.query(...)\n...\n"
            },
            {
              "pattern-either": [
                {
                  "pattern": "$QUERY.$SQLFUNC(\"...\".$FORMATFUNC(..., $SINK, ...))\n"
                },
                {
                  "pattern": "$QUERY.join(...).$SQLFUNC(\"...\".$FORMATFUNC(..., $SINK, ...))\n"
                }
              ]
            },
            {
              "pattern": "$SINK"
            },
            {
              "metavariable-regex": {
                "metavariable": "$SQLFUNC",
                "regex": "(group_by|order_by|distinct|having|filter)"
              }
            },
            {
              "metavariable-regex": {
                "metavariable": "$FORMATFUNC",
                "regex": "(?!bindparams)"
              }
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-inside": "from pyramid.view import view_config\n...\n@view_config( ... )\ndef $VIEW($REQ):\n  ...\n"
            },
            {
              "pattern": "$REQ.$ANYTHING"
            },
            {
              "pattern-not": "$REQ.dbsession"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly",
      "languages": [
        "python"
      ],
      "message": "top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-668: Exposure of Resource to Wrong Sphere"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "8GUjdX",
            "url": "https://semgrep.dev/playground/r/qkTK0D/python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly",
            "version_id": "qkTK0D"
          }
        },
        "shortlink": "https://sg.run/vz5b",
        "source": "https://semgrep.dev/r/python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "flask"
        ]
      },
      "patterns": [
        {
          "pattern-not-inside": "if __name__ == '__main__':\n  ...\n"
        },
        {
          "pattern-not-inside": "def $X(...):\n  ...\n"
        },
        {
          "pattern": "app.run(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.audit.dangerous-os-exec-tainted-env-args.dangerous-os-exec-tainted-env-args",
      "languages": [
        "python"
      ],
      "message": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "4bUEAY",
            "url": "https://semgrep.dev/playground/r/pZTQrY/python.lang.security.audit.dangerous-os-exec-tainted-env-args.dangerous-os-exec-tainted-env-args",
            "version_id": "pZTQrY"
          }
        },
        "shortlink": "https://sg.run/qL6z",
        "source": "https://semgrep.dev/r/python.lang.security.audit.dangerous-os-exec-tainted-env-args.dangerous-os-exec-tainted-env-args",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-not": "os.$METHOD(\"...\", ...)"
                    },
                    {
                      "pattern": "os.$METHOD(...)"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(execl|execle|execlp|execlpe|execv|execve|execvp|execvpe)"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "os.$METHOD(\"...\", [$PATH,\"...\",\"...\",...],...)"
                    },
                    {
                      "pattern-inside": "os.$METHOD($BASH,[$PATH,\"-c\",$CMD,...],...)"
                    },
                    {
                      "pattern": "$CMD"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(execv|execve|execvp|execvpe)"
                      }
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$BASH",
                        "regex": "(.*)(sh|bash|ksh|csh|tcsh|zsh)"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "os.$METHOD(\"...\", $PATH, \"...\", \"...\",...)"
                    },
                    {
                      "pattern-inside": "os.$METHOD($BASH, $PATH, \"-c\", $CMD,...)"
                    },
                    {
                      "pattern": "$CMD"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(execl|execle|execlp|execlpe)"
                      }
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$BASH",
                        "regex": "(.*)(sh|bash|ksh|csh|tcsh|zsh)"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "os.environ"
                        },
                        {
                          "pattern": "os.environ.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.environb"
                        },
                        {
                          "pattern": "os.environb.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.getenv('$ANYTHING', ...)"
                        },
                        {
                          "pattern": "os.getenvb('$ANYTHING', ...)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern": "sys.argv"
                                },
                                {
                                  "pattern": "sys.orig_argv"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = argparse.ArgumentParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = optparse.OptionParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.getopt(...)\n...\n"
                                },
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.gnu_getopt(...)\n...\n"
                                }
                              ]
                            },
                            {
                              "pattern-either": [
                                {
                                  "patterns": [
                                    {
                                      "pattern-inside": "for $O, $A in $OPTS:\n  ...\n"
                                    },
                                    {
                                      "pattern": "$A"
                                    }
                                  ]
                                },
                                {
                                  "pattern": "$ARGS"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "fix-regex": {
        "regex": "(.*)\\)",
        "replacement": "\\1, httponly=True)"
      },
      "id": "python.pyramid.audit.set-cookie-httponly-unsafe-default.pyramid-set-cookie-httponly-unsafe-default",
      "languages": [
        "python"
      ],
      "message": "Found a Pyramid cookie using an unsafe default for the httponly option. Pyramid cookies should be handled securely by setting httponly=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"
        ],
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "d8UPQ7",
            "url": "https://semgrep.dev/playground/r/o5TWXe/python.pyramid.audit.set-cookie-httponly-unsafe-default.pyramid-set-cookie-httponly-unsafe-default",
            "version_id": "o5TWXe"
          }
        },
        "shortlink": "https://sg.run/P19v",
        "source": "https://semgrep.dev/r/python.pyramid.audit.set-cookie-httponly-unsafe-default.pyramid-set-cookie-httponly-unsafe-default",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "@pyramid.view.view_config(...)\ndef $VIEW($REQUEST):\n    ...\n    $RESPONSE = $REQUEST.response\n    ...\n"
            },
            {
              "pattern-inside": "def $VIEW(...):\n    ...\n    $RESPONSE = pyramid.httpexceptions.HTTPFound(...)\n    ...\n"
            }
          ]
        },
        {
          "pattern-not": "$RESPONSE.set_cookie(..., httponly=$HTTPONLY, ...)"
        },
        {
          "pattern-not": "$RESPONSE.set_cookie(..., **$PARAMS)"
        },
        {
          "pattern": "$RESPONSE.set_cookie(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.django.security.injection.csv-writer-injection.csv-writer-injection",
      "languages": [
        "python"
      ],
      "message": "Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-1236: Improper Neutralization of Formula Elements in a CSV File"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://github.com/raphaelm/defusedcsv",
          "https://owasp.org/www-community/attacks/CSV_Injection",
          "https://web.archive.org/web/20220516052229/https://www.contextis.com/us/blog/comma-separated-vulnerabilities"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "7KUK1y",
            "url": "https://semgrep.dev/playground/r/QkTQ4z/python.django.security.injection.csv-writer-injection.csv-writer-injection",
            "version_id": "QkTQ4z"
          }
        },
        "shortlink": "https://sg.run/Pw9q",
        "source": "https://semgrep.dev/r/python.django.security.injection.csv-writer-injection.csv-writer-injection",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django",
          "python"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-inside": "$WRITER = csv.writer(...)\n\n...\n\n$WRITER.$WRITE(...)\n"
            },
            {
              "pattern": "$WRITER.$WRITE(...)"
            },
            {
              "metavariable-regex": {
                "metavariable": "$WRITE",
                "regex": "^(writerow|writerows|writeheader)$"
              }
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-inside": "def $FUNC(..., $REQUEST, ...):\n  ...\n"
            },
            {
              "focus-metavariable": "$REQUEST"
            },
            {
              "metavariable-pattern": {
                "metavariable": "$REQUEST",
                "patterns": [
                  {
                    "pattern": "request"
                  },
                  {
                    "pattern-not-inside": "request.build_absolute_uri"
                  }
                ]
              }
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "fix": "True\n",
      "id": "python.jinja2.security.audit.autoescape-disabled-false.incorrect-autoescape-disabled",
      "languages": [
        "python"
      ],
      "message": "Detected a Jinja2 environment with 'autoescaping' disabled. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable 'autoescaping' by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-116: Improper Encoding or Escaping of Output"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://jinja.palletsprojects.com/en/2.11.x/api/#basics"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "QrU1Xg",
            "url": "https://semgrep.dev/playground/r/WrT2Or/python.jinja2.security.audit.autoescape-disabled-false.incorrect-autoescape-disabled",
            "version_id": "WrT2Or"
          }
        },
        "shortlink": "https://sg.run/L2L7",
        "source": "https://semgrep.dev/r/python.jinja2.security.audit.autoescape-disabled-false.incorrect-autoescape-disabled",
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b701_jinja2_autoescape_false.html",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "jinja2"
        ]
      },
      "patterns": [
        {
          "pattern": "jinja2.Environment(... , autoescape=$VAL, ...)"
        },
        {
          "pattern-not": "jinja2.Environment(... , autoescape=True, ...)"
        },
        {
          "pattern-not": "jinja2.Environment(... , autoescape=jinja2.select_autoescape(...), ...)"
        },
        {
          "focus-metavariable": "$VAL"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.flask.security.injection.tainted-sql-string.tainted-sql-string",
      "languages": [
        "python"
      ],
      "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-704: Incorrect Type Conversion or Cast"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
          "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
          "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "YGUDKQ",
            "url": "https://semgrep.dev/playground/r/w8T03J/python.flask.security.injection.tainted-sql-string.tainted-sql-string",
            "version_id": "w8T03J"
          }
        },
        "shortlink": "https://sg.run/JxZj",
        "source": "https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "sqlalchemy",
          "flask"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "\"$SQLSTR\" + ...\n"
                },
                {
                  "pattern": "\"$SQLSTR\" % ...\n"
                },
                {
                  "pattern": "\"$SQLSTR\".format(...)\n"
                },
                {
                  "pattern": "f\"$SQLSTR{...}...\"\n"
                }
              ]
            },
            {
              "metavariable-regex": {
                "metavariable": "$SQLSTR",
                "regex": "\\s*(?i)(select|delete|insert|create|update|alter|drop)\\b.*"
              }
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "flask.request.$ANYTHING"
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
                    },
                    {
                      "pattern": "$ROUTEVAR"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.pycryptodome.security.insecure-hash-algorithm-md4.insecure-hash-algorithm-md4",
      "languages": [
        "python"
      ],
      "message": "Detected MD4 hash algorithm which is considered insecure. MD4 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html",
          "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability",
          "http://2012.sharcs.org/slides/stevens.pdf",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "BYUJy4",
            "url": "https://semgrep.dev/playground/r/PkTnAP/python.pycryptodome.security.insecure-hash-algorithm-md4.insecure-hash-algorithm-md4",
            "version_id": "PkTnAP"
          }
        },
        "shortlink": "https://sg.run/Lve6",
        "source": "https://semgrep.dev/r/python.pycryptodome.security.insecure-hash-algorithm-md4.insecure-hash-algorithm-md4",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pycryptodome"
        ]
      },
      "pattern-either": [
        {
          "pattern": "Crypto.Hash.MD4.new(...)"
        },
        {
          "pattern": "Cryptodome.Hash.MD4.new (...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.audit.dangerous-subprocess-use-tainted-env-args.dangerous-subprocess-use-tainted-env-args",
      "languages": [
        "python"
      ],
      "message": "Detected subprocess function '$FUNC' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess",
          "https://docs.python.org/3/library/subprocess.html",
          "https://docs.python.org/3/library/shlex.html",
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "AbUgrZ",
            "url": "https://semgrep.dev/playground/r/o5TQo9/python.lang.security.audit.dangerous-subprocess-use-tainted-env-args.dangerous-subprocess-use-tainted-env-args",
            "version_id": "o5TQo9"
          }
        },
        "shortlink": "https://sg.run/pLGg",
        "source": "https://semgrep.dev/r/python.lang.security.audit.dangerous-subprocess-use-tainted-env-args.dangerous-subprocess-use-tainted-env-args",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-not": "subprocess.$FUNC(\"...\", ...)"
                    },
                    {
                      "pattern-not": "subprocess.$FUNC([\"...\",...], ...)"
                    },
                    {
                      "pattern-not": "subprocess.$FUNC((\"...\",...), ...)"
                    },
                    {
                      "pattern-not": "subprocess.CalledProcessError(...)"
                    },
                    {
                      "pattern-not": "subprocess.SubprocessError(...)"
                    },
                    {
                      "pattern": "subprocess.$FUNC($CMD, ...)"
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "subprocess.$FUNC(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",\"...\",...)"
                    },
                    {
                      "pattern": "subprocess.$FUNC(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\", $CMD)"
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "subprocess.$FUNC([\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",\"...\",...],...)"
                    },
                    {
                      "pattern-not": "subprocess.$FUNC((\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",\"...\",...),...)"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "subprocess.$FUNC([\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\", $CMD], ...)"
                        },
                        {
                          "pattern": "subprocess.$FUNC((\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\", $CMD), ...)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "subprocess.$FUNC(\"=~/(python)/\",\"...\",...)"
                    },
                    {
                      "pattern": "subprocess.$FUNC(\"=~/(python)/\", $CMD)"
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "subprocess.$FUNC([\"=~/(python)/\",\"...\",...],...)"
                    },
                    {
                      "pattern-not": "subprocess.$FUNC((\"=~/(python)/\",\"...\",...),...)"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "subprocess.$FUNC([\"=~/(python)/\", $CMD],...)"
                        },
                        {
                          "pattern": "subprocess.$FUNC((\"=~/(python)/\", $CMD),...)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "focus-metavariable": "$CMD"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "os.environ"
                        },
                        {
                          "pattern": "os.environ.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.environb"
                        },
                        {
                          "pattern": "os.environb.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.getenv('$ANYTHING', ...)"
                        },
                        {
                          "pattern": "os.getenvb('$ANYTHING', ...)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern": "sys.argv"
                                },
                                {
                                  "pattern": "sys.orig_argv"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = argparse.ArgumentParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = optparse.OptionParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.getopt(...)\n...\n"
                                },
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.gnu_getopt(...)\n...\n"
                                }
                              ]
                            },
                            {
                              "pattern-either": [
                                {
                                  "patterns": [
                                    {
                                      "pattern-inside": "for $O, $A in $OPTS:\n  ...\n"
                                    },
                                    {
                                      "pattern": "$A"
                                    }
                                  ]
                                },
                                {
                                  "pattern": "$ARGS"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.django.security.injection.sql.sql-injection-rawsql.sql-injection-using-rawsql",
      "languages": [
        "python"
      ],
      "message": "User-controlled data from request is passed to 'RawSQL()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use parameterized queries or escape the user-controlled data by using `params` and not using quote placeholders in the SQL string.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.0/ref/models/expressions/#django.db.models.expressions.RawSQL"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "pKUOBp",
            "url": "https://semgrep.dev/playground/r/qkTK0J/python.django.security.injection.sql.sql-injection-rawsql.sql-injection-using-rawsql",
            "version_id": "qkTK0J"
          }
        },
        "shortlink": "https://sg.run/Kl4X",
        "source": "https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-rawsql.sql-injection-using-rawsql",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "django.db.models.expressions.RawSQL(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.db.models.expressions.RawSQL(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.db.models.expressions.RawSQL(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.db.models.expressions.RawSQL(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.db.models.expressions.RawSQL(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.db.models.expressions.RawSQL(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.db.models.expressions.RawSQL(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "return django.db.models.expressions.RawSQL(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., request.$W(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.db.models.expressions.RawSQL(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.db.models.expressions.RawSQL(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.db.models.expressions.RawSQL(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.db.models.expressions.RawSQL(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.db.models.expressions.RawSQL(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.db.models.expressions.RawSQL(..., request.$W(...), ...)"
            },
            {
              "pattern": "return django.db.models.expressions.RawSQL(..., request.$W(...), ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., request.$W[...], ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.db.models.expressions.RawSQL(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.db.models.expressions.RawSQL(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.db.models.expressions.RawSQL(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.db.models.expressions.RawSQL(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.db.models.expressions.RawSQL(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.db.models.expressions.RawSQL(..., request.$W[...], ...)"
            },
            {
              "pattern": "return django.db.models.expressions.RawSQL(..., request.$W[...], ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., $S % request.$W, ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "django.db.models.expressions.RawSQL(..., request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.db.models.expressions.RawSQL(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.db.models.expressions.RawSQL(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.db.models.expressions.RawSQL(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.db.models.expressions.RawSQL(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.db.models.expressions.RawSQL(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.db.models.expressions.RawSQL(..., request.$W, ...)"
            },
            {
              "pattern": "return django.db.models.expressions.RawSQL(..., request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.db.models.expressions.RawSQL($STR % (..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.db.models.expressions.RawSQL($STR % (..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.db.models.expressions.RawSQL($STR % (..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.db.models.expressions.RawSQL($STR % (..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\ndjango.db.models.expressions.RawSQL($INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\ndjango.db.models.expressions.RawSQL($INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\ndjango.db.models.expressions.RawSQL($INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\ndjango.db.models.expressions.RawSQL($INTERM, ...)\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.aws-lambda.security.dangerous-system-call.dangerous-system-call",
      "languages": [
        "python"
      ],
      "message": "Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.",
      "metadata": {
        "asvs": {
          "control_id": "5.2.4 Dyanmic Code Execution Features",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "QrUkg6",
            "url": "https://semgrep.dev/playground/r/NdTQlw/python.aws-lambda.security.dangerous-system-call.dangerous-system-call",
            "version_id": "NdTQlw"
          }
        },
        "shortlink": "https://sg.run/jDvN",
        "source": "https://semgrep.dev/r/python.aws-lambda.security.dangerous-system-call.dangerous-system-call",
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern": "$CMD"
            },
            {
              "pattern-either": [
                {
                  "pattern": "os.system($CMD,...)"
                },
                {
                  "pattern": "os.popen($CMD,...)"
                },
                {
                  "pattern": "os.popen2($CMD,...)"
                },
                {
                  "pattern": "os.popen3($CMD,...)"
                },
                {
                  "pattern": "os.popen4($CMD,...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.django.security.audit.avoid-insecure-deserialization.avoid-insecure-deserialization",
      "languages": [
        "python"
      ],
      "message": "Avoid using insecure deserialization library, backed by `pickle`, `_pickle`, `cpickle`, `dill`, `shelve`, or `yaml`, which are known to lead to remote code execution vulnerabilities.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-502: Deserialization of Untrusted Data"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A08:2017 - Insecure Deserialization",
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/pickle.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "OrU3e6",
            "url": "https://semgrep.dev/playground/r/BjTGwp/python.django.security.audit.avoid-insecure-deserialization.avoid-insecure-deserialization",
            "version_id": "BjTGwp"
          }
        },
        "shortlink": "https://sg.run/9oyr",
        "source": "https://semgrep.dev/r/python.django.security.audit.avoid-insecure-deserialization.avoid-insecure-deserialization",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern": "pickle.$PICKLEFUNC(...)\n"
                    },
                    {
                      "pattern": "_pickle.$PICKLEFUNC(...)\n"
                    },
                    {
                      "pattern": "cPickle.$PICKLEFUNC(...)\n"
                    },
                    {
                      "pattern": "shelve.$PICKLEFUNC(...)\n"
                    }
                  ]
                },
                {
                  "metavariable-regex": {
                    "metavariable": "$PICKLEFUNC",
                    "regex": "dumps|dump|load|loads"
                  }
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern": "dill.$DILLFUNC(...)"
                },
                {
                  "metavariable-regex": {
                    "metavariable": "$DILLFUNC",
                    "regex": "dump|dump_session|dumps|load|load_session|loads"
                  }
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern": "yaml.$YAMLFUNC(...)"
                },
                {
                  "pattern-not": "yaml.$YAMLFUNC(..., Dumper=SafeDumper, ...)"
                },
                {
                  "pattern-not": "yaml.$YAMLFUNC(..., Dumper=yaml.SafeDumper, ...)"
                },
                {
                  "pattern-not": "yaml.$YAMLFUNC(..., Loader=SafeLoader, ...)"
                },
                {
                  "pattern-not": "yaml.$YAMLFUNC(..., Loader=yaml.SafeLoader, ...)"
                },
                {
                  "metavariable-regex": {
                    "metavariable": "$YAMLFUNC",
                    "regex": "dump|dump_all|load|load_all"
                  }
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-inside": "def $INSIDE(..., $PARAM, ...):\n  ...\n"
                },
                {
                  "pattern-either": [
                    {
                      "pattern": "request.$REQFUNC(...)"
                    },
                    {
                      "pattern": "request.$REQFUNC.get(...)"
                    },
                    {
                      "pattern": "request.$REQFUNC[...]"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.django.security.injection.path-traversal.path-traversal-open.path-traversal-open",
      "languages": [
        "python"
      ],
      "message": "Found request data in a call to 'open'.  Ensure the request data is validated or sanitized,  otherwise it could result in path traversal attacks and  therefore sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "oqUe7z",
            "url": "https://semgrep.dev/playground/r/RGTwXA/python.django.security.injection.path-traversal.path-traversal-open.path-traversal-open",
            "version_id": "RGTwXA"
          }
        },
        "shortlink": "https://sg.run/W8qg",
        "source": "https://semgrep.dev/r/python.django.security.injection.path-traversal.path-traversal-open.path-traversal-open",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "open(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "open(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "open(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "open(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nopen(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nopen(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nopen(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nopen(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nopen(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$A = open(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$A = open(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "$A = open(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "$A = open(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "return open(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "return open(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "return open(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "return open(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nwith open(..., $DATA, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "open(..., request.$W(...), ...)"
            },
            {
              "pattern": "open(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "open(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "open(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nopen(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nopen(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nopen(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nopen(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nopen(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$A = open(..., request.$W(...), ...)"
            },
            {
              "pattern": "$A = open(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "$A = open(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "$A = open(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "return open(..., request.$W(...), ...)"
            },
            {
              "pattern": "return open(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "return open(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "return open(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nwith open(..., $DATA, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "open(..., request.$W[...], ...)"
            },
            {
              "pattern": "open(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "open(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "open(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nopen(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nopen(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nopen(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nopen(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nopen(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$A = open(..., request.$W[...], ...)"
            },
            {
              "pattern": "$A = open(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "$A = open(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "$A = open(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "return open(..., request.$W[...], ...)"
            },
            {
              "pattern": "return open(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "return open(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "return open(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nwith open(..., $DATA, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "open(..., request.$W, ...)"
            },
            {
              "pattern": "open(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "open(..., $S % request.$W, ...)"
            },
            {
              "pattern": "open(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\nopen(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nopen(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nopen(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nopen(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nopen(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\nopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
            },
            {
              "pattern": "$A = open(..., request.$W, ...)"
            },
            {
              "pattern": "$A = open(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "$A = open(..., $S % request.$W, ...)"
            },
            {
              "pattern": "$A = open(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "return open(..., request.$W, ...)"
            },
            {
              "pattern": "return open(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "return open(..., $S % request.$W, ...)"
            },
            {
              "pattern": "return open(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\nwith open(..., $DATA, ...) as $FD:\n  ...\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.django.security.injection.code.user-eval.user-eval",
      "languages": [
        "python"
      ],
      "message": "Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html",
          "https://owasp.org/www-community/attacks/Code_Injection"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "DbUpDQ",
            "url": "https://semgrep.dev/playground/r/ExTYJB/python.django.security.injection.code.user-eval.user-eval",
            "version_id": "ExTYJB"
          }
        },
        "shortlink": "https://sg.run/PJDW",
        "source": "https://semgrep.dev/r/python.django.security.injection.code.user-eval.user-eval",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $F(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "eval(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\neval(..., $V, ...)\n"
            },
            {
              "pattern": "eval(..., request.$W(...), ...)"
            },
            {
              "pattern": "$V = request.$W(...)\n...\neval(..., $V, ...)\n"
            },
            {
              "pattern": "eval(..., request.$W[...], ...)"
            },
            {
              "pattern": "$V = request.$W[...]\n...\neval(..., $V, ...)\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.flask.security.injection.ssrf-requests.ssrf-requests",
      "languages": [
        "python"
      ],
      "message": "Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Server_Side_Request_Forgery"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "WAUoRx",
            "url": "https://semgrep.dev/playground/r/zyT0e1/python.flask.security.injection.ssrf-requests.ssrf-requests",
            "version_id": "zyT0e1"
          }
        },
        "shortlink": "https://sg.run/J9LW",
        "source": "https://semgrep.dev/r/python.flask.security.injection.ssrf-requests.ssrf-requests",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "flask"
        ]
      },
      "pattern-either": [
        {
          "patterns": [
            {
              "pattern": "requests.$FUNC(...)"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "@$APP.$ROUTE_METHOD($ROUTE, ...)\ndef $ROUTE_FUNC(..., $ROUTEVAR, ...):\n  ...\n  requests.$FUNC(..., <... $ROUTEVAR ...>, ...)\n"
                },
                {
                  "pattern-inside": "@$APP.$ROUTE_METHOD($ROUTE, ...)\ndef $ROUTE_FUNC(..., $ROUTEVAR, ...):\n  ...\n  $INTERM = <... $ROUTEVAR ...>\n  ...\n  requests.$FUNC(..., <... $INTERM ...>, ...)\n"
                }
              ]
            }
          ]
        },
        {
          "pattern": "requests.$FUNC(..., <... flask.request.$W.get(...) ...>, ...)"
        },
        {
          "pattern": "requests.$FUNC(..., <... flask.request.$W[...] ...>, ...)"
        },
        {
          "pattern": "requests.$FUNC(..., <... flask.request.$W(...) ...>, ...)"
        },
        {
          "pattern": "requests.$FUNC(..., <... flask.request.$W ...>, ...)"
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W.get(...) ...>\n...\nrequests.$FUNC(<... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "requests.$FUNC(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W[...] ...>\n...\nrequests.$FUNC(<... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "requests.$FUNC(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W(...) ...>\n...\nrequests.$FUNC(<... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "requests.$FUNC(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W ...>\n...\nrequests.$FUNC(<... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "requests.$FUNC(...)"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.cryptography.security.mode-without-authentication.crypto-mode-without-authentication",
      "languages": [
        "python"
      ],
      "message": "An encryption mode of operation is being used without proper message authentication.  This can potentially result in the encrypted content to be decrypted by an attacker.  Consider instead use an AEAD mode of operation like GCM. ",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "lBUpNZ",
            "url": "https://semgrep.dev/playground/r/RGTw5A/python.cryptography.security.mode-without-authentication.crypto-mode-without-authentication",
            "version_id": "RGTw5A"
          }
        },
        "shortlink": "https://sg.run/N9JL",
        "source": "https://semgrep.dev/r/python.cryptography.security.mode-without-authentication.crypto-mode-without-authentication",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "cryptography"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern": "Cipher(..., $HAZMAT_MODE(...),...)\n"
                },
                {
                  "pattern-not-inside": "Cipher(..., $HAZMAT_MODE(...),...)\n...\nHMAC(...)\n"
                },
                {
                  "pattern-not-inside": "Cipher(..., $HAZMAT_MODE(...),...)\n...\nhmac.HMAC(...)\n"
                }
              ]
            }
          ]
        },
        {
          "metavariable-pattern": {
            "metavariable": "$HAZMAT_MODE",
            "patterns": [
              {
                "pattern-either": [
                  {
                    "pattern": "modes.CTR"
                  },
                  {
                    "pattern": "modes.CBC"
                  },
                  {
                    "pattern": "modes.CFB"
                  },
                  {
                    "pattern": "modes.OFB"
                  }
                ]
              }
            ]
          }
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.lang.security.dangerous-subinterpreters-run-string.dangerous-subinterpreters-run-string",
      "languages": [
        "python"
      ],
      "message": "Found user controlled content in `run_string`. This is dangerous because it allows a malicious actor to run arbitrary Python code.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://bugs.python.org/issue43472",
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "PeURWr",
            "url": "https://semgrep.dev/playground/r/9lTnDy/python.lang.security.dangerous-subinterpreters-run-string.dangerous-subinterpreters-run-string",
            "version_id": "9lTnDy"
          }
        },
        "shortlink": "https://sg.run/bPop",
        "source": "https://semgrep.dev/r/python.lang.security.dangerous-subinterpreters-run-string.dangerous-subinterpreters-run-string",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-inside": "_xxsubinterpreters.run_string($ID, $PAYLOAD, ...)\n"
            },
            {
              "pattern-not": "_xxsubinterpreters.run_string($ID, \"...\", ...)\n"
            },
            {
              "pattern": "$PAYLOAD"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "flask.request.form.get(...)"
                        },
                        {
                          "pattern": "flask.request.form[...]"
                        },
                        {
                          "pattern": "flask.request.args.get(...)"
                        },
                        {
                          "pattern": "flask.request.args[...]"
                        },
                        {
                          "pattern": "flask.request.values.get(...)"
                        },
                        {
                          "pattern": "flask.request.values[...]"
                        },
                        {
                          "pattern": "flask.request.cookies.get(...)"
                        },
                        {
                          "pattern": "flask.request.cookies[...]"
                        },
                        {
                          "pattern": "flask.request.stream"
                        },
                        {
                          "pattern": "flask.request.headers.get(...)"
                        },
                        {
                          "pattern": "flask.request.headers[...]"
                        },
                        {
                          "pattern": "flask.request.data"
                        },
                        {
                          "pattern": "flask.request.full_path"
                        },
                        {
                          "pattern": "flask.request.url"
                        },
                        {
                          "pattern": "flask.request.json"
                        },
                        {
                          "pattern": "flask.request.get_json()"
                        },
                        {
                          "pattern": "flask.request.view_args.get(...)"
                        },
                        {
                          "pattern": "flask.request.view_args[...]"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
                            },
                            {
                              "pattern": "$ROUTEVAR"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "def $FUNC(request, ...):\n  ...\n"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "request.$PROPERTY.get(...)"
                        },
                        {
                          "pattern": "request.$PROPERTY[...]"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "@rest_framework.decorators.api_view(...)\ndef $FUNC($REQ, ...):\n  ...\n"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.views.APIView, ...):\n  ...\n"
                                },
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.generics.GenericAPIView, ...):\n  ...                              \n"
                                }
                              ]
                            },
                            {
                              "pattern-inside": "def $METHOD(self, $REQ, ...):\n  ...\n"
                            },
                            {
                              "metavariable-regex": {
                                "metavariable": "$METHOD",
                                "regex": "(get|post|put|patch|delete|head)"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "$REQ.POST.get(...)"
                        },
                        {
                          "pattern": "$REQ.POST[...]"
                        },
                        {
                          "pattern": "$REQ.FILES.get(...)"
                        },
                        {
                          "pattern": "$REQ.FILES[...]"
                        },
                        {
                          "pattern": "$REQ.DATA.get(...)"
                        },
                        {
                          "pattern": "$REQ.DATA[...]"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS.get(...)"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS[...]"
                        },
                        {
                          "pattern": "$REQ.data.get(...)"
                        },
                        {
                          "pattern": "$REQ.data[...]"
                        },
                        {
                          "pattern": "$REQ.query_params.get(...)"
                        },
                        {
                          "pattern": "$REQ.query_params[...]"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.stream"
                        },
                        {
                          "pattern": "$REQ.stream"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.StreamRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.DatagramRequestHandler, ...):\n  ...\n"
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "self.requestline"
                        },
                        {
                          "pattern": "self.path"
                        },
                        {
                          "pattern": "self.headers[...]"
                        },
                        {
                          "pattern": "self.headers.get(...)"
                        },
                        {
                          "pattern": "self.rfile"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "@pyramid.view.view_config( ... )\ndef $VIEW($REQ):\n  ...\n"
                    },
                    {
                      "pattern": "$REQ.$ANYTHING"
                    },
                    {
                      "pattern-not": "$REQ.dbsession"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.django.security.injection.code.user-exec-format-string.user-exec-format-string",
      "languages": [
        "python"
      ],
      "message": "Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Code_Injection"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "WAUovx",
            "url": "https://semgrep.dev/playground/r/7ZTYLz/python.django.security.injection.code.user-exec-format-string.user-exec-format-string",
            "version_id": "7ZTYLz"
          }
        },
        "shortlink": "https://sg.run/J9JW",
        "source": "https://semgrep.dev/r/python.django.security.injection.code.user-exec-format-string.user-exec-format-string",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $F(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "exec(..., $STR % request.$W.get(...), ...)"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\nexec(..., $STR % $V, ...)\n"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\n$S = $STR % $V\n...\nexec(..., $S, ...)\n"
            },
            {
              "pattern": "exec(..., \"...\" % request.$W(...), ...)"
            },
            {
              "pattern": "$V = request.$W(...)\n...\nexec(..., $STR % $V, ...)\n"
            },
            {
              "pattern": "$V = request.$W(...)\n...\n$S = $STR % $V\n...\nexec(..., $S, ...)\n"
            },
            {
              "pattern": "exec(..., $STR % request.$W[...], ...)"
            },
            {
              "pattern": "$V = request.$W[...]\n...\nexec(..., $STR % $V, ...)\n"
            },
            {
              "pattern": "$V = request.$W[...]\n...\n$S = $STR % $V\n...\nexec(..., $S, ...)\n"
            },
            {
              "pattern": "exec(..., $STR.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\nexec(..., $STR.format(..., $V, ...), ...)\n"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\n$S = $STR.format(..., $V, ...)\n...\nexec(..., $S, ...)\n"
            },
            {
              "pattern": "exec(..., $STR.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "$V = request.$W(...)\n...\nexec(..., $STR.format(..., $V, ...), ...)\n"
            },
            {
              "pattern": "$V = request.$W(...)\n...\n$S = $STR.format(..., $V, ...)\n...\nexec(..., $S, ...)\n"
            },
            {
              "pattern": "exec(..., $STR.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "$V = request.$W[...]\n...\nexec(..., $STR.format(..., $V, ...), ...)\n"
            },
            {
              "pattern": "$V = request.$W[...]\n...\n$S = $STR.format(..., $V, ...)\n...\nexec(..., $S, ...)\n"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\nexec(..., f\"...{$V}...\", ...)\n"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\n$S = f\"...{$V}...\"\n...\nexec(..., $S, ...)\n"
            },
            {
              "pattern": "$V = request.$W(...)\n...\nexec(..., f\"...{$V}...\", ...)\n"
            },
            {
              "pattern": "$V = request.$W(...)\n...\n$S = f\"...{$V}...\"\n...\nexec(..., $S, ...)\n"
            },
            {
              "pattern": "$V = request.$W[...]\n...\nexec(..., f\"...{$V}...\", ...)\n"
            },
            {
              "pattern": "$V = request.$W[...]\n...\n$S = f\"...{$V}...\"\n...\nexec(..., $S, ...)\n"
            },
            {
              "pattern": "exec(..., base64.decodestring($S.format(..., request.$W.get(...), ...), ...), ...)"
            },
            {
              "pattern": "exec(..., base64.decodestring($S % request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "exec(..., base64.decodestring(f\"...{request.$W.get(...)}...\", ...), ...)"
            },
            {
              "pattern": "exec(..., base64.decodestring(request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "exec(..., base64.decodestring(bytes($S.format(..., request.$W.get(...), ...), ...), ...), ...)"
            },
            {
              "pattern": "exec(..., base64.decodestring(bytes($S % request.$W.get(...), ...), ...), ...)"
            },
            {
              "pattern": "exec(..., base64.decodestring(bytes(f\"...{request.$W.get(...)}...\", ...), ...), ...)"
            },
            {
              "pattern": "exec(..., base64.decodestring(bytes(request.$W.get(...), ...), ...), ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nexec(..., base64.decodestring($DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = base64.decodestring($DATA, ...)\n...\nexec(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nexec(..., base64.decodestring(bytes($DATA, ...), ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = base64.decodestring(bytes($DATA, ...), ...)\n...\nexec(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nexec(..., base64.decodestring($DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = base64.decodestring($DATA, ...)\n...\nexec(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nexec(..., base64.decodestring(bytes($DATA, ...), ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = base64.decodestring(bytes($DATA, ...), ...)\n...\nexec(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nexec(..., base64.decodestring($DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = base64.decodestring($DATA, ...)\n...\nexec(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nexec(..., base64.decodestring(bytes($DATA, ...), ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = base64.decodestring(bytes($DATA, ...), ...)\n...\nexec(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nexec(..., base64.decodestring($DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = base64.decodestring($DATA, ...)\n...\nexec(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nexec(..., base64.decodestring(bytes($DATA, ...), ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = base64.decodestring(bytes($DATA, ...), ...)\n...\nexec(..., $INTERM, ...)\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "regex": "(shell\\s*=\\s*)True",
        "replacement": "\\1False"
      },
      "id": "python.lang.security.audit.subprocess-shell-true.subprocess-shell-true",
      "languages": [
        "python"
      ],
      "message": "Found 'subprocess' function '$FUNC' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess",
          "https://docs.python.org/3/library/subprocess.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "DbUpz2",
            "url": "https://semgrep.dev/playground/r/6xT0p5/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true",
            "version_id": "6xT0p5"
          }
        },
        "shortlink": "https://sg.run/J92w",
        "source": "https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true",
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b602_subprocess_popen_with_shell_equals_true.html",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern": "subprocess.$FUNC(..., shell=True, ...)"
        },
        {
          "pattern-not": "subprocess.$FUNC(\"...\", shell=True, ...)"
        }
      ],
      "severity": "ERROR"
    },
    {
      "fix": "None\n",
      "id": "python.django.security.passwords.use-none-for-password-default.use-none-for-password-default",
      "languages": [
        "python"
      ],
      "message": "'$VAR' is using the empty string as its default and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the default value to 'None' or call 'set_unusable_password()'.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-521: Weak Password Requirements"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.0/ref/contrib/auth/#django.contrib.auth.models.User.set_password"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "yyUn6Z",
            "url": "https://semgrep.dev/playground/r/qkTgLQ/python.django.security.passwords.use-none-for-password-default.use-none-for-password-default",
            "version_id": "qkTgLQ"
          }
        },
        "shortlink": "https://sg.run/zvBW",
        "source": "https://semgrep.dev/r/python.django.security.passwords.use-none-for-password-default.use-none-for-password-default",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "$VAR = request.$W.get($X, $EMPTY)\n...\n$MODEL.set_password($VAR)\n...\n$MODEL.save(...)\n"
            },
            {
              "pattern": "def $F(..., $VAR=$EMPTY, ...):\n  ...\n  $MODEL.set_password($VAR)\n"
            }
          ]
        },
        {
          "focus-metavariable": "$EMPTY"
        }
      ],
      "severity": "ERROR"
    },
    {
      "fix-regex": {
        "regex": "MONGODB-CR",
        "replacement": "SCRAM-SHA-256"
      },
      "id": "python.pymongo.security.mongodb.mongo-client-bad-auth",
      "languages": [
        "python"
      ],
      "message": "Warning MONGODB-CR was deprecated with the release of MongoDB 3.6 and is no longer supported by MongoDB 4.0 (see https://api.mongodb.com/python/current/examples/authentication.html for details).",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-477: Use of Obsolete Function"
        ],
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "references": [
          "https://cwe.mitre.org/data/definitions/477.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "d8UlOX",
            "url": "https://semgrep.dev/playground/r/BjTG2w/python.pymongo.security.mongodb.mongo-client-bad-auth",
            "version_id": "BjTG2w"
          }
        },
        "shortlink": "https://sg.run/YXRd",
        "source": "https://semgrep.dev/r/python.pymongo.security.mongodb.mongo-client-bad-auth",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pymongo"
        ]
      },
      "pattern": "pymongo.MongoClient(..., authMechanism='MONGODB-CR')\n",
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.dangerous-system-call.dangerous-system-call",
      "languages": [
        "python"
      ],
      "message": "Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.",
      "metadata": {
        "asvs": {
          "control_id": "5.2.4 Dyanmic Code Execution Features",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "5rUoP1",
            "url": "https://semgrep.dev/playground/r/rxT8P4/python.lang.security.dangerous-system-call.dangerous-system-call",
            "version_id": "rxT8P4"
          }
        },
        "shortlink": "https://sg.run/k0W7",
        "source": "https://semgrep.dev/r/python.lang.security.dangerous-system-call.dangerous-system-call",
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-not": "os.$W(\"...\", ...)"
            },
            {
              "pattern-either": [
                {
                  "pattern": "os.system(...)"
                },
                {
                  "pattern": "getattr(os, \"system\")(...)"
                },
                {
                  "pattern": "__import__(\"os\").system(...)"
                },
                {
                  "pattern": "getattr(__import__(\"os\"), \"system\")(...)"
                },
                {
                  "pattern": "$X = __import__(\"os\")\n...\n$X.system(...)\n"
                },
                {
                  "pattern": "$X = __import__(\"os\")\n...\ngetattr($X, \"system\")(...)\n"
                },
                {
                  "pattern": "$X = getattr(os, \"system\")\n...\n$X(...)\n"
                },
                {
                  "pattern": "$X = __import__(\"os\")\n...\n$Y = getattr($X, \"system\")\n...\n$Y(...)\n"
                },
                {
                  "pattern": "os.popen(...)"
                },
                {
                  "pattern": "os.popen2(...)"
                },
                {
                  "pattern": "os.popen3(...)"
                },
                {
                  "pattern": "os.popen4(...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "flask.request.form.get(...)"
                        },
                        {
                          "pattern": "flask.request.form[...]"
                        },
                        {
                          "pattern": "flask.request.args.get(...)"
                        },
                        {
                          "pattern": "flask.request.args[...]"
                        },
                        {
                          "pattern": "flask.request.values.get(...)"
                        },
                        {
                          "pattern": "flask.request.values[...]"
                        },
                        {
                          "pattern": "flask.request.cookies.get(...)"
                        },
                        {
                          "pattern": "flask.request.cookies[...]"
                        },
                        {
                          "pattern": "flask.request.stream"
                        },
                        {
                          "pattern": "flask.request.headers.get(...)"
                        },
                        {
                          "pattern": "flask.request.headers[...]"
                        },
                        {
                          "pattern": "flask.request.data"
                        },
                        {
                          "pattern": "flask.request.full_path"
                        },
                        {
                          "pattern": "flask.request.url"
                        },
                        {
                          "pattern": "flask.request.json"
                        },
                        {
                          "pattern": "flask.request.get_json()"
                        },
                        {
                          "pattern": "flask.request.view_args.get(...)"
                        },
                        {
                          "pattern": "flask.request.view_args[...]"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
                            },
                            {
                              "pattern": "$ROUTEVAR"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "def $FUNC(request, ...):\n  ...\n"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "request.$PROPERTY.get(...)"
                        },
                        {
                          "pattern": "request.$PROPERTY[...]"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "@rest_framework.decorators.api_view(...)\ndef $FUNC($REQ, ...):\n  ...\n"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.views.APIView, ...):\n  ...\n"
                                },
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.generics.GenericAPIView, ...):\n  ...                              \n"
                                }
                              ]
                            },
                            {
                              "pattern-inside": "def $METHOD(self, $REQ, ...):\n  ...\n"
                            },
                            {
                              "metavariable-regex": {
                                "metavariable": "$METHOD",
                                "regex": "(get|post|put|patch|delete|head)"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "$REQ.POST.get(...)"
                        },
                        {
                          "pattern": "$REQ.POST[...]"
                        },
                        {
                          "pattern": "$REQ.FILES.get(...)"
                        },
                        {
                          "pattern": "$REQ.FILES[...]"
                        },
                        {
                          "pattern": "$REQ.DATA.get(...)"
                        },
                        {
                          "pattern": "$REQ.DATA[...]"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS.get(...)"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS[...]"
                        },
                        {
                          "pattern": "$REQ.data.get(...)"
                        },
                        {
                          "pattern": "$REQ.data[...]"
                        },
                        {
                          "pattern": "$REQ.query_params.get(...)"
                        },
                        {
                          "pattern": "$REQ.query_params[...]"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.stream"
                        },
                        {
                          "pattern": "$REQ.stream"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.StreamRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.DatagramRequestHandler, ...):\n  ...\n"
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "self.requestline"
                        },
                        {
                          "pattern": "self.path"
                        },
                        {
                          "pattern": "self.headers[...]"
                        },
                        {
                          "pattern": "self.headers.get(...)"
                        },
                        {
                          "pattern": "self.rfile"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "@pyramid.view.view_config( ... )\ndef $VIEW($REQ):\n  ...\n"
                    },
                    {
                      "pattern": "$REQ.$ANYTHING"
                    },
                    {
                      "pattern-not": "$REQ.dbsession"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.aws-lambda.security.tainted-html-string.tainted-html-string",
      "languages": [
        "python"
      ],
      "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "JDUlwy",
            "url": "https://semgrep.dev/playground/r/nWTwKe/python.aws-lambda.security.tainted-html-string.tainted-html-string",
            "version_id": "nWTwKe"
          }
        },
        "shortlink": "https://sg.run/8zNy",
        "source": "https://semgrep.dev/r/python.aws-lambda.security.tainted-html-string.tainted-html-string",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "aws-lambda"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "\"$HTMLSTR\" % ..."
                        },
                        {
                          "pattern": "\"$HTMLSTR\".format(...)"
                        },
                        {
                          "pattern": "\"$HTMLSTR\" + ..."
                        },
                        {
                          "pattern": "f\"$HTMLSTR{...}...\""
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "$HTML = \"$HTMLSTR\"\n...\n"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "$HTML % ..."
                        },
                        {
                          "pattern": "$HTML.format(...)"
                        },
                        {
                          "pattern": "$HTML + ..."
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "metavariable-pattern": {
                "language": "generic",
                "metavariable": "$HTMLSTR",
                "pattern": "<$TAG ..."
              }
            },
            {
              "pattern-not-inside": "print(...)\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "True\n",
      "id": "python.pyramid.audit.set-cookie-httponly-unsafe-value.pyramid-set-cookie-httponly-unsafe-value",
      "languages": [
        "python"
      ],
      "message": "Found a Pyramid cookie without the httponly option correctly set. Pyramid cookies should be handled securely by setting httponly=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"
        ],
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://owasp.org/www-community/controls/SecureCookieAttribute",
          "https://owasp.org/www-community/HttpOnly",
          "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#httponly-attribute"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "ZqU37W",
            "url": "https://semgrep.dev/playground/r/zyTXqy/python.pyramid.audit.set-cookie-httponly-unsafe-value.pyramid-set-cookie-httponly-unsafe-value",
            "version_id": "zyTXqy"
          }
        },
        "shortlink": "https://sg.run/JbqP",
        "source": "https://semgrep.dev/r/python.pyramid.audit.set-cookie-httponly-unsafe-value.pyramid-set-cookie-httponly-unsafe-value",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "@pyramid.view.view_config(...)\ndef $VIEW($REQUEST):\n    ...\n    $RESPONSE = $REQUEST.response\n    ...\n"
            },
            {
              "pattern-inside": "def $VIEW(...):\n    ...\n    $RESPONSE = pyramid.httpexceptions.HTTPFound(...)\n    ...\n"
            }
          ]
        },
        {
          "pattern-not": "$RESPONSE.set_cookie(..., **$PARAMS)"
        },
        {
          "pattern": "$RESPONSE.set_cookie(..., httponly=$HTTPONLY, ...)"
        },
        {
          "pattern": "$HTTPONLY"
        },
        {
          "metavariable-pattern": {
            "metavariable": "$HTTPONLY",
            "pattern": "False\n"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated",
      "languages": [
        "python"
      ],
      "message": "'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use that to wrap a socket.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-326: Inadequate Encryption Strength"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/ssl.html#ssl.wrap_socket",
          "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_socket"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "BYUN2e",
            "url": "https://semgrep.dev/playground/r/YDT8XN/python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated",
            "version_id": "YDT8XN"
          }
        },
        "shortlink": "https://sg.run/PJOY",
        "source": "https://semgrep.dev/r/python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern": "ssl.wrap_socket(...)",
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5",
      "languages": [
        "python"
      ],
      "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
      "metadata": {
        "asvs": {
          "control_id": "6.2.2 Insecure Custom Algorithm",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms",
          "section": "V6 Stored Cryptography Verification Requirements",
          "version": "4"
        },
        "bandit-code": "B303",
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html",
          "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability",
          "http://2012.sharcs.org/slides/stevens.pdf",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "PeU2e2",
            "url": "https://semgrep.dev/playground/r/O9TZoR/python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5",
            "version_id": "O9TZoR"
          }
        },
        "shortlink": "https://sg.run/vYrY",
        "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern": "hashlib.md5(...)",
      "severity": "WARNING"
    },
    {
      "id": "python.django.security.injection.open-redirect.open-redirect",
      "languages": [
        "python"
      ],
      "message": "Data from request ($DATA) is passed to redirect(). This is an open redirect and could be exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url(). See https://cwe.mitre.org/data/definitions/601.html for more information.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://www.djm.org.uk/posts/djangos-little-protections-word-redirect-dangers/",
          "https://github.com/django/django/blob/d1b7bd030b1db111e1a3505b1fc029ab964382cc/django/utils/http.py#L231"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "PeUZgr",
            "url": "https://semgrep.dev/playground/r/JdTZJ6/python.django.security.injection.open-redirect.open-redirect",
            "version_id": "JdTZJ6"
          }
        },
        "shortlink": "https://sg.run/Ave2",
        "source": "https://semgrep.dev/r/python.django.security.injection.open-redirect.open-redirect",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n"
        },
        {
          "pattern-not-inside": "def $FUNC(...):\n  ...\n  django.utils.http.is_safe_url(...)\n  ...\n"
        },
        {
          "pattern-not-inside": "def $FUNC(...):\n  ...\n  if <... django.utils.http.is_safe_url(...) ...>:\n    ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "django.shortcuts.redirect(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.shortcuts.redirect(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.shortcuts.redirect(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.shortcuts.redirect(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.shortcuts.redirect(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.shortcuts.redirect(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., request.$W(...), ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.shortcuts.redirect(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.shortcuts.redirect(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.shortcuts.redirect(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.shortcuts.redirect(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.shortcuts.redirect(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., request.$W(...), ...)"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., request.$W(...), ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., request.$W[...], ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.shortcuts.redirect(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.shortcuts.redirect(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.shortcuts.redirect(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.shortcuts.redirect(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.shortcuts.redirect(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., request.$W[...], ...)"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., request.$W[...], ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., request.$W, ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., $S % request.$W, ...)"
            },
            {
              "pattern": "django.shortcuts.redirect(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.shortcuts.redirect(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.shortcuts.redirect(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.shortcuts.redirect(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.shortcuts.redirect(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.shortcuts.redirect(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\ndjango.shortcuts.redirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., request.$W, ...)"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., $S % request.$W, ...)"
            },
            {
              "pattern": "$A = django.shortcuts.redirect(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., request.$W, ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., $S % request.$W, ...)"
            },
            {
              "pattern": "return django.shortcuts.redirect(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponseRedirect(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponseRedirect(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponseRedirect(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponseRedirect(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponseRedirect(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., request.$W(...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponseRedirect(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponseRedirect(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponseRedirect(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponseRedirect(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponseRedirect(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., request.$W(...), ...)"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., request.$W(...), ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., request.$W[...], ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponseRedirect(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponseRedirect(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponseRedirect(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponseRedirect(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponseRedirect(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., request.$W[...], ...)"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., request.$W[...], ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., request.$W, ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., $S % request.$W, ...)"
            },
            {
              "pattern": "django.http.HttpResponseRedirect(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponseRedirect(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponseRedirect(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponseRedirect(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponseRedirect(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponseRedirect(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\ndjango.http.HttpResponseRedirect(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., request.$W, ...)"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., $S % request.$W, ...)"
            },
            {
              "pattern": "$A = django.http.HttpResponseRedirect(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., request.$W, ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., $S % request.$W, ...)"
            },
            {
              "pattern": "return django.http.HttpResponseRedirect(..., f\"...{request.$W}...\", ...)"
            }
          ]
        },
        {
          "metavariable-regex": {
            "metavariable": "$W",
            "regex": "(?!get_full_path)"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.flask.security.audit.debug-enabled.debug-enabled",
      "languages": [
        "python"
      ],
      "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-489: Active Debug Code"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": "A06:2017 - Security Misconfiguration",
        "references": [
          "https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "gxU1bd",
            "url": "https://semgrep.dev/playground/r/qkTPK2/python.flask.security.audit.debug-enabled.debug-enabled",
            "version_id": "qkTPK2"
          }
        },
        "shortlink": "https://sg.run/dKrd",
        "source": "https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "flask"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "import flask\n...\n"
        },
        {
          "pattern": "$APP.run(..., debug=True, ...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "True\n",
      "id": "python.pyramid.audit.csrf-origin-check-disabled-globally.pyramid-csrf-origin-check-disabled-globally",
      "languages": [
        "python"
      ],
      "message": "Automatic check of the referrer for cross-site request forgery tokens has been explicitly disabled globally, which might leave views unprotected when an unsafe CSRF storage policy is used. Use 'pyramid.config.Configurator.set_default_csrf_options(check_origin=True)' to turn the automatic check for all unsafe methods (per RFC2616).",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-352: Cross-Site Request Forgery (CSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "eqU9Le",
            "url": "https://semgrep.dev/playground/r/YDTzqN/python.pyramid.audit.csrf-origin-check-disabled-globally.pyramid-csrf-origin-check-disabled-globally",
            "version_id": "YDTzqN"
          }
        },
        "shortlink": "https://sg.run/3GeW",
        "source": "https://semgrep.dev/r/python.pyramid.audit.csrf-origin-check-disabled-globally.pyramid-csrf-origin-check-disabled-globally",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "$CONFIG.set_default_csrf_options(..., check_origin=$CHECK_ORIGIN, ...)\n"
        },
        {
          "pattern": "$CHECK_ORIGIN"
        },
        {
          "metavariable-comparison": {
            "comparison": "$CHECK_ORIGIN == False",
            "metavariable": "$CHECK_ORIGIN"
          }
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.pyramid.security.direct-use-of-response.pyramid-direct-use-of-response",
      "languages": [
        "python"
      ],
      "message": "Detected data rendered directly to the end user via 'Response'. This bypasses Pyramid's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Pyramid's template engines to safely render HTML.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "gxUeA8",
            "url": "https://semgrep.dev/playground/r/9lTEQy/python.pyramid.security.direct-use-of-response.pyramid-direct-use-of-response",
            "version_id": "9lTEQy"
          }
        },
        "shortlink": "https://sg.run/DX8G",
        "source": "https://semgrep.dev/r/python.pyramid.security.direct-use-of-response.pyramid-direct-use-of-response",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "pyramid.request.Response.text($SINK)\n"
                },
                {
                  "pattern": "pyramid.request.Response($SINK)\n"
                },
                {
                  "pattern": "$REQ.response.body = $SINK\n"
                },
                {
                  "pattern": "$REQ.response.text = $SINK\n"
                },
                {
                  "pattern": "$REQ.response.ubody = $SINK\n"
                },
                {
                  "pattern": "$REQ.response.unicode_body = $SINK\n"
                }
              ]
            },
            {
              "pattern": "$SINK"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-inside": "@pyramid.view.view_config( ... )\ndef $VIEW($REQ):\n  ...\n"
            },
            {
              "pattern": "$REQ.$ANYTHING"
            },
            {
              "pattern-not": "$REQ.dbsession"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "fix-regex": {
        "regex": "(.*)\\)",
        "replacement": "\\1, secure=True)"
      },
      "id": "python.pyramid.audit.authtkt-cookie-secure-unsafe-default.pyramid-authtkt-cookie-secure-unsafe-default",
      "languages": [
        "python"
      ],
      "message": "Found a Pyramid Authentication Ticket cookie using an unsafe default for the secure option. Pyramid cookies should be handled securely by setting secure=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
        ],
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "wdUKzn",
            "url": "https://semgrep.dev/playground/r/K3TONN/python.pyramid.audit.authtkt-cookie-secure-unsafe-default.pyramid-authtkt-cookie-secure-unsafe-default",
            "version_id": "K3TONN"
          }
        },
        "shortlink": "https://sg.run/8WxQ",
        "source": "https://semgrep.dev/r/python.pyramid.audit.authtkt-cookie-secure-unsafe-default.pyramid-authtkt-cookie-secure-unsafe-default",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-not": "pyramid.authentication.AuthTktCookieHelper(..., secure=$SECURE, ...)"
                },
                {
                  "pattern-not": "pyramid.authentication.AuthTktCookieHelper(..., **$PARAMS)"
                },
                {
                  "pattern": "pyramid.authentication.AuthTktCookieHelper(...)"
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-not": "pyramid.authentication.AuthTktAuthenticationPolicy(..., secure=$SECURE, ...)"
                },
                {
                  "pattern-not": "pyramid.authentication.AuthTktAuthenticationPolicy(..., **$PARAMS)"
                },
                {
                  "pattern": "pyramid.authentication.AuthTktAuthenticationPolicy(...)"
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.pycryptodome.security.insecure-cipher-algorithm-rc2.insecure-cipher-algorithm-rc2",
      "languages": [
        "python"
      ],
      "message": "Detected RC2 cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.",
      "metadata": {
        "bandit-code": "B304",
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/326.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "GdUYlW",
            "url": "https://semgrep.dev/playground/r/gET59j/python.pycryptodome.security.insecure-cipher-algorithm-rc2.insecure-cipher-algorithm-rc2",
            "version_id": "gET59j"
          }
        },
        "shortlink": "https://sg.run/nAbY",
        "source": "https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm-rc2.insecure-cipher-algorithm-rc2",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pycryptodome"
        ]
      },
      "pattern-either": [
        {
          "pattern": "Cryptodome.Cipher.ARC2.new(...)"
        },
        {
          "pattern": "Crypto.Cipher.ARC2.new(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.django.security.injection.ssrf.ssrf-injection-urllib.ssrf-injection-urllib",
      "languages": [
        "python"
      ],
      "message": "Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF), which could result in attackers gaining access to private organization data. To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Server_Side_Request_Forgery"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "10UKDo",
            "url": "https://semgrep.dev/playground/r/5PTYvx/python.django.security.injection.ssrf.ssrf-injection-urllib.ssrf-injection-urllib",
            "version_id": "5PTYvx"
          }
        },
        "shortlink": "https://sg.run/6n2B",
        "source": "https://semgrep.dev/r/python.django.security.injection.ssrf.ssrf-injection-urllib.ssrf-injection-urllib",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "urllib.request.urlopen(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nurllib.request.urlopen(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nurllib.request.urlopen(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nurllib.request.urlopen(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nurllib.request.urlopen(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nurllib.request.urlopen(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = urllib.request.urlopen(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "return urllib.request.urlopen(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., request.$W(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nurllib.request.urlopen(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nurllib.request.urlopen(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nurllib.request.urlopen(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nurllib.request.urlopen(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nurllib.request.urlopen(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = urllib.request.urlopen(..., request.$W(...), ...)"
            },
            {
              "pattern": "return urllib.request.urlopen(..., request.$W(...), ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., request.$W[...], ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nurllib.request.urlopen(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nurllib.request.urlopen(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nurllib.request.urlopen(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nurllib.request.urlopen(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nurllib.request.urlopen(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = urllib.request.urlopen(..., request.$W[...], ...)"
            },
            {
              "pattern": "return urllib.request.urlopen(..., request.$W[...], ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., $S % request.$W, ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "urllib.request.urlopen(..., request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\nurllib.request.urlopen(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nurllib.request.urlopen(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nurllib.request.urlopen(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nurllib.request.urlopen(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nurllib.request.urlopen(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = urllib.request.urlopen(..., request.$W, ...)"
            },
            {
              "pattern": "return urllib.request.urlopen(..., request.$W, ...)"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use",
      "languages": [
        "python"
      ],
      "message": "Detected subprocess function '$FUNC' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess",
          "https://docs.python.org/3/library/subprocess.html",
          "https://docs.python.org/3/library/shlex.html",
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "JDUz3R",
            "url": "https://semgrep.dev/playground/r/X0Tekk/python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use",
            "version_id": "X0Tekk"
          }
        },
        "shortlink": "https://sg.run/NWxp",
        "source": "https://semgrep.dev/r/python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-not": "subprocess.$FUNC(\"...\", ...)"
                    },
                    {
                      "pattern-not": "subprocess.$FUNC([\"...\",...], ...)"
                    },
                    {
                      "pattern-not": "subprocess.$FUNC((\"...\",...), ...)"
                    },
                    {
                      "pattern-not": "subprocess.CalledProcessError(...)"
                    },
                    {
                      "pattern-not": "subprocess.SubprocessError(...)"
                    },
                    {
                      "pattern": "subprocess.$FUNC($CMD, ...)"
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "subprocess.$FUNC(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",\"...\",...)"
                    },
                    {
                      "pattern": "subprocess.$FUNC(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\", $CMD)"
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "subprocess.$FUNC([\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",\"...\",...],...)"
                    },
                    {
                      "pattern-not": "subprocess.$FUNC((\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",\"...\",...),...)"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "subprocess.$FUNC([\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\", $CMD], ...)"
                        },
                        {
                          "pattern": "subprocess.$FUNC((\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\", $CMD), ...)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "subprocess.$FUNC(\"=~/(python)/\",\"...\",...)"
                    },
                    {
                      "pattern": "subprocess.$FUNC(\"=~/(python)/\", $CMD)"
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "subprocess.$FUNC([\"=~/(python)/\",\"...\",...],...)"
                    },
                    {
                      "pattern-not": "subprocess.$FUNC((\"=~/(python)/\",\"...\",...),...)"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "subprocess.$FUNC([\"=~/(python)/\", $CMD],...)"
                        },
                        {
                          "pattern": "subprocess.$FUNC((\"=~/(python)/\", $CMD),...)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "focus-metavariable": "$CMD"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "flask.request.form.get(...)"
                        },
                        {
                          "pattern": "flask.request.form[...]"
                        },
                        {
                          "pattern": "flask.request.args.get(...)"
                        },
                        {
                          "pattern": "flask.request.args[...]"
                        },
                        {
                          "pattern": "flask.request.values.get(...)"
                        },
                        {
                          "pattern": "flask.request.values[...]"
                        },
                        {
                          "pattern": "flask.request.cookies.get(...)"
                        },
                        {
                          "pattern": "flask.request.cookies[...]"
                        },
                        {
                          "pattern": "flask.request.stream"
                        },
                        {
                          "pattern": "flask.request.headers.get(...)"
                        },
                        {
                          "pattern": "flask.request.headers[...]"
                        },
                        {
                          "pattern": "flask.request.data"
                        },
                        {
                          "pattern": "flask.request.full_path"
                        },
                        {
                          "pattern": "flask.request.url"
                        },
                        {
                          "pattern": "flask.request.json"
                        },
                        {
                          "pattern": "flask.request.get_json()"
                        },
                        {
                          "pattern": "flask.request.view_args.get(...)"
                        },
                        {
                          "pattern": "flask.request.view_args[...]"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
                            },
                            {
                              "pattern": "$ROUTEVAR"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "def $FUNC(request, ...):\n  ...\n"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "request.$PROPERTY.get(...)"
                        },
                        {
                          "pattern": "request.$PROPERTY[...]"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "@rest_framework.decorators.api_view(...)\ndef $FUNC($REQ, ...):\n  ...\n"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.views.APIView, ...):\n  ...\n"
                                },
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.generics.GenericAPIView, ...):\n  ...                              \n"
                                }
                              ]
                            },
                            {
                              "pattern-inside": "def $METHOD(self, $REQ, ...):\n  ...\n"
                            },
                            {
                              "metavariable-regex": {
                                "metavariable": "$METHOD",
                                "regex": "(get|post|put|patch|delete|head)"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "$REQ.POST.get(...)"
                        },
                        {
                          "pattern": "$REQ.POST[...]"
                        },
                        {
                          "pattern": "$REQ.FILES.get(...)"
                        },
                        {
                          "pattern": "$REQ.FILES[...]"
                        },
                        {
                          "pattern": "$REQ.DATA.get(...)"
                        },
                        {
                          "pattern": "$REQ.DATA[...]"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS.get(...)"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS[...]"
                        },
                        {
                          "pattern": "$REQ.data.get(...)"
                        },
                        {
                          "pattern": "$REQ.data[...]"
                        },
                        {
                          "pattern": "$REQ.query_params.get(...)"
                        },
                        {
                          "pattern": "$REQ.query_params[...]"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.stream"
                        },
                        {
                          "pattern": "$REQ.stream"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.StreamRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.DatagramRequestHandler, ...):\n  ...\n"
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "self.requestline"
                        },
                        {
                          "pattern": "self.path"
                        },
                        {
                          "pattern": "self.headers[...]"
                        },
                        {
                          "pattern": "self.headers.get(...)"
                        },
                        {
                          "pattern": "self.rfile"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "@pyramid.view.view_config( ... )\ndef $VIEW($REQ):\n  ...\n"
                    },
                    {
                      "pattern": "$REQ.$ANYTHING"
                    },
                    {
                      "pattern-not": "$REQ.dbsession"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "fix-regex": {
        "regex": "(verify\\s*=\\s*)False",
        "replacement": "\\1True"
      },
      "id": "python.jwt.security.unverified-jwt-decode.unverified-jwt-decode",
      "languages": [
        "python"
      ],
      "message": "Detected JWT token decoded with 'verify=False'. This bypasses any integrity checks for the token which means the token could be tampered with by malicious actors. Ensure that the JWT token is verified.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-287: Improper Authentication"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A02:2017 - Broken Authentication",
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://github.com/we45/Vulnerable-Flask-App/blob/752ee16087c0bfb79073f68802d907569a1f0df7/app/app.py#L96"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "10UKjo",
            "url": "https://semgrep.dev/playground/r/A8TnR1/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode",
            "version_id": "A8TnR1"
          }
        },
        "shortlink": "https://sg.run/6nyB",
        "source": "https://semgrep.dev/r/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "jwt"
        ]
      },
      "pattern": "jwt.decode(..., verify=False, ...)\n",
      "severity": "ERROR"
    },
    {
      "id": "python.lang.security.dangerous-code-run.dangerous-interactive-code-run",
      "languages": [
        "python"
      ],
      "message": "Found user controlled data inside InteractiveConsole/InteractiveInterpreter method. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "KxUKzx",
            "url": "https://semgrep.dev/playground/r/2KT6WP/python.lang.security.dangerous-code-run.dangerous-interactive-code-run",
            "version_id": "2KT6WP"
          }
        },
        "shortlink": "https://sg.run/9pRY",
        "source": "https://semgrep.dev/r/python.lang.security.dangerous-code-run.dangerous-interactive-code-run",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$X = code.InteractiveConsole(...)\n...\n"
                },
                {
                  "pattern-inside": "$X = code.InteractiveInterpreter(...)\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "$X.push($PAYLOAD,...)\n"
                },
                {
                  "pattern-inside": "$X.runsource($PAYLOAD,...)\n"
                },
                {
                  "pattern-inside": "$X.runcode(code.compile_command($PAYLOAD),...)\n"
                },
                {
                  "pattern-inside": "$PL = code.compile_command($PAYLOAD,...)\n...\n$X.runcode($PL,...)\n"
                }
              ]
            },
            {
              "pattern": "$PAYLOAD"
            },
            {
              "pattern-not": "$X.push(\"...\",...)\n"
            },
            {
              "pattern-not": "$X.runsource(\"...\",...)\n"
            },
            {
              "pattern-not": "$X.runcode(code.compile_command(\"...\"),...)\n"
            },
            {
              "pattern-not": "$PL = code.compile_command(\"...\",...)\n...\n$X.runcode($PL,...)\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "flask.request.form.get(...)"
                        },
                        {
                          "pattern": "flask.request.form[...]"
                        },
                        {
                          "pattern": "flask.request.args.get(...)"
                        },
                        {
                          "pattern": "flask.request.args[...]"
                        },
                        {
                          "pattern": "flask.request.values.get(...)"
                        },
                        {
                          "pattern": "flask.request.values[...]"
                        },
                        {
                          "pattern": "flask.request.cookies.get(...)"
                        },
                        {
                          "pattern": "flask.request.cookies[...]"
                        },
                        {
                          "pattern": "flask.request.stream"
                        },
                        {
                          "pattern": "flask.request.headers.get(...)"
                        },
                        {
                          "pattern": "flask.request.headers[...]"
                        },
                        {
                          "pattern": "flask.request.data"
                        },
                        {
                          "pattern": "flask.request.full_path"
                        },
                        {
                          "pattern": "flask.request.url"
                        },
                        {
                          "pattern": "flask.request.json"
                        },
                        {
                          "pattern": "flask.request.get_json()"
                        },
                        {
                          "pattern": "flask.request.view_args.get(...)"
                        },
                        {
                          "pattern": "flask.request.view_args[...]"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
                            },
                            {
                              "pattern": "$ROUTEVAR"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "def $FUNC(request, ...):\n  ...\n"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "request.$PROPERTY.get(...)"
                        },
                        {
                          "pattern": "request.$PROPERTY[...]"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "@rest_framework.decorators.api_view(...)\ndef $FUNC($REQ, ...):\n  ...\n"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.views.APIView, ...):\n  ...\n"
                                },
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.generics.GenericAPIView, ...):\n  ...                              \n"
                                }
                              ]
                            },
                            {
                              "pattern-inside": "def $METHOD(self, $REQ, ...):\n  ...\n"
                            },
                            {
                              "metavariable-regex": {
                                "metavariable": "$METHOD",
                                "regex": "(get|post|put|patch|delete|head)"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "$REQ.POST.get(...)"
                        },
                        {
                          "pattern": "$REQ.POST[...]"
                        },
                        {
                          "pattern": "$REQ.FILES.get(...)"
                        },
                        {
                          "pattern": "$REQ.FILES[...]"
                        },
                        {
                          "pattern": "$REQ.DATA.get(...)"
                        },
                        {
                          "pattern": "$REQ.DATA[...]"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS.get(...)"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS[...]"
                        },
                        {
                          "pattern": "$REQ.data.get(...)"
                        },
                        {
                          "pattern": "$REQ.data[...]"
                        },
                        {
                          "pattern": "$REQ.query_params.get(...)"
                        },
                        {
                          "pattern": "$REQ.query_params[...]"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.stream"
                        },
                        {
                          "pattern": "$REQ.stream"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.StreamRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.DatagramRequestHandler, ...):\n  ...\n"
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "self.requestline"
                        },
                        {
                          "pattern": "self.path"
                        },
                        {
                          "pattern": "self.headers[...]"
                        },
                        {
                          "pattern": "self.headers.get(...)"
                        },
                        {
                          "pattern": "self.rfile"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "@pyramid.view.view_config( ... )\ndef $VIEW($REQ):\n  ...\n"
                    },
                    {
                      "pattern": "$REQ.$ANYTHING"
                    },
                    {
                      "pattern-not": "$REQ.dbsession"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.flask.security.injection.user-eval.eval-injection",
      "languages": [
        "python"
      ],
      "message": "Detected user data flowing into eval. This is code injection and should be avoided.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "0oU54W",
            "url": "https://semgrep.dev/playground/r/O9TZyD/python.flask.security.injection.user-eval.eval-injection",
            "version_id": "O9TZyD"
          }
        },
        "shortlink": "https://sg.run/5QpX",
        "source": "https://semgrep.dev/r/python.flask.security.injection.user-eval.eval-injection",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "flask"
        ]
      },
      "pattern-either": [
        {
          "patterns": [
            {
              "pattern": "eval(...)"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n  eval(..., <... $ROUTEVAR ...>, ...)\n"
                },
                {
                  "pattern-inside": "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n  $INTERM = <... $ROUTEVAR ...>\n  ...\n  eval(..., <... $INTERM ...>, ...)\n"
                }
              ]
            }
          ]
        },
        {
          "pattern": "eval(..., <... flask.request.$W.get(...) ...>, ...)"
        },
        {
          "pattern": "eval(..., <... flask.request.$W[...] ...>, ...)"
        },
        {
          "pattern": "eval(..., <... flask.request.$W(...) ...>, ...)"
        },
        {
          "pattern": "eval(..., <... flask.request.$W ...>, ...)"
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W.get(...) ...>\n...\neval(..., <... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "eval(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W[...] ...>\n...\neval(..., <... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "eval(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W(...) ...>\n...\neval(..., <... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "eval(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W ...>\n...\neval(..., <... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "eval(...)"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.aws-lambda.security.dangerous-asyncio-create-exec.dangerous-asyncio-create-exec",
      "languages": [
        "python"
      ],
      "message": "Detected 'create_subprocess_exec' function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec",
          "https://docs.python.org/3/library/shlex.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "EwUrX8",
            "url": "https://semgrep.dev/playground/r/1QTXlr/python.aws-lambda.security.dangerous-asyncio-create-exec.dangerous-asyncio-create-exec",
            "version_id": "1QTXlr"
          }
        },
        "shortlink": "https://sg.run/oyv0",
        "source": "https://semgrep.dev/r/python.aws-lambda.security.dangerous-asyncio-create-exec.dangerous-asyncio-create-exec",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern": "$CMD"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "asyncio.create_subprocess_exec($PROG, $CMD, ...)"
                },
                {
                  "pattern-inside": "asyncio.create_subprocess_exec($PROG, [$CMD, ...], ...)"
                },
                {
                  "pattern-inside": "asyncio.subprocess.create_subprocess_exec($PROG, $CMD, ...)"
                },
                {
                  "pattern-inside": "asyncio.subprocess.create_subprocess_exec($PROG, [$CMD, ...], ...)"
                },
                {
                  "pattern-inside": "asyncio.create_subprocess_exec($PROG, \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", $CMD, ...)"
                },
                {
                  "pattern-inside": "asyncio.create_subprocess_exec($PROG, [\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", $CMD, ...], ...)"
                },
                {
                  "pattern-inside": "asyncio.subprocess.create_subprocess_exec($PROG, \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", $CMD, ...)"
                },
                {
                  "pattern-inside": "asyncio.subprocess.create_subprocess_exec($PROG, [\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", $CMD, ...], ...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.cryptography.security.insufficient-dsa-key-size.insufficient-dsa-key-size",
      "languages": [
        "python"
      ],
      "message": "Detected an insufficient key size for DSA. NIST recommends a key size of 2048 or higher.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-326: Inadequate Encryption Strength"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "KxUb0x",
            "url": "https://semgrep.dev/playground/r/JdTZd6/python.cryptography.security.insufficient-dsa-key-size.insufficient-dsa-key-size",
            "version_id": "JdTZd6"
          }
        },
        "shortlink": "https://sg.run/5Qb0",
        "source": "https://semgrep.dev/r/python.cryptography.security.insufficient-dsa-key-size.insufficient-dsa-key-size",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "cryptography"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key(..., key_size=$SIZE, ...)"
            },
            {
              "pattern": "cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key($SIZE, ...)"
            }
          ]
        },
        {
          "metavariable-comparison": {
            "comparison": "$SIZE < 2048",
            "metavariable": "$SIZE"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "regex": "format",
        "replacement": "bindparams"
      },
      "id": "python.sqlalchemy.security.sqlalchemy-sql-injection.sqlalchemy-sql-injection",
      "languages": [
        "python"
      ],
      "message": "Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "BYUBWo",
            "url": "https://semgrep.dev/playground/r/xyT9Lw/python.sqlalchemy.security.sqlalchemy-sql-injection.sqlalchemy-sql-injection",
            "version_id": "xyT9Lw"
          }
        },
        "shortlink": "https://sg.run/J3Xo",
        "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-sql-injection.sqlalchemy-sql-injection",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "sqlalchemy"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "def $FUNC(...,$VAR,...):\n  ...\n  $SESSION.query(...).$SQLFUNC(\"...\".$FORMATFUNC(...,$VAR,...))\n"
            },
            {
              "pattern": "def $FUNC(...,$VAR,...):\n  ...\n  $SESSION.query.join(...).$SQLFUNC(\"...\".$FORMATFUNC(...,$VAR,...))\n"
            },
            {
              "pattern": "def $FUNC(...,$VAR,...):\n  ...\n  $SESSION.query.$SQLFUNC(\"...\".$FORMATFUNC(...,$VAR,...))\n"
            },
            {
              "pattern": "def $FUNC(...,$VAR,...):\n  ...\n  query.$SQLFUNC(\"...\".$FORMATFUNC(...,$VAR,...))\n"
            }
          ]
        },
        {
          "metavariable-regex": {
            "metavariable": "$SQLFUNC",
            "regex": "(group_by|order_by|distinct|having|filter)"
          }
        },
        {
          "metavariable-regex": {
            "metavariable": "$FORMATFUNC",
            "regex": "(?!bindparams)"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "SHA256\n",
      "id": "python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
      "languages": [
        "python"
      ],
      "message": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
      "metadata": {
        "bandit-code": "B303",
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html",
          "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability",
          "http://2012.sharcs.org/slides/stevens.pdf",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "0oU5dN",
            "url": "https://semgrep.dev/playground/r/DkToXW/python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
            "version_id": "DkToXW"
          }
        },
        "shortlink": "https://sg.run/J9Qy",
        "source": "https://semgrep.dev/r/python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "cryptography"
        ]
      },
      "patterns": [
        {
          "pattern": "cryptography.hazmat.primitives.hashes.$SHA(...)"
        },
        {
          "metavariable-pattern": {
            "metavariable": "$SHA",
            "pattern": "SHA1\n"
          }
        },
        {
          "focus-metavariable": "$SHA"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.audit.dangerous-asyncio-exec-tainted-env-args.dangerous-asyncio-exec-tainted-env-args",
      "languages": [
        "python"
      ],
      "message": "Detected subprocess function '$LOOP.subprocess_exec' with user controlled data. You may consider using 'shlex.escape()'.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec",
          "https://docs.python.org/3/library/shlex.html",
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "7KUE1E",
            "url": "https://semgrep.dev/playground/r/qkTKND/python.lang.security.audit.dangerous-asyncio-exec-tainted-env-args.dangerous-asyncio-exec-tainted-env-args",
            "version_id": "qkTKND"
          }
        },
        "shortlink": "https://sg.run/Apjp",
        "source": "https://semgrep.dev/r/python.lang.security.audit.dangerous-asyncio-exec-tainted-env-args.dangerous-asyncio-exec-tainted-env-args",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-not": "$LOOP.subprocess_exec($PROTOCOL, \"...\", ...)"
                },
                {
                  "pattern-not": "$LOOP.subprocess_exec($PROTOCOL, [\"...\",...], ...)"
                },
                {
                  "pattern": "$LOOP.subprocess_exec(...)"
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-not": "$LOOP.subprocess_exec($PROTOCOL, \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", \"...\", ...)"
                },
                {
                  "pattern": "$LOOP.subprocess_exec($PROTOCOL, \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\",...)"
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-not": "$LOOP.subprocess_exec($PROTOCOL, [\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", \"...\", ...], ...)"
                },
                {
                  "pattern": "$LOOP.subprocess_exec($PROTOCOL, [\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", ...], ...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "os.environ"
                        },
                        {
                          "pattern": "os.environ.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.environb"
                        },
                        {
                          "pattern": "os.environb.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.getenv('$ANYTHING', ...)"
                        },
                        {
                          "pattern": "os.getenvb('$ANYTHING', ...)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern": "sys.argv"
                                },
                                {
                                  "pattern": "sys.orig_argv"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = argparse.ArgumentParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = optparse.OptionParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.getopt(...)\n...\n"
                                },
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.gnu_getopt(...)\n...\n"
                                }
                              ]
                            },
                            {
                              "pattern-either": [
                                {
                                  "patterns": [
                                    {
                                      "pattern-inside": "for $O, $A in $OPTS:\n  ...\n"
                                    },
                                    {
                                      "pattern": "$A"
                                    }
                                  ]
                                },
                                {
                                  "pattern": "$ARGS"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1",
      "languages": [
        "python"
      ],
      "message": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html",
          "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability",
          "http://2012.sharcs.org/slides/stevens.pdf",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "ReUPO3",
            "url": "https://semgrep.dev/playground/r/5PTYnG/python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1",
            "version_id": "5PTYnG"
          }
        },
        "shortlink": "https://sg.run/3ALr",
        "source": "https://semgrep.dev/r/python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pycryptodome"
        ]
      },
      "pattern-either": [
        {
          "pattern": "Crypto.Hash.SHA.new(...)"
        },
        {
          "pattern": "Cryptodome.Hash.SHA.new (...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.aws-lambda.security.tainted-html-response.tainted-html-response",
      "languages": [
        "python"
      ],
      "message": "Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "ReUKrk",
            "url": "https://semgrep.dev/playground/r/ZRTyrw/python.aws-lambda.security.tainted-html-response.tainted-html-response",
            "version_id": "ZRTyrw"
          }
        },
        "shortlink": "https://sg.run/k9vP",
        "source": "https://semgrep.dev/r/python.aws-lambda.security.tainted-html-response.tainted-html-response",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "aws-lambda"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern": "$BODY"
            },
            {
              "pattern-inside": "{..., \"headers\": {..., \"Content-Type\": \"text/html\", ...}, \"body\": $BODY, ... }\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.audit.dangerous-subinterpreters-run-string-tainted-env-args.dangerous-subinterpreters-run-string-tainted-env-args",
      "languages": [
        "python"
      ],
      "message": "Found user controlled content in `run_string`. This is dangerous because it allows a malicious actor to run arbitrary Python code.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://bugs.python.org/issue43472",
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "GdUkxO",
            "url": "https://semgrep.dev/playground/r/1QTXjj/python.lang.security.audit.dangerous-subinterpreters-run-string-tainted-env-args.dangerous-subinterpreters-run-string-tainted-env-args",
            "version_id": "1QTXjj"
          }
        },
        "shortlink": "https://sg.run/oLl9",
        "source": "https://semgrep.dev/r/python.lang.security.audit.dangerous-subinterpreters-run-string-tainted-env-args.dangerous-subinterpreters-run-string-tainted-env-args",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-inside": "_xxsubinterpreters.run_string($ID, $PAYLOAD, ...)\n"
            },
            {
              "pattern-not": "_xxsubinterpreters.run_string($ID, \"...\", ...)\n"
            },
            {
              "pattern": "$PAYLOAD"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "os.environ"
                        },
                        {
                          "pattern": "os.environ.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.environb"
                        },
                        {
                          "pattern": "os.environb.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.getenv('$ANYTHING', ...)"
                        },
                        {
                          "pattern": "os.getenvb('$ANYTHING', ...)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern": "sys.argv"
                                },
                                {
                                  "pattern": "sys.orig_argv"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = argparse.ArgumentParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = optparse.OptionParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.getopt(...)\n...\n"
                                },
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.gnu_getopt(...)\n...\n"
                                }
                              ]
                            },
                            {
                              "pattern-either": [
                                {
                                  "patterns": [
                                    {
                                      "pattern-inside": "for $O, $A in $OPTS:\n  ...\n"
                                    },
                                    {
                                      "pattern": "$A"
                                    }
                                  ]
                                },
                                {
                                  "pattern": "$ARGS"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.aws-lambda.security.psycopg-sqli.psycopg-sqli",
      "languages": [
        "python"
      ],
      "message": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, used parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', 'active')`",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://www.psycopg.org/docs/cursor.html#cursor.execute",
          "https://www.psycopg.org/docs/cursor.html#cursor.executemany",
          "https://www.psycopg.org/docs/cursor.html#cursor.mogrify"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "4bUQG1",
            "url": "https://semgrep.dev/playground/r/xyT3oz/python.aws-lambda.security.psycopg-sqli.psycopg-sqli",
            "version_id": "xyT3oz"
          }
        },
        "shortlink": "https://sg.run/9L8r",
        "source": "https://semgrep.dev/r/python.aws-lambda.security.psycopg-sqli.psycopg-sqli",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "aws-lambda",
          "psycopg",
          "psycopg2"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern": "$QUERY"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "$CURSOR.execute($QUERY,...)"
                },
                {
                  "pattern-inside": "$CURSOR.executemany($QUERY,...)"
                },
                {
                  "pattern-inside": "$CURSOR.mogrify($QUERY,...)"
                }
              ]
            },
            {
              "pattern-inside": "import psycopg2\n...\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret",
      "languages": [
        "python"
      ],
      "message": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)",
      "metadata": {
        "category": "security",
        "confidence": "HIGH",
        "cwe": [
          "CWE-522: Insufficiently Protected Credentials"
        ],
        "cwe2021-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A02:2017 - Broken Authentication",
          "A04:2021 - Insecure Design"
        ],
        "references": [
          "https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "X5U8P5",
            "url": "https://semgrep.dev/playground/r/GxTW2b/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret",
            "version_id": "GxTW2b"
          }
        },
        "shortlink": "https://sg.run/l2E9",
        "source": "https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "jwt"
        ]
      },
      "patterns": [
        {
          "pattern": "jwt.encode($X, $SECRET, ...)\n"
        },
        {
          "focus-metavariable": "$SECRET"
        },
        {
          "pattern": "\"...\"\n"
        }
      ],
      "severity": "ERROR"
    },
    {
      "fix-regex": {
        "regex": "sha1",
        "replacement": "sha256"
      },
      "id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
      "languages": [
        "python"
      ],
      "message": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
      "metadata": {
        "asvs": {
          "control_id": "6.2.2 Insecure Custom Algorithm",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms",
          "section": "V6 Stored Cryptography Verification Requirements",
          "version": "4"
        },
        "bandit-code": "B303",
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html",
          "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability",
          "http://2012.sharcs.org/slides/stevens.pdf",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "x8UnBk",
            "url": "https://semgrep.dev/playground/r/e1TA7A/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
            "version_id": "e1TA7A"
          }
        },
        "shortlink": "https://sg.run/ydYx",
        "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern": "hashlib.sha1(...)",
      "severity": "WARNING"
    },
    {
      "id": "python.flask.security.audit.directly-returned-format-string.directly-returned-format-string",
      "languages": [
        "python"
      ],
      "message": "Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "QrUz49",
            "url": "https://semgrep.dev/playground/r/YDT839/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string",
            "version_id": "YDT839"
          }
        },
        "shortlink": "https://sg.run/Zv6o",
        "source": "https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "flask"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-not-inside": "return \"...\""
            },
            {
              "pattern-either": [
                {
                  "pattern": "return \"...\".format(...)"
                },
                {
                  "pattern": "return \"...\" % ..."
                },
                {
                  "pattern": "return \"...\" + ..."
                },
                {
                  "pattern": "return ... + \"...\""
                },
                {
                  "pattern": "return f\"...{...}...\""
                },
                {
                  "patterns": [
                    {
                      "pattern": "return $X"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "$X = \"...\".format(...)\n...\n"
                        },
                        {
                          "pattern-inside": "$X = \"...\" % ...\n...\n"
                        },
                        {
                          "pattern-inside": "$X = \"...\" + ...\n...\n"
                        },
                        {
                          "pattern-inside": "$X = ... + \"...\"\n...\n"
                        },
                        {
                          "pattern-inside": "$X = f\"...{...}...\"\n...\n"
                        }
                      ]
                    },
                    {
                      "pattern-not-inside": "$X = \"...\"\n...\n"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-inside": "@$APP.route(...)\ndef $FUNC(..., $PARAM, ...):\n  ...\n"
                },
                {
                  "pattern": "$PARAM"
                }
              ]
            },
            {
              "pattern": "request.$FUNC.get(...)\n"
            },
            {
              "pattern": "request.$FUNC(...)\n"
            },
            {
              "pattern": "request.$FUNC[...]"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.aws-lambda.security.pymssql-sqli.pymssql-sqli",
      "languages": [
        "python"
      ],
      "message": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, used parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', 'active')`",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://pypi.org/project/pymssql/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "PeUxO0",
            "url": "https://semgrep.dev/playground/r/O9TZYb/python.aws-lambda.security.pymssql-sqli.pymssql-sqli",
            "version_id": "O9TZYb"
          }
        },
        "shortlink": "https://sg.run/yXvP",
        "source": "https://semgrep.dev/r/python.aws-lambda.security.pymssql-sqli.pymssql-sqli",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "aws-lambda",
          "pymssql"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern": "$QUERY"
            },
            {
              "pattern-inside": "$CURSOR.execute($QUERY,...)"
            },
            {
              "pattern-inside": "import pymssql\n...\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.django.security.passwords.password-empty-string.password-empty-string",
      "languages": [
        "python"
      ],
      "message": "'$VAR' is the empty string and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the password to None or call 'set_unusable_password()'.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-521: Weak Password Requirements"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.0/ref/contrib/auth/#django.contrib.auth.models.User.set_password"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "9AU1jW",
            "url": "https://semgrep.dev/playground/r/DkTeOP/python.django.security.passwords.password-empty-string.password-empty-string",
            "version_id": "DkTeOP"
          }
        },
        "shortlink": "https://sg.run/oxnR",
        "source": "https://semgrep.dev/r/python.django.security.passwords.password-empty-string.password-empty-string",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "$MODEL.set_password($EMPTY)\n...\n$MODEL.save()\n"
            },
            {
              "pattern": "$VAR = $EMPTY\n...\n$MODEL.set_password($VAR)\n...\n$MODEL.save()\n"
            }
          ]
        },
        {
          "metavariable-regex": {
            "metavariable": "$EMPTY",
            "regex": "(\\'\\'|\\\"\\\")"
          }
        }
      ],
      "severity": "ERROR"
    },
    {
      "fix": "True\n",
      "id": "python.pyramid.audit.csrf-origin-check-disabled.pyramid-csrf-origin-check-disabled",
      "languages": [
        "python"
      ],
      "message": "Origin check for the CSRF token is disabled for this view. This might represent a security risk if the CSRF storage policy is not known to be secure.",
      "metadata": {
        "asvs": {
          "control_id": "4.2.2 CSRF",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V4-Access-Control.md#v42-operation-level-access-control",
          "section": "V4 Access Control",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-352: Cross-Site Request Forgery (CSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "v8UGpL",
            "url": "https://semgrep.dev/playground/r/6xTAb5/python.pyramid.audit.csrf-origin-check-disabled.pyramid-csrf-origin-check-disabled",
            "version_id": "6xTAb5"
          }
        },
        "shortlink": "https://sg.run/4RB9",
        "source": "https://semgrep.dev/r/python.pyramid.audit.csrf-origin-check-disabled.pyramid-csrf-origin-check-disabled",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "from pyramid.view import view_config\n...\n@view_config(..., check_origin=$CHECK_ORIGIN, ...)\ndef $VIEW(...):\n  ...\n"
        },
        {
          "pattern": "$CHECK_ORIGIN"
        },
        {
          "metavariable-comparison": {
            "comparison": "$CHECK_ORIGIN == False",
            "metavariable": "$CHECK_ORIGIN"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.django.security.injection.reflected-data-httpresponsebadrequest.reflected-data-httpresponsebadrequest",
      "languages": [
        "python"
      ],
      "message": "Found user-controlled request data passed into a HttpResponseBadRequest. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "5rUOX1",
            "url": "https://semgrep.dev/playground/r/DkTeOR/python.django.security.injection.reflected-data-httpresponsebadrequest.reflected-data-httpresponsebadrequest",
            "version_id": "DkTeOR"
          }
        },
        "shortlink": "https://sg.run/DoZP",
        "source": "https://semgrep.dev/r/python.django.security.injection.reflected-data-httpresponsebadrequest.reflected-data-httpresponsebadrequest",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "django.http.HttpResponseBadRequest(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponseBadRequest(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponseBadRequest(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponseBadRequest(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponseBadRequest(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponseBadRequest(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.HttpResponseBadRequest(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "return django.http.HttpResponseBadRequest(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., request.$W(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponseBadRequest(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponseBadRequest(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponseBadRequest(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponseBadRequest(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponseBadRequest(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.HttpResponseBadRequest(..., request.$W(...), ...)"
            },
            {
              "pattern": "return django.http.HttpResponseBadRequest(..., request.$W(...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., request.$W[...], ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponseBadRequest(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponseBadRequest(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponseBadRequest(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponseBadRequest(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponseBadRequest(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.HttpResponseBadRequest(..., request.$W[...], ...)"
            },
            {
              "pattern": "return django.http.HttpResponseBadRequest(..., request.$W[...], ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., $S % request.$W, ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "django.http.HttpResponseBadRequest(..., request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponseBadRequest(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponseBadRequest(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponseBadRequest(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponseBadRequest(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponseBadRequest(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\ndjango.http.HttpResponseBadRequest(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.HttpResponseBadRequest(..., request.$W, ...)"
            },
            {
              "pattern": "return django.http.HttpResponseBadRequest(..., request.$W, ...)"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "True\n",
      "id": "python.pyramid.audit.set-cookie-secure-unsafe-value.pyramid-set-cookie-secure-unsafe-value",
      "languages": [
        "python"
      ],
      "message": "Found a Pyramid cookie without the secure option correctly set. Pyramid cookies should be handled securely by setting secure=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
        ],
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "L1UX2J",
            "url": "https://semgrep.dev/playground/r/jQTLkr/python.pyramid.audit.set-cookie-secure-unsafe-value.pyramid-set-cookie-secure-unsafe-value",
            "version_id": "jQTLkr"
          }
        },
        "shortlink": "https://sg.run/AzjB",
        "source": "https://semgrep.dev/r/python.pyramid.audit.set-cookie-secure-unsafe-value.pyramid-set-cookie-secure-unsafe-value",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "@pyramid.view.view_config(...)\ndef $VIEW($REQUEST):\n    ...\n    $RESPONSE = $REQUEST.response\n    ...\n"
            },
            {
              "pattern-inside": "def $VIEW(...):\n    ...\n    $RESPONSE = pyramid.httpexceptions.HTTPFound(...)\n    ...\n"
            }
          ]
        },
        {
          "pattern-not": "$RESPONSE.set_cookie(..., **$PARAMS)"
        },
        {
          "pattern": "$RESPONSE.set_cookie(..., secure=$SECURE, ...)"
        },
        {
          "pattern": "$SECURE"
        },
        {
          "metavariable-pattern": {
            "metavariable": "$SECURE",
            "pattern": "False\n"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "SECP256R1\n",
      "id": "python.cryptography.security.insufficient-ec-key-size.insufficient-ec-key-size",
      "languages": [
        "python"
      ],
      "message": "Detected an insufficient curve size for EC. NIST recommends a key size of 224 or higher. For example, use 'ec.SECP256R1'.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-326: Inadequate Encryption Strength"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf",
          "https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ec/#elliptic-curves"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "qNUjZ3",
            "url": "https://semgrep.dev/playground/r/WrT5GP/python.cryptography.security.insufficient-ec-key-size.insufficient-ec-key-size",
            "version_id": "WrT5GP"
          }
        },
        "shortlink": "https://sg.run/GeQq",
        "source": "https://semgrep.dev/r/python.cryptography.security.insufficient-ec-key-size.insufficient-ec-key-size",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "cryptography"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "cryptography.hazmat.primitives.asymmetric.ec.generate_private_key(...)"
        },
        {
          "pattern": "cryptography.hazmat.primitives.asymmetric.ec.$SIZE"
        },
        {
          "metavariable-pattern": {
            "metavariable": "$SIZE",
            "pattern-either": [
              {
                "pattern": "SECP192R1"
              },
              {
                "pattern": "SECT163K1"
              },
              {
                "pattern": "SECT163R2"
              }
            ]
          }
        },
        {
          "focus-metavariable": "$SIZE"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.audit.md5-used-as-password.md5-used-as-password",
      "languages": [
        "python"
      ],
      "message": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://tools.ietf.org/html/rfc6151",
          "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html",
          "https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords",
          "https://github.com/returntocorp/semgrep-rules/issues/1609",
          "https://docs.python.org/3/library/hashlib.html#hashlib.scrypt"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "6JU1w1",
            "url": "https://semgrep.dev/playground/r/JdTZgr/python.lang.security.audit.md5-used-as-password.md5-used-as-password",
            "version_id": "JdTZgr"
          }
        },
        "shortlink": "https://sg.run/5DwD",
        "source": "https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pycryptodome",
          "hashlib",
          "md5"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern": "$FUNCTION(...)"
            },
            {
              "metavariable-regex": {
                "metavariable": "$FUNCTION",
                "regex": "(?i)(.*password.*)"
              }
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "hashlib.md5"
                },
                {
                  "pattern": "hashlib.new(..., name=\"MD5\", ...)"
                },
                {
                  "pattern": "Cryptodome.Hash.MD5"
                },
                {
                  "pattern": "Crypto.Hash.MD5"
                },
                {
                  "pattern": "cryptography.hazmat.primitives.hashes.MD5"
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.pycryptodome.security.mode-without-authentication.crypto-mode-without-authentication",
      "languages": [
        "python"
      ],
      "message": "An encryption mode of operation is being used without proper message authentication.  This can potentially result in the encrypted content to be decrypted by an attacker.  Consider instead use an AEAD mode of operation like GCM. ",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "YGUw8w",
            "url": "https://semgrep.dev/playground/r/A8Tnb4/python.pycryptodome.security.mode-without-authentication.crypto-mode-without-authentication",
            "version_id": "A8Tnb4"
          }
        },
        "shortlink": "https://sg.run/k1K1",
        "source": "https://semgrep.dev/r/python.pycryptodome.security.mode-without-authentication.crypto-mode-without-authentication",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "cryptography"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-either": [
                    {
                      "pattern": "AES.new(..., $PYCRYPTODOME_MODE)\n"
                    }
                  ]
                },
                {
                  "pattern-not-inside": "AES.new(..., $PYCRYPTODOME_MODE)\n...\nHMAC.new\n"
                },
                {
                  "metavariable-pattern": {
                    "metavariable": "$PYCRYPTODOME_MODE",
                    "patterns": [
                      {
                        "pattern-either": [
                          {
                            "pattern": "AES.MODE_CBC"
                          },
                          {
                            "pattern": "AES.MODE_CTR"
                          },
                          {
                            "pattern": "AES.MODE_CFB"
                          },
                          {
                            "pattern": "AES.MODE_OFB"
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse",
      "languages": [
        "python"
      ],
      "message": "Found user-controlled request data passed into HttpResponse. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "JDUydR",
            "url": "https://semgrep.dev/playground/r/BjTG9p/python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse",
            "version_id": "BjTG9p"
          }
        },
        "shortlink": "https://sg.run/BkvA",
        "source": "https://semgrep.dev/r/python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "django.http.HttpResponse(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponse(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponse(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponse(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponse(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.HttpResponse(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.HttpResponse(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "return django.http.HttpResponse(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., request.$W(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponse(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponse(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponse(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponse(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.HttpResponse(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.HttpResponse(..., request.$W(...), ...)"
            },
            {
              "pattern": "return django.http.HttpResponse(..., request.$W(...), ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., request.$W[...], ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponse(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponse(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponse(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponse(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.HttpResponse(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.HttpResponse(..., request.$W[...], ...)"
            },
            {
              "pattern": "return django.http.HttpResponse(..., request.$W[...], ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., $S % request.$W, ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "django.http.HttpResponse(..., request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponse(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponse(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponse(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponse(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$A = django.http.HttpResponse(..., request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\n$A = django.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "return django.http.HttpResponse(..., request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.HttpResponse(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\ndjango.http.HttpResponse(..., $INTERM, ...)\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-xor",
      "languages": [
        "python"
      ],
      "message": "Detected XOR cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.",
      "metadata": {
        "bandit-code": "B304",
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "PeUk5W",
            "url": "https://semgrep.dev/playground/r/3ZTx98/python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-xor",
            "version_id": "3ZTx98"
          }
        },
        "shortlink": "https://sg.run/L0yr",
        "source": "https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-xor",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pycryptodome"
        ]
      },
      "pattern-either": [
        {
          "pattern": "Cryptodome.Cipher.XOR.new(...)"
        },
        {
          "pattern": "Crypto.Cipher.XOR.new(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.aws-lambda.security.dangerous-spawn-process.dangerous-spawn-process",
      "languages": [
        "python"
      ],
      "message": "Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "8GUGBq",
            "url": "https://semgrep.dev/playground/r/rxT83W/python.aws-lambda.security.dangerous-spawn-process.dangerous-spawn-process",
            "version_id": "rxT83W"
          }
        },
        "shortlink": "https://sg.run/2AjL",
        "source": "https://semgrep.dev/r/python.aws-lambda.security.dangerous-spawn-process.dangerous-spawn-process",
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python",
          "aws-lambda"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern": "$CMD"
            },
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-inside": "os.$METHOD($MODE, $CMD, ...)"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(spawnl|spawnle|spawnlp|spawnlpe|spawnv|spawnve|spawnvp|spawnvp|spawnvpe|posix_spawn|posix_spawnp|startfile)"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "os.$METHOD($MODE, $BASH, [\"-c\", $CMD,...],...)"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(spawnv|spawnve|spawnvp|spawnvp|spawnvpe|posix_spawn|posix_spawnp)"
                      }
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$BASH",
                        "regex": "(.*)(sh|bash|ksh|csh|tcsh|zsh)"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "os.$METHOD($MODE, $BASH, \"-c\", $CMD,...)"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(spawnl|spawnle|spawnlp|spawnlpe)"
                      }
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$BASH",
                        "regex": "(.*)(sh|bash|ksh|csh|tcsh|zsh)"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.aws-lambda.security.pymysql-sqli.pymysql-sqli",
      "languages": [
        "python"
      ],
      "message": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, used parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://pypi.org/project/PyMySQL/#id4"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "JDUlel",
            "url": "https://semgrep.dev/playground/r/e1TAnn/python.aws-lambda.security.pymysql-sqli.pymysql-sqli",
            "version_id": "e1TAnn"
          }
        },
        "shortlink": "https://sg.run/reve",
        "source": "https://semgrep.dev/r/python.aws-lambda.security.pymysql-sqli.pymysql-sqli",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "aws-lambda",
          "pymysql"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern": "$QUERY"
            },
            {
              "pattern-inside": "$CURSOR.execute($QUERY,...)"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "import pymysql\n...\n"
                },
                {
                  "pattern-inside": "import pymysql.cursors\n...\n"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.pycryptodome.security.insecure-cipher-algorithm-blowfish.insecure-cipher-algorithm-blowfish",
      "languages": [
        "python"
      ],
      "message": "Detected Blowfish cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.",
      "metadata": {
        "bandit-code": "B304",
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "JDUGnK",
            "url": "https://semgrep.dev/playground/r/LjTp6W/python.pycryptodome.security.insecure-cipher-algorithm-blowfish.insecure-cipher-algorithm-blowfish",
            "version_id": "LjTp6W"
          }
        },
        "shortlink": "https://sg.run/dlOE",
        "source": "https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm-blowfish.insecure-cipher-algorithm-blowfish",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pycryptodome"
        ]
      },
      "pattern-either": [
        {
          "pattern": "Cryptodome.Cipher.Blowfish.new(...)"
        },
        {
          "pattern": "Crypto.Cipher.Blowfish.new(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "'Lax'\n",
      "id": "python.pyramid.audit.authtkt-cookie-samesite.pyramid-authtkt-cookie-samesite",
      "languages": [
        "python"
      ],
      "message": "Found a Pyramid Authentication Ticket without the samesite option correctly set. Pyramid cookies should be handled securely by setting samesite='Lax'. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-1275: Sensitive Cookie with Improper SameSite Attribute"
        ],
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "kxUYjY",
            "url": "https://semgrep.dev/playground/r/0bT6WO/python.pyramid.audit.authtkt-cookie-samesite.pyramid-authtkt-cookie-samesite",
            "version_id": "0bT6WO"
          }
        },
        "shortlink": "https://sg.run/LYrY",
        "source": "https://semgrep.dev/r/python.pyramid.audit.authtkt-cookie-samesite.pyramid-authtkt-cookie-samesite",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "pyramid.authentication.AuthTktCookieHelper(..., samesite=$SAMESITE, ...)"
            },
            {
              "pattern": "pyramid.authentication.AuthTktAuthenticationPolicy(..., samesite=$SAMESITE, ...)"
            }
          ]
        },
        {
          "pattern": "$SAMESITE"
        },
        {
          "metavariable-regex": {
            "metavariable": "$SAMESITE",
            "regex": "(?!'Lax')"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.cryptography.security.insecure-cipher-algorithms-arc4.insecure-cipher-algorithm-arc4",
      "languages": [
        "python"
      ],
      "message": "Detected ARC4 cipher algorithm which is considered insecure. The algorithm is considered weak and has been deprecated. Use AES instead.",
      "metadata": {
        "bandit-code": "B304",
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://tools.ietf.org/html/rfc5469"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "KxU8gK",
            "url": "https://semgrep.dev/playground/r/8KTLp4/python.cryptography.security.insecure-cipher-algorithms-arc4.insecure-cipher-algorithm-arc4",
            "version_id": "8KTLp4"
          }
        },
        "shortlink": "https://sg.run/xoZL",
        "source": "https://semgrep.dev/r/python.cryptography.security.insecure-cipher-algorithms-arc4.insecure-cipher-algorithm-arc4",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L98",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "cryptography"
        ]
      },
      "pattern": "cryptography.hazmat.primitives.ciphers.algorithms.ARC4(...)",
      "severity": "WARNING"
    },
    {
      "id": "python.boto3.security.hardcoded-token.hardcoded-token",
      "languages": [
        "python"
      ],
      "message": "A hard-coded credential was detected. It is not recommended  to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary.  It is recommended to use environment variables to  securely provide credentials or retrieve credentials from  a secure vault or HSM (Hardware Security Module).",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html",
          "https://bento.dev/checks/boto3/hardcoded-access-token/",
          "https://aws.amazon.com/blogs/security/what-to-do-if-you-inadvertently-expose-an-aws-access-key/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "5rUOwK",
            "url": "https://semgrep.dev/playground/r/LjTpwq/python.boto3.security.hardcoded-token.hardcoded-token",
            "version_id": "LjTpwq"
          }
        },
        "shortlink": "https://sg.run/LwQ6",
        "source": "https://semgrep.dev/r/python.boto3.security.hardcoded-token.hardcoded-token",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "boto3",
          "secrets"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "$W(...,$TOKEN=\"$VALUE\",...)"
                },
                {
                  "pattern": "$BOTO. ... .$W(...,$TOKEN=\"$VALUE\",...)"
                }
              ]
            },
            {
              "metavariable-regex": {
                "metavariable": "$TOKEN",
                "regex": "(aws_session_token|aws_access_key_id|aws_secret_access_key)"
              }
            },
            {
              "metavariable-pattern": {
                "language": "generic",
                "metavariable": "$VALUE",
                "patterns": [
                  {
                    "pattern-either": [
                      {
                        "pattern-regex": "^AKI"
                      },
                      {
                        "pattern-regex": "^[A-Za-z0-9/+=]+$"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "metavariable-analysis": {
                "analyzer": "entropy",
                "metavariable": "$VALUE"
              }
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "pattern": "\"...\"\n"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.flask.security.injection.user-exec.exec-injection",
      "languages": [
        "python"
      ],
      "message": "Detected user data flowing into exec. This is code injection and should be avoided.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://nedbatchelder.com/blog/201206/exec_really_is_dangerous.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "KxUbl2",
            "url": "https://semgrep.dev/playground/r/e1TAxz/python.flask.security.injection.user-exec.exec-injection",
            "version_id": "e1TAxz"
          }
        },
        "shortlink": "https://sg.run/Ge42",
        "source": "https://semgrep.dev/r/python.flask.security.injection.user-exec.exec-injection",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "flask"
        ]
      },
      "pattern-either": [
        {
          "patterns": [
            {
              "pattern": "exec(...)"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n  exec(..., <... $ROUTEVAR ...>, ...)\n"
                },
                {
                  "pattern-inside": "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n  $INTERM = <... $ROUTEVAR ...>\n  ...\n  exec(..., <... $INTERM ...>, ...)\n"
                }
              ]
            }
          ]
        },
        {
          "pattern": "exec(..., <... flask.request.$W.get(...) ...>, ...)"
        },
        {
          "pattern": "exec(..., <... flask.request.$W[...] ...>, ...)"
        },
        {
          "pattern": "exec(..., <... flask.request.$W(...) ...>, ...)"
        },
        {
          "pattern": "exec(..., <... flask.request.$W ...>, ...)"
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W.get(...) ...>\n...\nexec(..., <... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "exec(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W[...] ...>\n...\nexec(..., <... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "exec(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W(...) ...>\n...\nexec(..., <... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "exec(...)"
            }
          ]
        },
        {
          "patterns": [
            {
              "pattern-inside": "$INTERM = <... flask.request.$W ...>\n...\nexec(..., <... $INTERM ...>, ...)\n"
            },
            {
              "pattern": "exec(...)"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.pycryptodome.security.insufficient-dsa-key-size.insufficient-dsa-key-size",
      "languages": [
        "python"
      ],
      "message": "Detected an insufficient key size for DSA. NIST recommends a key size of 2048 or higher.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-326: Inadequate Encryption Strength"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "AbUWje",
            "url": "https://semgrep.dev/playground/r/GxTW9e/python.pycryptodome.security.insufficient-dsa-key-size.insufficient-dsa-key-size",
            "version_id": "GxTW9e"
          }
        },
        "shortlink": "https://sg.run/4y8l",
        "source": "https://semgrep.dev/r/python.pycryptodome.security.insufficient-dsa-key-size.insufficient-dsa-key-size",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pycryptodome"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "Crypto.PublicKey.DSA.generate(..., bits=$SIZE, ...)"
            },
            {
              "pattern": "Crypto.PublicKey.DSA.generate($SIZE, ...)"
            },
            {
              "pattern": "Cryptodome.PublicKey.DSA.generate(..., bits=$SIZE, ...)"
            },
            {
              "pattern": "Cryptodome.PublicKey.DSA.generate($SIZE, ...)"
            }
          ]
        },
        {
          "metavariable-comparison": {
            "comparison": "$SIZE < 2048",
            "metavariable": "$SIZE"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.cryptography.security.insecure-cipher-algorithms-blowfish.insecure-cipher-algorithm-blowfish",
      "languages": [
        "python"
      ],
      "message": "Detected Blowfish cipher algorithm which is considered insecure. The algorithm is considered weak and has been deprecated. Use AES instead.",
      "metadata": {
        "bandit-code": "B304",
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://tools.ietf.org/html/rfc5469"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "qNULvO",
            "url": "https://semgrep.dev/playground/r/gET5wA/python.cryptography.security.insecure-cipher-algorithms-blowfish.insecure-cipher-algorithm-blowfish",
            "version_id": "gET5wA"
          }
        },
        "shortlink": "https://sg.run/OdzL",
        "source": "https://semgrep.dev/r/python.cryptography.security.insecure-cipher-algorithms-blowfish.insecure-cipher-algorithm-blowfish",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L98",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "cryptography"
        ]
      },
      "pattern": "cryptography.hazmat.primitives.ciphers.algorithms.Blowfish(...)",
      "severity": "WARNING"
    },
    {
      "id": "python.cryptography.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5",
      "languages": [
        "python"
      ],
      "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
      "metadata": {
        "bandit-code": "B303",
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html",
          "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability",
          "http://2012.sharcs.org/slides/stevens.pdf",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "lBUopp",
            "url": "https://semgrep.dev/playground/r/44TYn2/python.cryptography.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5",
            "version_id": "44TYn2"
          }
        },
        "shortlink": "https://sg.run/eY88",
        "source": "https://semgrep.dev/r/python.cryptography.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "cryptography"
        ]
      },
      "pattern": "cryptography.hazmat.primitives.hashes.MD5(...)",
      "severity": "WARNING"
    },
    {
      "id": "python.pycryptodome.security.insecure-cipher-algorithm-des.insecure-cipher-algorithm-des",
      "languages": [
        "python"
      ],
      "message": "Detected DES cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.",
      "metadata": {
        "bandit-code": "B304",
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/326.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "5rUr73",
            "url": "https://semgrep.dev/playground/r/8KTLe6/python.pycryptodome.security.insecure-cipher-algorithm-des.insecure-cipher-algorithm-des",
            "version_id": "8KTLe6"
          }
        },
        "shortlink": "https://sg.run/Z5bw",
        "source": "https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm-des.insecure-cipher-algorithm-des",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pycryptodome"
        ]
      },
      "pattern-either": [
        {
          "pattern": "Cryptodome.Cipher.DES.new(...)"
        },
        {
          "pattern": "Crypto.Cipher.DES.new(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.audit.dangerous-code-run-tainted-env-args.dangerous-interactive-code-run-tainted-env-args",
      "languages": [
        "python"
      ],
      "message": "Found user controlled data inside InteractiveConsole/InteractiveInterpreter method. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "QrUG72",
            "url": "https://semgrep.dev/playground/r/o5T5n1/python.lang.security.audit.dangerous-code-run-tainted-env-args.dangerous-interactive-code-run-tainted-env-args",
            "version_id": "o5T5n1"
          }
        },
        "shortlink": "https://sg.run/0Bgv",
        "source": "https://semgrep.dev/r/python.lang.security.audit.dangerous-code-run-tainted-env-args.dangerous-interactive-code-run-tainted-env-args",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$X = code.InteractiveConsole(...)\n...\n"
                },
                {
                  "pattern-inside": "$X = code.InteractiveInterpreter(...)\n...\n"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "$X.push($PAYLOAD,...)\n"
                },
                {
                  "pattern-inside": "$X.runsource($PAYLOAD,...)\n"
                },
                {
                  "pattern-inside": "$X.runcode(code.compile_command($PAYLOAD),...)\n"
                },
                {
                  "pattern-inside": "$PL = code.compile_command($PAYLOAD,...)\n...\n$X.runcode($PL,...)\n"
                }
              ]
            },
            {
              "pattern": "$PAYLOAD"
            },
            {
              "pattern-not": "$X.push(\"...\",...)\n"
            },
            {
              "pattern-not": "$X.runsource(\"...\",...)\n"
            },
            {
              "pattern-not": "$X.runcode(code.compile_command(\"...\"),...)\n"
            },
            {
              "pattern-not": "$PL = code.compile_command(\"...\",...)\n...\n$X.runcode($PL,...)\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "os.environ"
                        },
                        {
                          "pattern": "os.environ.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.environb"
                        },
                        {
                          "pattern": "os.environb.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.getenv('$ANYTHING', ...)"
                        },
                        {
                          "pattern": "os.getenvb('$ANYTHING', ...)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern": "sys.argv"
                                },
                                {
                                  "pattern": "sys.orig_argv"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = argparse.ArgumentParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = optparse.OptionParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.getopt(...)\n...\n"
                                },
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.gnu_getopt(...)\n...\n"
                                }
                              ]
                            },
                            {
                              "pattern-either": [
                                {
                                  "patterns": [
                                    {
                                      "pattern-inside": "for $O, $A in $OPTS:\n  ...\n"
                                    },
                                    {
                                      "pattern": "$A"
                                    }
                                  ]
                                },
                                {
                                  "pattern": "$ARGS"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix-regex": {
        "regex": "(.*)\\)",
        "replacement": "\\1, secure=True)"
      },
      "id": "python.pyramid.audit.set-cookie-secure-unsafe-default.pyramid-set-cookie-secure-unsafe-default",
      "languages": [
        "python"
      ],
      "message": "Found a Pyramid cookie using an unsafe default for the secure option. Pyramid cookies should be handled securely by setting secure=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
        ],
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "7KUr15",
            "url": "https://semgrep.dev/playground/r/X0ToWg/python.pyramid.audit.set-cookie-secure-unsafe-default.pyramid-set-cookie-secure-unsafe-default",
            "version_id": "X0ToWg"
          }
        },
        "shortlink": "https://sg.run/RbrN",
        "source": "https://semgrep.dev/r/python.pyramid.audit.set-cookie-secure-unsafe-default.pyramid-set-cookie-secure-unsafe-default",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern-inside": "@pyramid.view.view_config(...)\ndef $VIEW($REQUEST):\n    ...\n    $RESPONSE = $REQUEST.response\n    ...\n"
            },
            {
              "pattern-inside": "def $VIEW(...):\n    ...\n    $RESPONSE = pyramid.httpexceptions.HTTPFound(...)\n    ...\n"
            }
          ]
        },
        {
          "pattern-not": "$RESPONSE.set_cookie(..., secure=$SECURE, ...)"
        },
        {
          "pattern-not": "$RESPONSE.set_cookie(..., **$PARAMS)"
        },
        {
          "pattern": "$RESPONSE.set_cookie(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.cryptography.security.insufficient-rsa-key-size.insufficient-rsa-key-size",
      "languages": [
        "python"
      ],
      "message": "Detected an insufficient key size for RSA. NIST recommends a key size of 2048 or higher.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-326: Inadequate Encryption Strength"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "lBU9jn",
            "url": "https://semgrep.dev/playground/r/GxTWQo/python.cryptography.security.insufficient-rsa-key-size.insufficient-rsa-key-size",
            "version_id": "GxTWQo"
          }
        },
        "shortlink": "https://sg.run/RoQq",
        "source": "https://semgrep.dev/r/python.cryptography.security.insufficient-rsa-key-size.insufficient-rsa-key-size",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "cryptography"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key(..., key_size=$SIZE, ...)"
            },
            {
              "pattern": "cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key($EXP, $SIZE, ...)"
            }
          ]
        },
        {
          "metavariable-comparison": {
            "comparison": "$SIZE < 2048",
            "metavariable": "$SIZE"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.aws-lambda.security.mysql-sqli.mysql-sqli",
      "languages": [
        "python"
      ],
      "message": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, used parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-execute.html",
          "https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-executemany.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "3qU3eE",
            "url": "https://semgrep.dev/playground/r/w8T0wb/python.aws-lambda.security.mysql-sqli.mysql-sqli",
            "version_id": "w8T0wb"
          }
        },
        "shortlink": "https://sg.run/1RjG",
        "source": "https://semgrep.dev/r/python.aws-lambda.security.mysql-sqli.mysql-sqli",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "aws-lambda",
          "mysql"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern": "$QUERY"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "$CURSOR.execute($QUERY,...)"
                },
                {
                  "pattern-inside": "$CURSOR.executemany($QUERY,...)"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "import mysql\n...\n"
                },
                {
                  "pattern-inside": "import mysql.cursors\n...\n"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-idea",
      "languages": [
        "python"
      ],
      "message": "Detected IDEA cipher algorithm which is considered insecure. The algorithm is considered weak and has been deprecated. Use AES instead.",
      "metadata": {
        "bandit-code": "B304",
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://tools.ietf.org/html/rfc5469"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "BYUNPg",
            "url": "https://semgrep.dev/playground/r/QkTQbz/python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-idea",
            "version_id": "QkTQbz"
          }
        },
        "shortlink": "https://sg.run/3xyK",
        "source": "https://semgrep.dev/r/python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-idea",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L98",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "cryptography"
        ]
      },
      "pattern": "cryptography.hazmat.primitives.ciphers.algorithms.IDEA(...)",
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.insecure-hash-function.insecure-hash-function",
      "languages": [
        "python"
      ],
      "message": "Detected use of an insecure MD4 or MD5 hash function. These functions have known vulnerabilities and are considered deprecated. Consider using 'SHA256' or a similar function instead.",
      "metadata": {
        "asvs": {
          "control_id": "6.2.2 Insecure Custom Algorithm",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms",
          "section": "V6 Stored Cryptography Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://tools.ietf.org/html/rfc6151",
          "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "OrU30g",
            "url": "https://semgrep.dev/playground/r/vdT3WD/python.lang.security.insecure-hash-function.insecure-hash-function",
            "version_id": "vdT3WD"
          }
        },
        "shortlink": "https://sg.run/rdBn",
        "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-function.insecure-hash-function",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/hashlib_new_insecure_functions.py",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern-either": [
        {
          "pattern": "hashlib.new(\"=~/[M|m][D|d][4|5]/\", ...)"
        },
        {
          "pattern": "hashlib.new(..., name=\"=~/[M|m][D|d][4|5]/\", ...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.aws-lambda.security.tainted-pickle-deserialization.tainted-pickle-deserialization",
      "languages": [
        "python"
      ],
      "message": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-502: Deserialization of Untrusted Data"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A08:2017 - Insecure Deserialization",
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/pickle.html",
          "https://davidhamann.de/2020/04/05/exploiting-python-pickle/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "JDUDQg",
            "url": "https://semgrep.dev/playground/r/ExTYGB/python.aws-lambda.security.tainted-pickle-deserialization.tainted-pickle-deserialization",
            "version_id": "ExTYGB"
          }
        },
        "shortlink": "https://sg.run/JbjW",
        "source": "https://semgrep.dev/r/python.aws-lambda.security.tainted-pickle-deserialization.tainted-pickle-deserialization",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python",
          "aws-lambda"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern": "$SINK"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "pickle.load($SINK,...)"
                },
                {
                  "pattern-inside": "pickle.loads($SINK,...)"
                },
                {
                  "pattern-inside": "_pickle.load($SINK,...)"
                },
                {
                  "pattern-inside": "_pickle.loads($SINK,...)"
                },
                {
                  "pattern-inside": "cPickle.load($SINK,...)"
                },
                {
                  "pattern-inside": "cPickle.loads($SINK,...)"
                },
                {
                  "pattern-inside": "dill.load($SINK,...)"
                },
                {
                  "pattern-inside": "dill.loads($SINK,...)"
                },
                {
                  "pattern-inside": "shelve.open($SINK,...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size",
      "languages": [
        "python"
      ],
      "message": "Detected an insufficient key size for RSA. NIST recommends a key size of 2048 or higher.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-326: Inadequate Encryption Strength"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "BYUBWe",
            "url": "https://semgrep.dev/playground/r/RGTw1l/python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size",
            "version_id": "RGTw1l"
          }
        },
        "shortlink": "https://sg.run/PprY",
        "source": "https://semgrep.dev/r/python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pycryptodome"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "Crypto.PublicKey.RSA.generate(..., bits=$SIZE, ...)"
            },
            {
              "pattern": "Crypto.PublicKey.RSA.generate($SIZE, ...)"
            },
            {
              "pattern": "Cryptodome.PublicKey.RSA.generate(..., bits=$SIZE, ...)"
            },
            {
              "pattern": "Cryptodome.PublicKey.RSA.generate($SIZE, ...)"
            }
          ]
        },
        {
          "metavariable-comparison": {
            "comparison": "$SIZE < 2048",
            "metavariable": "$SIZE"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.audit.insecure-file-permissions.insecure-file-permissions",
      "languages": [
        "python"
      ],
      "message": "These permissions `$BITS` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-276: Incorrect Default Permissions"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "zdUYqR",
            "url": "https://semgrep.dev/playground/r/ExTYkN/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions",
            "version_id": "ExTYkN"
          }
        },
        "shortlink": "https://sg.run/AXY4",
        "source": "https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "os.$METHOD(...)"
        },
        {
          "metavariable-pattern": {
            "metavariable": "$METHOD",
            "patterns": [
              {
                "pattern-either": [
                  {
                    "pattern": "chmod"
                  },
                  {
                    "pattern": "lchmod"
                  },
                  {
                    "pattern": "fchmod"
                  }
                ]
              }
            ]
          }
        },
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern": "os.$METHOD($FILE, $BITS, ...)"
                },
                {
                  "metavariable-comparison": {
                    "comparison": "$BITS >= 0o650 and $BITS < 0o100000",
                    "metavariable": "$BITS"
                  }
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern": "os.$METHOD($FILE, $BITS)"
                },
                {
                  "metavariable-comparison": {
                    "comparison": "$BITS >= 0o100650",
                    "metavariable": "$BITS"
                  }
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern": "os.$METHOD($FILE, $BITS, ...)"
                },
                {
                  "metavariable-pattern": {
                    "metavariable": "$BITS",
                    "patterns": [
                      {
                        "pattern-either": [
                          {
                            "pattern": "<... stat.S_IWGRP ...>"
                          },
                          {
                            "pattern": "<... stat.S_IXGRP ...>"
                          },
                          {
                            "pattern": "<... stat.S_IWOTH ...>"
                          },
                          {
                            "pattern": "<... stat.S_IXOTH ...>"
                          },
                          {
                            "pattern": "<... stat.S_IRWXO ...>"
                          },
                          {
                            "pattern": "<... stat.S_IRWXG ...>"
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern": "os.$METHOD($FILE, $EXPR | $MOD, ...)"
                },
                {
                  "metavariable-comparison": {
                    "comparison": "$MOD == 0o111",
                    "metavariable": "$MOD"
                  }
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.cryptography.security.insecure-cipher-mode-ecb.insecure-cipher-mode-ecb",
      "languages": [
        "python"
      ],
      "message": "Detected ECB cipher mode which is considered insecure. The algorithm can potentially leak information about the plaintext. Use CBC mode instead.",
      "metadata": {
        "bandit-code": "B305",
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://crypto.stackexchange.com/questions/20941/why-shouldnt-i-use-ecb-encryption"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "DbUp5g",
            "url": "https://semgrep.dev/playground/r/3ZTxvB/python.cryptography.security.insecure-cipher-mode-ecb.insecure-cipher-mode-ecb",
            "version_id": "3ZTxvB"
          }
        },
        "shortlink": "https://sg.run/4xr5",
        "source": "https://semgrep.dev/r/python.cryptography.security.insecure-cipher-mode-ecb.insecure-cipher-mode-ecb",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L101",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "cryptography"
        ]
      },
      "pattern": "cryptography.hazmat.primitives.ciphers.modes.ECB(...)",
      "severity": "WARNING"
    },
    {
      "id": "python.flask.security.injection.csv-writer-injection.csv-writer-injection",
      "languages": [
        "python"
      ],
      "message": "Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-1236: Improper Neutralization of Formula Elements in a CSV File"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://github.com/raphaelm/defusedcsv",
          "https://owasp.org/www-community/attacks/CSV_Injection",
          "https://web.archive.org/web/20220516052229/https://www.contextis.com/us/blog/comma-separated-vulnerabilities"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "L1UR2K",
            "url": "https://semgrep.dev/playground/r/1QTXDj/python.flask.security.injection.csv-writer-injection.csv-writer-injection",
            "version_id": "1QTXDj"
          }
        },
        "shortlink": "https://sg.run/JzqQ",
        "source": "https://semgrep.dev/r/python.flask.security.injection.csv-writer-injection.csv-writer-injection",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python",
          "flask"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-inside": "$WRITER = csv.writer(...)\n\n...\n\n$WRITER.$WRITE(...)\n"
            },
            {
              "pattern": "$WRITER.$WRITE(...)"
            },
            {
              "metavariable-regex": {
                "metavariable": "$WRITE",
                "regex": "^(writerow|writerows|writeheader)$"
              }
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "flask.request.form.get(...)"
                        },
                        {
                          "pattern": "flask.request.form[...]"
                        },
                        {
                          "pattern": "flask.request.args.get(...)"
                        },
                        {
                          "pattern": "flask.request.args[...]"
                        },
                        {
                          "pattern": "flask.request.values.get(...)"
                        },
                        {
                          "pattern": "flask.request.values[...]"
                        },
                        {
                          "pattern": "flask.request.cookies.get(...)"
                        },
                        {
                          "pattern": "flask.request.cookies[...]"
                        },
                        {
                          "pattern": "flask.request.stream"
                        },
                        {
                          "pattern": "flask.request.headers.get(...)"
                        },
                        {
                          "pattern": "flask.request.headers[...]"
                        },
                        {
                          "pattern": "flask.request.data"
                        },
                        {
                          "pattern": "flask.request.full_path"
                        },
                        {
                          "pattern": "flask.request.url"
                        },
                        {
                          "pattern": "flask.request.json"
                        },
                        {
                          "pattern": "flask.request.get_json()"
                        },
                        {
                          "pattern": "flask.request.view_args.get(...)"
                        },
                        {
                          "pattern": "flask.request.view_args[...]"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern": "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
                    },
                    {
                      "focus-metavariable": "$ROUTEVAR"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "fix-regex": {
        "regex": "(.*)\\)",
        "replacement": "\\1, autoescape=True)"
      },
      "id": "python.jinja2.security.audit.missing-autoescape-disabled.missing-autoescape-disabled",
      "languages": [
        "python"
      ],
      "message": "Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape by default. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-116: Improper Encoding or Escaping of Output"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://jinja.palletsprojects.com/en/2.11.x/api/#basics"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "3qULRx",
            "url": "https://semgrep.dev/playground/r/PkTnYn/python.jinja2.security.audit.missing-autoescape-disabled.missing-autoescape-disabled",
            "version_id": "PkTnYn"
          }
        },
        "shortlink": "https://sg.run/8kY4",
        "source": "https://semgrep.dev/r/python.jinja2.security.audit.missing-autoescape-disabled.missing-autoescape-disabled",
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b701_jinja2_autoescape_false.html",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "jinja2"
        ]
      },
      "patterns": [
        {
          "pattern-not": "jinja2.Environment(..., autoescape=$VAL, ...)"
        },
        {
          "pattern": "jinja2.Environment(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.jwt.security.jwt-none-alg.jwt-python-none-alg",
      "languages": [
        "python"
      ],
      "message": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "j2UvKw",
            "url": "https://semgrep.dev/playground/r/RGTwbW/python.jwt.security.jwt-none-alg.jwt-python-none-alg",
            "version_id": "RGTwbW"
          }
        },
        "shortlink": "https://sg.run/Yvp4",
        "source": "https://semgrep.dev/r/python.jwt.security.jwt-none-alg.jwt-python-none-alg",
        "source-rule-url": "https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "jwt"
        ]
      },
      "pattern-either": [
        {
          "pattern": "jwt.encode(...,algorithm=\"none\",...)\n"
        },
        {
          "pattern": "jwt.decode(...,algorithms=[...,\"none\",...],...)"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.lang.security.audit.dangerous-system-call-tainted-env-args.dangerous-system-call-tainted-env-args",
      "languages": [
        "python"
      ],
      "message": "Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.",
      "metadata": {
        "asvs": {
          "control_id": "5.2.4 Dyanmic Code Execution Features",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "DbUR9g",
            "url": "https://semgrep.dev/playground/r/NdTQOg/python.lang.security.audit.dangerous-system-call-tainted-env-args.dangerous-system-call-tainted-env-args",
            "version_id": "NdTQOg"
          }
        },
        "shortlink": "https://sg.run/XR2K",
        "source": "https://semgrep.dev/r/python.lang.security.audit.dangerous-system-call-tainted-env-args.dangerous-system-call-tainted-env-args",
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-not": "os.$W(\"...\", ...)"
            },
            {
              "pattern-either": [
                {
                  "pattern": "os.system(...)"
                },
                {
                  "pattern": "$X = __import__(\"os\")\n...\n$X.system(...)\n"
                },
                {
                  "pattern": "$X = __import__(\"os\")\n...\ngetattr($X, \"system\")(...)\n"
                },
                {
                  "pattern": "$X = getattr(os, \"system\")\n...\n$X(...)\n"
                },
                {
                  "pattern": "$X = __import__(\"os\")\n...\n$Y = getattr($X, \"system\")\n...\n$Y(...)\n"
                },
                {
                  "pattern": "os.popen(...)"
                },
                {
                  "pattern": "os.popen2(...)"
                },
                {
                  "pattern": "os.popen3(...)"
                },
                {
                  "pattern": "os.popen4(...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "os.environ"
                        },
                        {
                          "pattern": "os.environ.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.environb"
                        },
                        {
                          "pattern": "os.environb.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.getenv('$ANYTHING', ...)"
                        },
                        {
                          "pattern": "os.getenvb('$ANYTHING', ...)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern": "sys.argv"
                                },
                                {
                                  "pattern": "sys.orig_argv"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = argparse.ArgumentParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = optparse.OptionParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.getopt(...)\n...\n"
                                },
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.gnu_getopt(...)\n...\n"
                                }
                              ]
                            },
                            {
                              "pattern-either": [
                                {
                                  "patterns": [
                                    {
                                      "pattern-inside": "for $O, $A in $OPTS:\n  ...\n"
                                    },
                                    {
                                      "pattern": "$A"
                                    }
                                  ]
                                },
                                {
                                  "pattern": "$ARGS"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute",
      "languages": [
        "python"
      ],
      "message": "User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "2ZUbDL",
            "url": "https://semgrep.dev/playground/r/DkT4q8/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute",
            "version_id": "DkT4q8"
          }
        },
        "shortlink": "https://sg.run/qx7y",
        "source": "https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "$CURSOR.execute(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$CURSOR.execute(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$CURSOR.execute(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$CURSOR.execute(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$CURSOR.execute(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$CURSOR.execute(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = $CURSOR.execute(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "return $CURSOR.execute(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., request.$W(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$CURSOR.execute(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$CURSOR.execute(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$CURSOR.execute(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$CURSOR.execute(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$CURSOR.execute(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = $CURSOR.execute(..., request.$W(...), ...)"
            },
            {
              "pattern": "return $CURSOR.execute(..., request.$W(...), ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., request.$W[...], ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$CURSOR.execute(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$CURSOR.execute(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$CURSOR.execute(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$CURSOR.execute(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$CURSOR.execute(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = $CURSOR.execute(..., request.$W[...], ...)"
            },
            {
              "pattern": "return $CURSOR.execute(..., request.$W[...], ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., $S % request.$W, ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "$CURSOR.execute(..., request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$CURSOR.execute(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$CURSOR.execute(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$CURSOR.execute(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$CURSOR.execute(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$CURSOR.execute(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\n$CURSOR.execute(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = $CURSOR.execute(..., request.$W, ...)"
            },
            {
              "pattern": "return $CURSOR.execute(..., request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$CURSOR.execute($STR % (..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$CURSOR.execute($STR % (..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$CURSOR.execute($STR % (..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$CURSOR.execute($STR % (..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\n$CURSOR.execute($INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\n$CURSOR.execute($INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\n$CURSOR.execute($INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\n$CURSOR.execute($INTERM, ...)"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.django.security.injection.sql.sql-injection-using-raw.sql-injection-using-raw",
      "languages": [
        "python"
      ],
      "message": "Data that is possible user-controlled from a python request is passed to `raw()`. This could lead to SQL injection and attackers gaining access to protected information. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "X5U8v5",
            "url": "https://semgrep.dev/playground/r/YDT838/python.django.security.injection.sql.sql-injection-using-raw.sql-injection-using-raw",
            "version_id": "YDT838"
          }
        },
        "shortlink": "https://sg.run/l2v9",
        "source": "https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-raw.sql-injection-using-raw",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "$MODEL.objects.raw(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$MODEL.objects.raw(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$MODEL.objects.raw(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$MODEL.objects.raw(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$MODEL.objects.raw(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$MODEL.objects.raw(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = $MODEL.objects.raw(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "return $MODEL.objects.raw(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., request.$W(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$MODEL.objects.raw(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$MODEL.objects.raw(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$MODEL.objects.raw(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$MODEL.objects.raw(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$MODEL.objects.raw(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = $MODEL.objects.raw(..., request.$W(...), ...)"
            },
            {
              "pattern": "return $MODEL.objects.raw(..., request.$W(...), ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., request.$W[...], ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$MODEL.objects.raw(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$MODEL.objects.raw(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$MODEL.objects.raw(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$MODEL.objects.raw(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$MODEL.objects.raw(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = $MODEL.objects.raw(..., request.$W[...], ...)"
            },
            {
              "pattern": "return $MODEL.objects.raw(..., request.$W[...], ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., $S % request.$W, ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "$MODEL.objects.raw(..., request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$MODEL.objects.raw(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$MODEL.objects.raw(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$MODEL.objects.raw(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$MODEL.objects.raw(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$MODEL.objects.raw(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = $MODEL.objects.raw(..., request.$W, ...)"
            },
            {
              "pattern": "return $MODEL.objects.raw(..., request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$MODEL.objects.raw($STR % (..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$MODEL.objects.raw($STR % (..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$MODEL.objects.raw($STR % (..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$MODEL.objects.raw($STR % (..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\n$MODEL.objects.raw($INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\n$MODEL.objects.raw($INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\n$MODEL.objects.raw($INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\n$MODEL.objects.raw($INTERM, ...)\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.django.security.injection.raw-html-format.raw-html-format",
      "languages": [
        "python"
      ],
      "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render",
          "https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "2ZUPER",
            "url": "https://semgrep.dev/playground/r/A8Tn65/python.django.security.injection.raw-html-format.raw-html-format",
            "version_id": "A8Tn65"
          }
        },
        "shortlink": "https://sg.run/oYj1",
        "source": "https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "pattern": "django.utils.html.escape(...)"
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "\"$HTMLSTR\" % ..."
                        },
                        {
                          "pattern": "\"$HTMLSTR\".format(...)"
                        },
                        {
                          "pattern": "\"$HTMLSTR\" + ..."
                        },
                        {
                          "pattern": "f\"$HTMLSTR{...}...\""
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "$HTML = \"$HTMLSTR\"\n...\n"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "$HTML % ..."
                        },
                        {
                          "pattern": "$HTML.format(...)"
                        },
                        {
                          "pattern": "$HTML + ..."
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "metavariable-pattern": {
                "language": "generic",
                "metavariable": "$HTMLSTR",
                "pattern": "<$TAG ..."
              }
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "request.$ANYTHING"
            },
            {
              "pattern-not": "request.build_absolute_uri"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.dangerous-spawn-process.dangerous-spawn-process",
      "languages": [
        "python"
      ],
      "message": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "lBUJrn",
            "url": "https://semgrep.dev/playground/r/1QTXg4/python.lang.security.dangerous-spawn-process.dangerous-spawn-process",
            "version_id": "1QTXg4"
          }
        },
        "shortlink": "https://sg.run/r8Zn",
        "source": "https://semgrep.dev/r/python.lang.security.dangerous-spawn-process.dangerous-spawn-process",
        "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-not": "os.$METHOD($MODE, \"...\", ...)"
                    },
                    {
                      "pattern-inside": "os.$METHOD($MODE, $CMD, ...)"
                    },
                    {
                      "pattern": "$CMD"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(spawnl|spawnle|spawnlp|spawnlpe|spawnv|spawnve|spawnvp|spawnvp|spawnvpe|posix_spawn|posix_spawnp|startfile)"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "os.$METHOD($MODE, \"...\", [\"...\",\"...\",...], ...)"
                    },
                    {
                      "pattern-inside": "os.$METHOD($MODE, $BASH, [\"-c\",$CMD,...],...)"
                    },
                    {
                      "pattern": "$CMD"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(spawnv|spawnve|spawnvp|spawnvp|spawnvpe|posix_spawn|posix_spawnp)"
                      }
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$BASH",
                        "regex": "(.*)(sh|bash|ksh|csh|tcsh|zsh)"
                      }
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-not": "os.$METHOD($MODE, \"...\", \"...\", \"...\", ...)"
                    },
                    {
                      "pattern-inside": "os.$METHOD($MODE, $BASH, \"-c\", $CMD,...)"
                    },
                    {
                      "pattern": "$CMD"
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$METHOD",
                        "regex": "(spawnl|spawnle|spawnlp|spawnlpe)"
                      }
                    },
                    {
                      "metavariable-regex": {
                        "metavariable": "$BASH",
                        "regex": "(.*)(sh|bash|ksh|csh|tcsh|zsh)"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "flask.request.form.get(...)"
                        },
                        {
                          "pattern": "flask.request.form[...]"
                        },
                        {
                          "pattern": "flask.request.args.get(...)"
                        },
                        {
                          "pattern": "flask.request.args[...]"
                        },
                        {
                          "pattern": "flask.request.values.get(...)"
                        },
                        {
                          "pattern": "flask.request.values[...]"
                        },
                        {
                          "pattern": "flask.request.cookies.get(...)"
                        },
                        {
                          "pattern": "flask.request.cookies[...]"
                        },
                        {
                          "pattern": "flask.request.stream"
                        },
                        {
                          "pattern": "flask.request.headers.get(...)"
                        },
                        {
                          "pattern": "flask.request.headers[...]"
                        },
                        {
                          "pattern": "flask.request.data"
                        },
                        {
                          "pattern": "flask.request.full_path"
                        },
                        {
                          "pattern": "flask.request.url"
                        },
                        {
                          "pattern": "flask.request.json"
                        },
                        {
                          "pattern": "flask.request.get_json()"
                        },
                        {
                          "pattern": "flask.request.view_args.get(...)"
                        },
                        {
                          "pattern": "flask.request.view_args[...]"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
                            },
                            {
                              "pattern": "$ROUTEVAR"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "def $FUNC(request, ...):\n  ...\n"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "request.$PROPERTY.get(...)"
                        },
                        {
                          "pattern": "request.$PROPERTY[...]"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "@rest_framework.decorators.api_view(...)\ndef $FUNC($REQ, ...):\n  ...\n"
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.views.APIView, ...):\n  ...\n"
                                },
                                {
                                  "pattern-inside": "class $VIEW(..., rest_framework.generics.GenericAPIView, ...):\n  ...                              \n"
                                }
                              ]
                            },
                            {
                              "pattern-inside": "def $METHOD(self, $REQ, ...):\n  ...\n"
                            },
                            {
                              "metavariable-regex": {
                                "metavariable": "$METHOD",
                                "regex": "(get|post|put|patch|delete|head)"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "$REQ.POST.get(...)"
                        },
                        {
                          "pattern": "$REQ.POST[...]"
                        },
                        {
                          "pattern": "$REQ.FILES.get(...)"
                        },
                        {
                          "pattern": "$REQ.FILES[...]"
                        },
                        {
                          "pattern": "$REQ.DATA.get(...)"
                        },
                        {
                          "pattern": "$REQ.DATA[...]"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS.get(...)"
                        },
                        {
                          "pattern": "$REQ.QUERY_PARAMS[...]"
                        },
                        {
                          "pattern": "$REQ.data.get(...)"
                        },
                        {
                          "pattern": "$REQ.data[...]"
                        },
                        {
                          "pattern": "$REQ.query_params.get(...)"
                        },
                        {
                          "pattern": "$REQ.query_params[...]"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.content_type"
                        },
                        {
                          "pattern": "$REQ.stream"
                        },
                        {
                          "pattern": "$REQ.stream"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern-inside": "class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.StreamRequestHandler, ...):\n  ...\n"
                        },
                        {
                          "pattern-inside": "class $SERVER(..., http.server.DatagramRequestHandler, ...):\n  ...\n"
                        }
                      ]
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "self.requestline"
                        },
                        {
                          "pattern": "self.path"
                        },
                        {
                          "pattern": "self.headers[...]"
                        },
                        {
                          "pattern": "self.headers.get(...)"
                        },
                        {
                          "pattern": "self.rfile"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "@pyramid.view.view_config( ... )\ndef $VIEW($REQ):\n  ...\n"
                    },
                    {
                      "pattern": "$REQ.$ANYTHING"
                    },
                    {
                      "pattern-not": "$REQ.dbsession"
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "os.environ['$ANYTHING']"
                        },
                        {
                          "pattern": "os.environ.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.environb['$ANYTHING']"
                        },
                        {
                          "pattern": "os.environb.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.getenv('$ANYTHING', ...)"
                        },
                        {
                          "pattern": "os.getenvb('$ANYTHING', ...)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern": "sys.argv[...]"
                                },
                                {
                                  "pattern": "sys.orig_argv[...]"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = argparse.ArgumentParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = optparse.OptionParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.getopt(...)\n...\n"
                                },
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.gnu_getopt(...)\n...\n"
                                }
                              ]
                            },
                            {
                              "pattern-either": [
                                {
                                  "patterns": [
                                    {
                                      "pattern-inside": "for $O, $A in $OPTS:\n  ...\n"
                                    },
                                    {
                                      "pattern": "$A"
                                    }
                                  ]
                                },
                                {
                                  "pattern": "$ARGS"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.pycryptodome.security.insecure-hash-algorithm-md5.insecure-hash-algorithm-md5",
      "languages": [
        "python"
      ],
      "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html",
          "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability",
          "http://2012.sharcs.org/slides/stevens.pdf",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "DbUXwo",
            "url": "https://semgrep.dev/playground/r/JdTZ7r/python.pycryptodome.security.insecure-hash-algorithm-md5.insecure-hash-algorithm-md5",
            "version_id": "JdTZ7r"
          }
        },
        "shortlink": "https://sg.run/85JN",
        "source": "https://semgrep.dev/r/python.pycryptodome.security.insecure-hash-algorithm-md5.insecure-hash-algorithm-md5",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pycryptodome"
        ]
      },
      "pattern-either": [
        {
          "pattern": "Crypto.Hash.MD5.new(...)"
        },
        {
          "pattern": "Cryptodome.Hash.MD5.new (...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.pycryptodome.security.insecure-hash-algorithm-md2.insecure-hash-algorithm-md2",
      "languages": [
        "python"
      ],
      "message": "Detected MD2 hash algorithm which is considered insecure. MD2 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html",
          "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability",
          "http://2012.sharcs.org/slides/stevens.pdf",
          "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "AbU0Ex",
            "url": "https://semgrep.dev/playground/r/44TYvr/python.pycryptodome.security.insecure-hash-algorithm-md2.insecure-hash-algorithm-md2",
            "version_id": "44TYvr"
          }
        },
        "shortlink": "https://sg.run/7JP2",
        "source": "https://semgrep.dev/r/python.pycryptodome.security.insecure-hash-algorithm-md2.insecure-hash-algorithm-md2",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pycryptodome"
        ]
      },
      "pattern-either": [
        {
          "pattern": "Crypto.Hash.MD2.new(...)"
        },
        {
          "pattern": "Cryptodome.Hash.MD2.new (...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.aws-lambda.security.dangerous-asyncio-shell.dangerous-asyncio-shell",
      "languages": [
        "python"
      ],
      "message": "Detected asyncio subprocess function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.python.org/3/library/asyncio-subprocess.html",
          "https://docs.python.org/3/library/shlex.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "L1UEl7",
            "url": "https://semgrep.dev/playground/r/yeTdjl/python.aws-lambda.security.dangerous-asyncio-shell.dangerous-asyncio-shell",
            "version_id": "yeTdjl"
          }
        },
        "shortlink": "https://sg.run/p9vZ",
        "source": "https://semgrep.dev/r/python.aws-lambda.security.dangerous-asyncio-shell.dangerous-asyncio-shell",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python",
          "aws-lambda"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern": "$CMD"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "$LOOP.subprocess_shell($PROTOCOL, $CMD)"
                },
                {
                  "pattern-inside": "asyncio.subprocess.create_subprocess_shell($CMD, ...)"
                },
                {
                  "pattern-inside": "asyncio.create_subprocess_shell($CMD, ...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.lang.security.audit.dangerous-asyncio-shell-tainted-env-args.dangerous-asyncio-shell-tainted-env-args",
      "languages": [
        "python"
      ],
      "message": "Detected asyncio subprocess function with user controlled data. You may consider using 'shlex.escape()'.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.python.org/3/library/asyncio-subprocess.html",
          "https://docs.python.org/3/library/shlex.html",
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "8GU5q3",
            "url": "https://semgrep.dev/playground/r/YDT8o9/python.lang.security.audit.dangerous-asyncio-shell-tainted-env-args.dangerous-asyncio-shell-tainted-env-args",
            "version_id": "YDT8o9"
          }
        },
        "shortlink": "https://sg.run/Dx8Y",
        "source": "https://semgrep.dev/r/python.lang.security.audit.dangerous-asyncio-shell-tainted-env-args.dangerous-asyncio-shell-tainted-env-args",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "$LOOP.subprocess_shell($PROTOCOL, $CMD)"
                },
                {
                  "pattern-inside": "asyncio.subprocess.create_subprocess_shell($CMD, ...)"
                },
                {
                  "pattern-inside": "asyncio.create_subprocess_shell($CMD, ...)"
                }
              ]
            },
            {
              "focus-metavariable": "$CMD"
            },
            {
              "pattern-not-inside": "$CMD = \"...\"\n...\n"
            },
            {
              "pattern-not": "$LOOP.subprocess_shell($PROTOCOL, \"...\")"
            },
            {
              "pattern-not": "asyncio.subprocess.create_subprocess_shell(\"...\", ...)"
            },
            {
              "pattern-not": "asyncio.create_subprocess_shell(\"...\", ...)"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "os.environ"
                        },
                        {
                          "pattern": "os.environ.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.environb"
                        },
                        {
                          "pattern": "os.environb.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.getenv('$ANYTHING', ...)"
                        },
                        {
                          "pattern": "os.getenvb('$ANYTHING', ...)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern": "sys.argv"
                                },
                                {
                                  "pattern": "sys.orig_argv"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = argparse.ArgumentParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = optparse.OptionParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.getopt(...)\n...\n"
                                },
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.gnu_getopt(...)\n...\n"
                                }
                              ]
                            },
                            {
                              "pattern-either": [
                                {
                                  "patterns": [
                                    {
                                      "pattern-inside": "for $O, $A in $OPTS:\n  ...\n"
                                    },
                                    {
                                      "pattern": "$A"
                                    }
                                  ]
                                },
                                {
                                  "pattern": "$ARGS"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "fix-regex": {
        "regex": "_create_unverified_context",
        "replacement": "create_default_context"
      },
      "id": "python.lang.security.unverified-ssl-context.unverified-ssl-context",
      "languages": [
        "python"
      ],
      "message": "Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context' instead.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-295: Improper Certificate Validation"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://docs.python.org/3/library/ssl.html#ssl-security",
          "https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "v8UnkQ",
            "url": "https://semgrep.dev/playground/r/bZTJeE/python.lang.security.unverified-ssl-context.unverified-ssl-context",
            "version_id": "bZTJeE"
          }
        },
        "shortlink": "https://sg.run/N4lp",
        "source": "https://semgrep.dev/r/python.lang.security.unverified-ssl-context.unverified-ssl-context",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "ssl._create_unverified_context(...)"
            },
            {
              "pattern": "ssl._create_default_https_context = ssl._create_unverified_context"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.aws-lambda.security.tainted-sql-string.tainted-sql-string",
      "languages": [
        "python"
      ],
      "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/SQL_Injection"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "AbU3LX",
            "url": "https://semgrep.dev/playground/r/7ZTY2z/python.aws-lambda.security.tainted-sql-string.tainted-sql-string",
            "version_id": "7ZTY2z"
          }
        },
        "shortlink": "https://sg.run/wXvA",
        "source": "https://semgrep.dev/r/python.aws-lambda.security.tainted-sql-string.tainted-sql-string",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "aws-lambda"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "\"$SQLSTR\" + ...\n"
                },
                {
                  "pattern": "\"$SQLSTR\" % ...\n"
                },
                {
                  "pattern": "\"$SQLSTR\".format(...)\n"
                },
                {
                  "pattern": "f\"$SQLSTR{...}...\"\n"
                }
              ]
            },
            {
              "metavariable-regex": {
                "metavariable": "$SQLSTR",
                "regex": "\\s*(?i)(select|delete|insert|create|update|alter|drop)\\b.*="
              }
            },
            {
              "pattern-not-inside": "print(...)\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.aws-lambda.security.dynamodb-filter-injection.dynamodb-filter-injection",
      "languages": [
        "python"
      ],
      "message": "Detected DynamoDB query filter that is tainted by `$EVENT` object. This could lead to NoSQL injection if the variable is user-controlled and not properly sanitized. Explicitly assign query params instead of passing data from `$EVENT` directly to DynamoDB client.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-943: Improper Neutralization of Special Elements in Data Query Logic"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A01:2017 - Injection"
        ],
        "references": [
          "https://medium.com/appsecengineer/dynamodb-injection-1db99c2454ac"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "KxUJ2B",
            "url": "https://semgrep.dev/playground/r/kbTZXl/python.aws-lambda.security.dynamodb-filter-injection.dynamodb-filter-injection",
            "version_id": "kbTZXl"
          }
        },
        "shortlink": "https://sg.run/jjrl",
        "source": "https://semgrep.dev/r/python.aws-lambda.security.dynamodb-filter-injection.dynamodb-filter-injection",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python",
          "boto3",
          "aws-lambda",
          "dynamodb"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "patterns": [
            {
              "pattern": "{...}\n"
            }
          ]
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern": "$SINK"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "$TABLE.scan(..., ScanFilter = $SINK, ...)"
                },
                {
                  "pattern-inside": "$TABLE.query(..., QueryFilter = $SINK, ...)"
                }
              ]
            },
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-inside": "$TABLE = $DB.Table(...)\n...\n"
                    },
                    {
                      "pattern-inside": "$DB = boto3.resource('dynamodb', ...)\n...\n"
                    }
                  ]
                },
                {
                  "pattern-inside": "$TABLE = boto3.client('dynamodb', ...)\n...\n"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.pycryptodome.security.insecure-cipher-algorithm-rc4.insecure-cipher-algorithm-rc4",
      "languages": [
        "python"
      ],
      "message": "Detected ARC4 cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.",
      "metadata": {
        "bandit-code": "B304",
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/326.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "ReUnEB",
            "url": "https://semgrep.dev/playground/r/QkTQKP/python.pycryptodome.security.insecure-cipher-algorithm-rc4.insecure-cipher-algorithm-rc4",
            "version_id": "QkTQKP"
          }
        },
        "shortlink": "https://sg.run/Eo6N",
        "source": "https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm-rc4.insecure-cipher-algorithm-rc4",
        "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pycryptodome"
        ]
      },
      "pattern-either": [
        {
          "pattern": "Cryptodome.Cipher.ARC4.new(...)"
        },
        {
          "pattern": "Crypto.Cipher.ARC4.new(...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.deserialization.avoid-unsafe-ruamel.avoid-unsafe-ruamel",
      "languages": [
        "python"
      ],
      "message": "Avoid using unsafe `ruamel.yaml.YAML()`. `ruamel.yaml.YAML` can create arbitrary Python objects. A malicious actor could exploit this to run arbitrary code. Use `YAML(typ='rt')` or `YAML(typ='safe')` instead.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-502: Deserialization of Untrusted Data"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A08:2017 - Insecure Deserialization",
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://yaml.readthedocs.io/en/latest/basicuse.html?highlight=typ"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "nJUzqK",
            "url": "https://semgrep.dev/playground/r/w8T0QN/python.lang.security.deserialization.avoid-unsafe-ruamel.avoid-unsafe-ruamel",
            "version_id": "w8T0QN"
          }
        },
        "shortlink": "https://sg.run/x1rz",
        "source": "https://semgrep.dev/r/python.lang.security.deserialization.avoid-unsafe-ruamel.avoid-unsafe-ruamel",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "ruamel.yaml"
        ]
      },
      "pattern-either": [
        {
          "pattern": "ruamel.yaml.YAML(..., typ='unsafe', ...)"
        },
        {
          "pattern": "ruamel.yaml.YAML(..., typ='base', ...)"
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.aws-lambda.security.dangerous-asyncio-exec.dangerous-asyncio-exec",
      "languages": [
        "python"
      ],
      "message": "Detected subprocess function '$LOOP.subprocess_exec' with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec",
          "https://docs.python.org/3/library/shlex.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "7KUxXg",
            "url": "https://semgrep.dev/playground/r/9lTnB2/python.aws-lambda.security.dangerous-asyncio-exec.dangerous-asyncio-exec",
            "version_id": "9lTnB2"
          }
        },
        "shortlink": "https://sg.run/z14d",
        "source": "https://semgrep.dev/r/python.aws-lambda.security.dangerous-asyncio-exec.dangerous-asyncio-exec",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python",
          "aws-lambda"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern": "$CMD"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "$LOOP.subprocess_exec($PROTOCOL, $CMD, ...)"
                },
                {
                  "pattern-inside": "$LOOP.subprocess_exec($PROTOCOL, [$CMD, ...], ...)"
                },
                {
                  "pattern-inside": "$LOOP.subprocess_exec($PROTOCOL, \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", $CMD, ...)"
                },
                {
                  "pattern-inside": "$LOOP.subprocess_exec($PROTOCOL, [\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", $CMD, ...], ...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "fix": "True\n",
      "id": "python.pyramid.security.csrf-check-disabled-globally.pyramid-csrf-check-disabled-globally",
      "languages": [
        "python"
      ],
      "message": "Automatic check of cross-site request forgery tokens has been explicitly disabled globally, which might leave views unprotected. Use 'pyramid.config.Configurator.set_default_csrf_options(require_csrf=True)' to turn the automatic check for all unsafe methods (per RFC2616).",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-352: Cross-Site Request Forgery (CSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "8GUKqP",
            "url": "https://semgrep.dev/playground/r/1QT084/python.pyramid.security.csrf-check-disabled-globally.pyramid-csrf-check-disabled-globally",
            "version_id": "1QT084"
          }
        },
        "shortlink": "https://sg.run/Bx2R",
        "source": "https://semgrep.dev/r/python.pyramid.security.csrf-check-disabled-globally.pyramid-csrf-check-disabled-globally",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "$CONFIG.set_default_csrf_options(..., require_csrf=$REQUIRE_CSRF, ...)\n"
        },
        {
          "pattern": "$REQUIRE_CSRF"
        },
        {
          "metavariable-comparison": {
            "comparison": "$REQUIRE_CSRF == False",
            "metavariable": "$REQUIRE_CSRF"
          }
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.django.security.injection.email.xss-html-email-body.xss-html-email-body",
      "languages": [
        "python"
      ],
      "message": "Found request data in an EmailMessage that is set to use HTML. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://www.damonkohler.com/2008/12/email-injection.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "qNUj02",
            "url": "https://semgrep.dev/playground/r/3ZTxoB/python.django.security.injection.email.xss-html-email-body.xss-html-email-body",
            "version_id": "3ZTxoB"
          }
        },
        "shortlink": "https://sg.run/RoBe",
        "source": "https://semgrep.dev/r/python.django.security.injection.email.xss-html-email-body.xss-html-email-body",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n  $EMAIL.content_subtype = \"html\"\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "django.core.mail.EmailMessage($SUBJ, request.$W.get(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.core.mail.EmailMessage($SUBJ, $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.core.mail.EmailMessage($SUBJ, $B.$C(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $B.$C(..., $DATA, ...)\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.core.mail.EmailMessage($SUBJ, $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.core.mail.EmailMessage($SUBJ, f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.core.mail.EmailMessage($SUBJ, request.$W.get(...), ...)"
            },
            {
              "pattern": "return django.core.mail.EmailMessage($SUBJ, request.$W.get(...), ...)"
            },
            {
              "pattern": "django.core.mail.EmailMessage($SUBJ, request.$W(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.core.mail.EmailMessage($SUBJ, $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.core.mail.EmailMessage($SUBJ, $B.$C(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $B.$C(..., $DATA, ...)\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.core.mail.EmailMessage($SUBJ, $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.core.mail.EmailMessage($SUBJ, f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.core.mail.EmailMessage($SUBJ, request.$W(...), ...)"
            },
            {
              "pattern": "return django.core.mail.EmailMessage($SUBJ, request.$W(...), ...)"
            },
            {
              "pattern": "django.core.mail.EmailMessage($SUBJ, request.$W[...], ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.core.mail.EmailMessage($SUBJ, $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.core.mail.EmailMessage($SUBJ, $B.$C(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $B.$C(..., $DATA, ...)\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.core.mail.EmailMessage($SUBJ, $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.core.mail.EmailMessage($SUBJ, f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.core.mail.EmailMessage($SUBJ, request.$W[...], ...)"
            },
            {
              "pattern": "return django.core.mail.EmailMessage($SUBJ, request.$W[...], ...)"
            },
            {
              "pattern": "django.core.mail.EmailMessage($SUBJ, request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.core.mail.EmailMessage($SUBJ, $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.core.mail.EmailMessage($SUBJ, $B.$C(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $B.$C(..., $DATA, ...)\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.core.mail.EmailMessage($SUBJ, $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.core.mail.EmailMessage($SUBJ, f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.core.mail.EmailMessage($SUBJ, request.$W, ...)"
            },
            {
              "pattern": "return django.core.mail.EmailMessage($SUBJ, request.$W, ...)"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "fix": "True\n",
      "id": "python.pyramid.audit.authtkt-cookie-httponly-unsafe-value.pyramid-authtkt-cookie-httponly-unsafe-value",
      "languages": [
        "python"
      ],
      "message": "Found a Pyramid Authentication Ticket cookie without the httponly option correctly set. Pyramid cookies should be handled securely by setting httponly=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"
        ],
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "NbUq9e",
            "url": "https://semgrep.dev/playground/r/WrT6rb/python.pyramid.audit.authtkt-cookie-httponly-unsafe-value.pyramid-authtkt-cookie-httponly-unsafe-value",
            "version_id": "WrT6rb"
          }
        },
        "shortlink": "https://sg.run/7DgQ",
        "source": "https://semgrep.dev/r/python.pyramid.audit.authtkt-cookie-httponly-unsafe-value.pyramid-authtkt-cookie-httponly-unsafe-value",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "pyramid"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "patterns": [
                {
                  "pattern-not": "pyramid.authentication.AuthTktCookieHelper(..., **$PARAMS)"
                },
                {
                  "pattern": "pyramid.authentication.AuthTktCookieHelper(..., httponly=$HTTPONLY, ...)"
                }
              ]
            },
            {
              "patterns": [
                {
                  "pattern-not": "pyramid.authentication.AuthTktAuthenticationPolicy(..., **$PARAMS)"
                },
                {
                  "pattern": "pyramid.authentication.AuthTktAuthenticationPolicy(..., httponly=$HTTPONLY, ...)"
                }
              ]
            }
          ]
        },
        {
          "pattern": "$HTTPONLY"
        },
        {
          "metavariable-pattern": {
            "metavariable": "$HTTPONLY",
            "pattern": "False\n"
          }
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.flask.security.injection.raw-html-concat.raw-html-format",
      "languages": [
        "python"
      ],
      "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "GdUrJv",
            "url": "https://semgrep.dev/playground/r/bZT4Gb/python.flask.security.injection.raw-html-concat.raw-html-format",
            "version_id": "bZT4Gb"
          }
        },
        "shortlink": "https://sg.run/Pb7e",
        "source": "https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "flask"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "pattern": "jinja2.escape(...)"
        },
        {
          "pattern": "flask.escape(...)"
        },
        {
          "pattern": "flask.render_template(\"~=/.*\\.html\", ...)"
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "\"$HTMLSTR\" % ..."
                        },
                        {
                          "pattern": "\"$HTMLSTR\".format(...)"
                        },
                        {
                          "pattern": "\"$HTMLSTR\" + ..."
                        },
                        {
                          "pattern": "f\"$HTMLSTR{...}...\""
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "$HTML = \"$HTMLSTR\"\n...\n"
                    },
                    {
                      "pattern-either": [
                        {
                          "pattern": "$HTML % ..."
                        },
                        {
                          "pattern": "$HTML.format(...)"
                        },
                        {
                          "pattern": "$HTML + ..."
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "metavariable-pattern": {
                "language": "generic",
                "metavariable": "$HTMLSTR",
                "pattern": "<$TAG ..."
              }
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "flask.request.$ANYTHING"
                },
                {
                  "patterns": [
                    {
                      "pattern-inside": "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
                    },
                    {
                      "pattern": "$ROUTEVAR"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.django.security.injection.code.user-eval-format-string.user-eval-format-string",
      "languages": [
        "python"
      ],
      "message": "Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute remote code. See https://owasp.org/www-community/attacks/Code_Injection for more information.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "BYUNw9",
            "url": "https://semgrep.dev/playground/r/nWTwBe/python.django.security.injection.code.user-eval-format-string.user-eval-format-string",
            "version_id": "nWTwBe"
          }
        },
        "shortlink": "https://sg.run/4x2z",
        "source": "https://semgrep.dev/r/python.django.security.injection.code.user-eval-format-string.user-eval-format-string",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $F(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "eval(..., $STR % request.$W.get(...), ...)"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\neval(..., $STR % $V, ...)\n"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\n$S = $STR % $V\n...\neval(..., $S, ...)\n"
            },
            {
              "pattern": "eval(..., \"...\" % request.$W(...), ...)"
            },
            {
              "pattern": "$V = request.$W(...)\n...\neval(..., $STR % $V, ...)\n"
            },
            {
              "pattern": "$V = request.$W(...)\n...\n$S = $STR % $V\n...\neval(..., $S, ...)\n"
            },
            {
              "pattern": "eval(..., $STR % request.$W[...], ...)"
            },
            {
              "pattern": "$V = request.$W[...]\n...\neval(..., $STR % $V, ...)\n"
            },
            {
              "pattern": "$V = request.$W[...]\n...\n$S = $STR % $V\n...\neval(..., $S, ...)\n"
            },
            {
              "pattern": "eval(..., $STR.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\neval(..., $STR.format(..., $V, ...), ...)\n"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\n$S = $STR.format(..., $V, ...)\n...\neval(..., $S, ...)\n"
            },
            {
              "pattern": "eval(..., $STR.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "$V = request.$W(...)\n...\neval(..., $STR.format(..., $V, ...), ...)\n"
            },
            {
              "pattern": "$V = request.$W(...)\n...\n$S = $STR.format(..., $V, ...)\n...\neval(..., $S, ...)\n"
            },
            {
              "pattern": "eval(..., $STR.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "$V = request.$W[...]\n...\neval(..., $STR.format(..., $V, ...), ...)\n"
            },
            {
              "pattern": "$V = request.$W[...]\n...\n$S = $STR.format(..., $V, ...)\n...\neval(..., $S, ...)\n"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\neval(..., f\"...{$V}...\", ...)\n"
            },
            {
              "pattern": "$V = request.$W.get(...)\n...\n$S = f\"...{$V}...\"\n...\neval(..., $S, ...)\n"
            },
            {
              "pattern": "$V = request.$W(...)\n...\neval(..., f\"...{$V}...\", ...)\n"
            },
            {
              "pattern": "$V = request.$W(...)\n...\n$S = f\"...{$V}...\"\n...\neval(..., $S, ...)\n"
            },
            {
              "pattern": "$V = request.$W[...]\n...\neval(..., f\"...{$V}...\", ...)\n"
            },
            {
              "pattern": "$V = request.$W[...]\n...\n$S = f\"...{$V}...\"\n...\neval(..., $S, ...)\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.aws-lambda.security.tainted-code-exec.tainted-code-exec",
      "languages": [
        "python"
      ],
      "message": "Detected the use of `exec/eval`.This can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",
      "metadata": {
        "asvs": {
          "control_id": "5.2.4 Dyanmic Code Execution Features",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "GdUDJP",
            "url": "https://semgrep.dev/playground/r/d6TbZB/python.aws-lambda.security.tainted-code-exec.tainted-code-exec",
            "version_id": "d6TbZB"
          }
        },
        "shortlink": "https://sg.run/Ng7y",
        "source": "https://semgrep.dev/r/python.aws-lambda.security.tainted-code-exec.tainted-code-exec",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "eval($CODE, ...)"
                },
                {
                  "pattern": "exec($CODE, ...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests",
      "languages": [
        "python"
      ],
      "message": "Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-918: Server-Side Request Forgery (SSRF)"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A10:2021 - Server-Side Request Forgery (SSRF)"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Server_Side_Request_Forgery"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "j2UvEw",
            "url": "https://semgrep.dev/playground/r/JdTZJ2/python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests",
            "version_id": "JdTZJ2"
          }
        },
        "shortlink": "https://sg.run/YvY4",
        "source": "https://semgrep.dev/r/python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "requests.$METHOD(..., $S.format(..., request.$W.get(...), ...), ...)"
            },
            {
              "pattern": "requests.$METHOD(..., $S % request.$W.get(...), ...)"
            },
            {
              "pattern": "requests.$METHOD(..., f\"...{request.$W.get(...)}...\", ...)"
            },
            {
              "pattern": "requests.$METHOD(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nrequests.$METHOD(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nrequests.$METHOD(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nrequests.$METHOD(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nrequests.$METHOD(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\nrequests.$METHOD(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = requests.$METHOD(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "return requests.$METHOD(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "requests.$METHOD(..., $S.format(..., request.$W(...), ...), ...)"
            },
            {
              "pattern": "requests.$METHOD(..., $S % request.$W(...), ...)"
            },
            {
              "pattern": "requests.$METHOD(..., f\"...{request.$W(...)}...\", ...)"
            },
            {
              "pattern": "requests.$METHOD(..., request.$W(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nrequests.$METHOD(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nrequests.$METHOD(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nrequests.$METHOD(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nrequests.$METHOD(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\nrequests.$METHOD(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = requests.$METHOD(..., request.$W(...), ...)"
            },
            {
              "pattern": "return requests.$METHOD(..., request.$W(...), ...)"
            },
            {
              "pattern": "requests.$METHOD(..., $S.format(..., request.$W[...], ...), ...)"
            },
            {
              "pattern": "requests.$METHOD(..., $S % request.$W[...], ...)"
            },
            {
              "pattern": "requests.$METHOD(..., f\"...{request.$W[...]}...\", ...)"
            },
            {
              "pattern": "requests.$METHOD(..., request.$W[...], ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nrequests.$METHOD(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nrequests.$METHOD(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nrequests.$METHOD(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nrequests.$METHOD(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\nrequests.$METHOD(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = requests.$METHOD(..., request.$W[...], ...)"
            },
            {
              "pattern": "return requests.$METHOD(..., request.$W[...], ...)"
            },
            {
              "pattern": "requests.$METHOD(..., $S.format(..., request.$W, ...), ...)"
            },
            {
              "pattern": "requests.$METHOD(..., $S % request.$W, ...)"
            },
            {
              "pattern": "requests.$METHOD(..., f\"...{request.$W}...\", ...)"
            },
            {
              "pattern": "requests.$METHOD(..., request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\nrequests.$METHOD(..., $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nrequests.$METHOD(..., $STR.format(..., $DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nrequests.$METHOD(..., $STR % $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nrequests.$METHOD(..., f\"...{$DATA}...\", ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\nrequests.$METHOD(..., $STR + $DATA, ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\nrequests.$METHOD(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = requests.$METHOD(..., request.$W, ...)"
            },
            {
              "pattern": "return requests.$METHOD(..., request.$W, ...)"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.lang.security.audit.dangerous-testcapi-run-in-subinterp-tainted-env-args.dangerous-testcapi-run-in-subinterp-tainted-env-args",
      "languages": [
        "python"
      ],
      "message": "Found user controlled content in `run_in_subinterp`. This is dangerous  because it allows a malicious actor to run arbitrary Python code.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
        ],
        "impact": "HIGH",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "0oUK7N",
            "url": "https://semgrep.dev/playground/r/w8T02J/python.lang.security.audit.dangerous-testcapi-run-in-subinterp-tainted-env-args.dangerous-testcapi-run-in-subinterp-tainted-env-args",
            "version_id": "w8T02J"
          }
        },
        "shortlink": "https://sg.run/1DLw",
        "source": "https://semgrep.dev/r/python.lang.security.audit.dangerous-testcapi-run-in-subinterp-tainted-env-args.dangerous-testcapi-run-in-subinterp-tainted-env-args",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern-inside": "_testcapi.run_in_subinterp($PAYLOAD, ...)\n"
                },
                {
                  "pattern-inside": "test.support.run_in_subinterp($PAYLOAD, ...)\n"
                }
              ]
            },
            {
              "pattern": "$PAYLOAD"
            },
            {
              "pattern-not": "_testcapi.run_in_subinterp(\"...\", ...)\n"
            },
            {
              "pattern-not": "test.support.run_in_subinterp(\"...\", ...)\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "pattern": "os.environ"
                        },
                        {
                          "pattern": "os.environ.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.environb"
                        },
                        {
                          "pattern": "os.environb.get('$FOO', ...)"
                        },
                        {
                          "pattern": "os.getenv('$ANYTHING', ...)"
                        },
                        {
                          "pattern": "os.getenvb('$ANYTHING', ...)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "patterns": [
                    {
                      "pattern-either": [
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern": "sys.argv"
                                },
                                {
                                  "pattern": "sys.orig_argv"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = argparse.ArgumentParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-inside": "$PARSER = optparse.OptionParser(...)\n...\n"
                            },
                            {
                              "pattern-inside": "$ARGS = $PARSER.parse_args()\n"
                            },
                            {
                              "pattern": "<... $ARGS ...>"
                            }
                          ]
                        },
                        {
                          "patterns": [
                            {
                              "pattern-either": [
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.getopt(...)\n...\n"
                                },
                                {
                                  "pattern-inside": "$OPTS, $ARGS = getopt.gnu_getopt(...)\n...\n"
                                }
                              ]
                            },
                            {
                              "pattern-either": [
                                {
                                  "patterns": [
                                    {
                                      "pattern-inside": "for $O, $A in $OPTS:\n  ...\n"
                                    },
                                    {
                                      "pattern": "$A"
                                    }
                                  ]
                                },
                                {
                                  "pattern": "$ARGS"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.aws-lambda.security.dangerous-subprocess-use.dangerous-subprocess-use",
      "languages": [
        "python"
      ],
      "message": "Detected subprocess function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.",
      "metadata": {
        "asvs": {
          "control_id": "5.3.8 OS Command Injection",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
          "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.python.org/3/library/subprocess.html",
          "https://docs.python.org/3/library/shlex.html"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "gxUyn1",
            "url": "https://semgrep.dev/playground/r/bZT4v2/python.aws-lambda.security.dangerous-subprocess-use.dangerous-subprocess-use",
            "version_id": "bZT4v2"
          }
        },
        "shortlink": "https://sg.run/XZ7B",
        "source": "https://semgrep.dev/r/python.aws-lambda.security.dangerous-subprocess-use.dangerous-subprocess-use",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python",
          "aws-lambda"
        ]
      },
      "mode": "taint",
      "pattern-sanitizers": [
        {
          "pattern": "shlex.escape(...)"
        }
      ],
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern": "$CMD"
            },
            {
              "pattern-either": [
                {
                  "pattern-inside": "subprocess.$FUNC($CMD, ...)"
                },
                {
                  "pattern-inside": "subprocess.$FUNC([$CMD,...], ...)"
                },
                {
                  "pattern-inside": "subprocess.$FUNC(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", $CMD, ...)"
                },
                {
                  "pattern-inside": "subprocess.$FUNC([\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", $CMD, ...], ...)"
                },
                {
                  "pattern-inside": "subprocess.$FUNC(\"=~/(python)/\", $CMD, ...)"
                },
                {
                  "pattern-inside": "subprocess.$FUNC([\"=~/(python)/\",$CMD,...],...)"
                }
              ]
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.django.security.injection.request-data-fileresponse.request-data-fileresponse",
      "languages": [
        "python"
      ],
      "message": "Found user-controlled request data being passed into a file open, which is them passed as an argument into  the FileResponse. This is dangerous because an attacker could specify an arbitrary file to read, which could result in leaking important data. Be sure to validate or sanitize the user-inputted filename in the request data before using it in FileResponse.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "GdU7QR",
            "url": "https://semgrep.dev/playground/r/WrT6R8/python.django.security.injection.request-data-fileresponse.request-data-fileresponse",
            "version_id": "WrT6R8"
          }
        },
        "shortlink": "https://sg.run/W862",
        "source": "https://semgrep.dev/r/python.django.security.injection.request-data-fileresponse.request-data-fileresponse",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "patterns": [
        {
          "pattern-inside": "def $FUNC(...):\n  ...\n"
        },
        {
          "pattern-either": [
            {
              "pattern": "django.http.FileResponse(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\ndjango.http.FileResponse(..., open($DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = open($DATA, ...)\n...\ndjango.http.FileResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.FileResponse(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "return django.http.FileResponse(..., request.$W.get(...), ...)"
            },
            {
              "pattern": "django.http.FileResponse(..., request.$W(...), ...)"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\ndjango.http.FileResponse(..., open($DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W(...)\n...\n$INTERM = open($DATA, ...)\n...\ndjango.http.FileResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.FileResponse(..., request.$W(...), ...)"
            },
            {
              "pattern": "return django.http.FileResponse(..., request.$W(...), ...)"
            },
            {
              "pattern": "django.http.FileResponse(..., request.$W[...], ...)"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\ndjango.http.FileResponse(..., open($DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W[...]\n...\n$INTERM = open($DATA, ...)\n...\ndjango.http.FileResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.FileResponse(..., request.$W[...], ...)"
            },
            {
              "pattern": "return django.http.FileResponse(..., request.$W[...], ...)"
            },
            {
              "pattern": "django.http.FileResponse(..., request.$W, ...)"
            },
            {
              "pattern": "$DATA = request.$W\n...\ndjango.http.FileResponse(..., open($DATA, ...), ...)\n"
            },
            {
              "pattern": "$DATA = request.$W\n...\n$INTERM = open($DATA, ...)\n...\ndjango.http.FileResponse(..., $INTERM, ...)\n"
            },
            {
              "pattern": "$A = django.http.FileResponse(..., request.$W, ...)"
            },
            {
              "pattern": "return django.http.FileResponse(..., request.$W, ...)"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.django.security.injection.request-data-write.request-data-write",
      "languages": [
        "python"
      ],
      "message": "Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "MEDIUM",
        "owasp": [
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "ReUg5z",
            "url": "https://semgrep.dev/playground/r/0bT64G/python.django.security.injection.request-data-write.request-data-write",
            "version_id": "0bT64G"
          }
        },
        "shortlink": "https://sg.run/0Q6j",
        "source": "https://semgrep.dev/r/python.django.security.injection.request-data-write.request-data-write",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "django"
        ]
      },
      "pattern-either": [
        {
          "pattern": "$F.write(..., request.$W.get(...), ...)"
        },
        {
          "pattern": "$DATA = request.$W.get(...)\n...\n$F.write(..., $DATA, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W.get(...)\n...\n$F.write(..., $B.$C(..., $DATA, ...), ...)\n"
        },
        {
          "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $B.$C(..., $DATA, ...)\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W.get(...)\n...\n$F.write(..., $STR % $DATA, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W.get(...)\n...\n$F.write(..., f\"...{$DATA}...\", ...)\n"
        },
        {
          "pattern": "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$A = $F.write(..., request.$W.get(...), ...)"
        },
        {
          "pattern": "return $F.write(..., request.$W.get(...), ...)"
        },
        {
          "pattern": "$F.write(..., request.$W(...), ...)"
        },
        {
          "pattern": "$DATA = request.$W(...)\n...\n$F.write(..., $DATA, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W(...)\n...\n$F.write(..., $B.$C(..., $DATA, ...), ...)\n"
        },
        {
          "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $B.$C(..., $DATA, ...)\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W(...)\n...\n$F.write(..., $STR % $DATA, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W(...)\n...\n$F.write(..., f\"...{$DATA}...\", ...)\n"
        },
        {
          "pattern": "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$A = $F.write(..., request.$W(...), ...)"
        },
        {
          "pattern": "return $F.write(..., request.$W(...), ...)"
        },
        {
          "pattern": "$F.write(..., request.$W[...], ...)"
        },
        {
          "pattern": "$DATA = request.$W[...]\n...\n$F.write(..., $DATA, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W[...]\n...\n$F.write(..., $B.$C(..., $DATA, ...), ...)\n"
        },
        {
          "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $B.$C(..., $DATA, ...)\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W[...]\n...\n$F.write(..., $STR % $DATA, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W[...]\n...\n$F.write(..., f\"...{$DATA}...\", ...)\n"
        },
        {
          "pattern": "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$A = $F.write(..., request.$W[...], ...)"
        },
        {
          "pattern": "return $F.write(..., request.$W[...], ...)"
        },
        {
          "pattern": "$F.write(..., request.$W, ...)"
        },
        {
          "pattern": "$DATA = request.$W\n...\n$F.write(..., $DATA, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W\n...\n$INTERM = $DATA\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W\n...\n$F.write(..., $B.$C(..., $DATA, ...), ...)\n"
        },
        {
          "pattern": "$DATA = request.$W\n...\n$INTERM = $B.$C(..., $DATA, ...)\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W\n...\n$F.write(..., $STR % $DATA, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$DATA = request.$W\n...\n$F.write(..., f\"...{$DATA}...\", ...)\n"
        },
        {
          "pattern": "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$F.write(..., $INTERM, ...)\n"
        },
        {
          "pattern": "$A = $F.write(..., request.$W, ...)"
        },
        {
          "pattern": "return $F.write(..., request.$W, ...)"
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation",
      "languages": [
        "python"
      ],
      "message": "certificate verification explicitly disabled, insecure connections possible",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-295: Improper Certificate Validation"
        ],
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A07:2021 - Identification and Authentication Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "eqU87k",
            "url": "https://semgrep.dev/playground/r/GxTWwe/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation",
            "version_id": "GxTWwe"
          }
        },
        "shortlink": "https://sg.run/b7yp",
        "source": "https://semgrep.dev/r/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "patterns": [
        {
          "pattern-either": [
            {
              "pattern": "urllib3.PoolManager(..., cert_reqs=$REQS, ...)"
            },
            {
              "pattern": "urllib3.ProxyManager(..., cert_reqs=$REQS, ...)"
            },
            {
              "pattern": "urllib3.HTTPSConnectionPool(..., cert_reqs=$REQS, ...)"
            },
            {
              "pattern": "urllib3.connectionpool.HTTPSConnectionPool(..., cert_reqs=$REQS, ...)"
            },
            {
              "pattern": "urllib3.connection_from_url(..., cert_reqs=$REQS, ...)"
            },
            {
              "pattern": "urllib3.proxy_from_url(..., cert_reqs=$REQS, ...)"
            },
            {
              "pattern": "$CONTEXT.wrap_socket(..., cert_reqs=$REQS, ...)"
            },
            {
              "pattern": "ssl.wrap_socket(..., cert_reqs=$REQS, ...)"
            }
          ]
        },
        {
          "metavariable-regex": {
            "metavariable": "$REQS",
            "regex": "(NONE|CERT_NONE|CERT_OPTIONAL|ssl\\.CERT_NONE|ssl\\.CERT_OPTIONAL|\\'NONE\\'|\\\"NONE\\\"|\\'OPTIONAL\\'|\\\"OPTIONAL\\\")"
          }
        }
      ],
      "severity": "ERROR"
    },
    {
      "id": "python.aws-lambda.security.sqlalchemy-sqli.sqlalchemy-sqli",
      "languages": [
        "python"
      ],
      "message": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, used parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = ?', 'active')`",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "HIGH",
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://docs.sqlalchemy.org/en/14/core/connections.html#sqlalchemy.engine.Connection.execute"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "5rUy3N",
            "url": "https://semgrep.dev/playground/r/vdT3Pq/python.aws-lambda.security.sqlalchemy-sqli.sqlalchemy-sqli",
            "version_id": "vdT3Pq"
          }
        },
        "shortlink": "https://sg.run/b48W",
        "source": "https://semgrep.dev/r/python.aws-lambda.security.sqlalchemy-sqli.sqlalchemy-sqli",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "aws-lambda",
          "sqlalchemy"
        ]
      },
      "mode": "taint",
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern": "$QUERY"
            },
            {
              "pattern-inside": "$CURSOR.execute($QUERY,...)"
            },
            {
              "pattern-inside": "import sqlalchemy\n...\n"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "event"
            },
            {
              "pattern-inside": "def $HANDLER(event, context):\n  ...\n"
            }
          ]
        }
      ],
      "severity": "WARNING"
    },
    {
      "id": "python.lang.security.use-defused-xml.use-defused-xml",
      "languages": [
        "python"
      ],
      "message": "The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and \"XML bombs\" can cause denial of service.",
      "metadata": {
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-611: Improper Restriction of XML External Entity Reference"
        ],
        "cwe2021-top25": true,
        "cwe2022-top25": true,
        "impact": "MEDIUM",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A04:2017 - XML External Entities (XXE)",
          "A05:2021 - Security Misconfiguration"
        ],
        "references": [
          "https://docs.python.org/3/library/xml.html",
          "https://github.com/tiran/defusedxml",
          "https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "d8UjRx",
            "url": "https://semgrep.dev/playground/r/nWTwqD/python.lang.security.use-defused-xml.use-defused-xml",
            "version_id": "nWTwqD"
          }
        },
        "shortlink": "https://sg.run/kX47",
        "source": "https://semgrep.dev/r/python.lang.security.use-defused-xml.use-defused-xml",
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "python"
        ]
      },
      "pattern": "import xml",
      "severity": "ERROR"
    },
    {
      "fix-regex": {
        "count": 1,
        "regex": "[Hh][Tt][Tt][Pp]://",
        "replacement": "https://"
      },
      "id": "python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context.request-session-http-in-with-context",
      "languages": [
        "python"
      ],
      "message": "Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.",
      "metadata": {
        "asvs": {
          "control_id": "9.2.1 Weak TLS",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements",
          "section": "V9 Communications Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "lBU9BZ",
            "url": "https://semgrep.dev/playground/r/zyTgNb/python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context.request-session-http-in-with-context",
            "version_id": "zyTgNb"
          }
        },
        "shortlink": "https://sg.run/Bk5W",
        "source": "https://semgrep.dev/r/python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context.request-session-http-in-with-context",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "requests"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-inside": "with requests.Session(...) as $SESSION:\n  ...\n"
            },
            {
              "pattern-either": [
                {
                  "pattern": "$SESSION.$W($SINK, ...)"
                },
                {
                  "pattern": "$SESSION.request($METHOD, $SINK, ...)"
                }
              ]
            },
            {
              "focus-metavariable": "$SINK"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "\"$URL\"\n"
            },
            {
              "metavariable-pattern": {
                "language": "regex",
                "metavariable": "$URL",
                "patterns": [
                  {
                    "pattern-regex": "http://"
                  },
                  {
                    "pattern-not-regex": ".*://localhost"
                  },
                  {
                    "pattern-not-regex": ".*://127\\.0\\.0\\.1"
                  }
                ]
              }
            }
          ]
        }
      ],
      "severity": "INFO"
    },
    {
      "fix-regex": {
        "count": 1,
        "regex": "[Hh][Tt][Tt][Pp]://",
        "replacement": "https://"
      },
      "id": "python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http",
      "languages": [
        "python"
      ],
      "message": "Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.",
      "metadata": {
        "asvs": {
          "control_id": "9.1.1 Weak TLS",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements",
          "section": "V9 Communications Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "YGURXw",
            "url": "https://semgrep.dev/playground/r/pZTgen/python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http",
            "version_id": "pZTgen"
          }
        },
        "shortlink": "https://sg.run/DoBY",
        "source": "https://semgrep.dev/r/python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "requests"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "requests.Session(...).$W($SINK, ...)"
                },
                {
                  "pattern": "requests.Session(...).request($METHOD, $SINK, ...)"
                }
              ]
            },
            {
              "focus-metavariable": "$SINK"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "\"$URL\"\n"
            },
            {
              "metavariable-pattern": {
                "language": "regex",
                "metavariable": "$URL",
                "patterns": [
                  {
                    "pattern-regex": "http://"
                  },
                  {
                    "pattern-not-regex": ".*://localhost"
                  },
                  {
                    "pattern-not-regex": ".*://127\\.0\\.0\\.1"
                  }
                ]
              }
            }
          ]
        }
      ],
      "severity": "INFO"
    },
    {
      "fix-regex": {
        "count": 1,
        "regex": "[Hh][Tt][Tt][Pp]://",
        "replacement": "https://"
      },
      "id": "python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http",
      "languages": [
        "python"
      ],
      "message": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.",
      "metadata": {
        "asvs": {
          "control_id": "9.1.1 Weak TLS",
          "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements",
          "section": "V9 Communications Verification Requirements",
          "version": "4"
        },
        "category": "security",
        "confidence": "MEDIUM",
        "cwe": [
          "CWE-319: Cleartext Transmission of Sensitive Information"
        ],
        "impact": "LOW",
        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
        "likelihood": "LOW",
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
        ],
        "semgrep.dev": {
          "rule": {
            "rule_id": "6JUjpG",
            "url": "https://semgrep.dev/playground/r/2KTN5R/python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http",
            "version_id": "2KTN5R"
          }
        },
        "shortlink": "https://sg.run/W8J4",
        "source": "https://semgrep.dev/r/python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http",
        "subcategory": [
          "audit"
        ],
        "technology": [
          "requests"
        ]
      },
      "mode": "taint",
      "options": {
        "symbolic_propagation": true
      },
      "pattern-sinks": [
        {
          "patterns": [
            {
              "pattern-either": [
                {
                  "pattern": "requests.$W($SINK, ...)"
                },
                {
                  "pattern": "requests.request($METHOD, $SINK, ...)"
                },
                {
                  "pattern": "requests.Request($METHOD, $SINK, ...)"
                }
              ]
            },
            {
              "focus-metavariable": "$SINK"
            }
          ]
        }
      ],
      "pattern-sources": [
        {
          "patterns": [
            {
              "pattern": "\"$URL\"\n"
            },
            {
              "metavariable-pattern": {
                "language": "regex",
                "metavariable": "$URL",
                "patterns": [
                  {
                    "pattern-regex": "http://"
                  },
                  {
                    "pattern-not-regex": ".*://localhost"
                  },
                  {
                    "pattern-not-regex": ".*://127\\.0\\.0\\.1"
                  }
                ]
              }
            }
          ]
        }
      ],
      "severity": "INFO"
    }
  ]
}